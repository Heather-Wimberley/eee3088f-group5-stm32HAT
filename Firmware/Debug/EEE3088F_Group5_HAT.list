
EEE3088F_Group5_HAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  080033bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080033bc  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5e7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5d  00000000  00000000  0002e61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00030578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00031068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ac5  00000000  00000000  00031a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9ce  00000000  00000000  00044555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006f360  00000000  00000000  00052f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002680  00000000  00000000  000c22d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003348 	.word	0x08003348

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003348 	.word	0x08003348

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	1dbb      	adds	r3, r7, #6
 800023a:	801a      	strh	r2, [r3, #0]
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	1c0a      	adds	r2, r1, #0
 8000240:	801a      	strh	r2, [r3, #0]
	if ((size+offset)<PAGE_SIZE) return size;
 8000242:	1dbb      	adds	r3, r7, #6
 8000244:	881a      	ldrh	r2, [r3, #0]
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	18d3      	adds	r3, r2, r3
 800024c:	2b3f      	cmp	r3, #63	; 0x3f
 800024e:	dc02      	bgt.n	8000256 <bytestowrite+0x26>
 8000250:	1dbb      	adds	r3, r7, #6
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	e004      	b.n	8000260 <bytestowrite+0x30>
	else return PAGE_SIZE-offset;
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	2240      	movs	r2, #64	; 0x40
 800025c:	1ad3      	subs	r3, r2, r3
 800025e:	b29b      	uxth	r3, r3
}
 8000260:	0018      	movs	r0, r3
 8000262:	46bd      	mov	sp, r7
 8000264:	b002      	add	sp, #8
 8000266:	bd80      	pop	{r7, pc}

08000268 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026a:	b08f      	sub	sp, #60	; 0x3c
 800026c:	af04      	add	r7, sp, #16
 800026e:	0004      	movs	r4, r0
 8000270:	0008      	movs	r0, r1
 8000272:	60ba      	str	r2, [r7, #8]
 8000274:	0019      	movs	r1, r3
 8000276:	250e      	movs	r5, #14
 8000278:	197b      	adds	r3, r7, r5
 800027a:	1c22      	adds	r2, r4, #0
 800027c:	801a      	strh	r2, [r3, #0]
 800027e:	240c      	movs	r4, #12
 8000280:	193b      	adds	r3, r7, r4
 8000282:	1c02      	adds	r2, r0, #0
 8000284:	801a      	strh	r2, [r3, #0]
 8000286:	1dbb      	adds	r3, r7, #6
 8000288:	1c0a      	adds	r2, r1, #0
 800028a:	801a      	strh	r2, [r3, #0]
	int paddrposition = log(PAGE_SIZE)/log(2);
 800028c:	2306      	movs	r3, #6
 800028e:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000290:	2326      	movs	r3, #38	; 0x26
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	197a      	adds	r2, r7, r5
 8000296:	8812      	ldrh	r2, [r2, #0]
 8000298:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800029a:	1dbb      	adds	r3, r7, #6
 800029c:	881a      	ldrh	r2, [r3, #0]
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	18d3      	adds	r3, r2, r3
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	da00      	bge.n	80002aa <EEPROM_Read+0x42>
 80002a8:	333f      	adds	r3, #63	; 0x3f
 80002aa:	119b      	asrs	r3, r3, #6
 80002ac:	b299      	uxth	r1, r3
 80002ae:	201a      	movs	r0, #26
 80002b0:	183b      	adds	r3, r7, r0
 80002b2:	220e      	movs	r2, #14
 80002b4:	18ba      	adds	r2, r7, r2
 80002b6:	8812      	ldrh	r2, [r2, #0]
 80002b8:	188a      	adds	r2, r1, r2
 80002ba:	801a      	strh	r2, [r3, #0]

	uint16_t numofpages = (endPage-startPage) + 1;
 80002bc:	183a      	adds	r2, r7, r0
 80002be:	2326      	movs	r3, #38	; 0x26
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	8812      	ldrh	r2, [r2, #0]
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	2318      	movs	r3, #24
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	3201      	adds	r2, #1
 80002d0:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 80002d2:	2324      	movs	r3, #36	; 0x24
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	2200      	movs	r2, #0
 80002d8:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<numofpages; i++)
 80002da:	2300      	movs	r3, #0
 80002dc:	623b      	str	r3, [r7, #32]
 80002de:	e04a      	b.n	8000376 <EEPROM_Read+0x10e>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80002e0:	2626      	movs	r6, #38	; 0x26
 80002e2:	19bb      	adds	r3, r7, r6
 80002e4:	881a      	ldrh	r2, [r3, #0]
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	409a      	lsls	r2, r3
 80002ea:	0013      	movs	r3, r2
 80002ec:	b21a      	sxth	r2, r3
 80002ee:	210c      	movs	r1, #12
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2000      	movs	r0, #0
 80002f4:	5e1b      	ldrsh	r3, [r3, r0]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	b21a      	sxth	r2, r3
 80002fa:	2316      	movs	r3, #22
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000300:	2514      	movs	r5, #20
 8000302:	197c      	adds	r4, r7, r5
 8000304:	187b      	adds	r3, r7, r1
 8000306:	881a      	ldrh	r2, [r3, #0]
 8000308:	1dbb      	adds	r3, r7, #6
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	0011      	movs	r1, r2
 800030e:	0018      	movs	r0, r3
 8000310:	f7ff ff8e 	bl	8000230 <bytestowrite>
 8000314:	0003      	movs	r3, r0
 8000316:	8023      	strh	r3, [r4, #0]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000318:	2424      	movs	r4, #36	; 0x24
 800031a:	193b      	adds	r3, r7, r4
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	18d3      	adds	r3, r2, r3
 8000322:	2216      	movs	r2, #22
 8000324:	18ba      	adds	r2, r7, r2
 8000326:	8811      	ldrh	r1, [r2, #0]
 8000328:	4818      	ldr	r0, [pc, #96]	; (800038c <EEPROM_Read+0x124>)
 800032a:	22fa      	movs	r2, #250	; 0xfa
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	9202      	str	r2, [sp, #8]
 8000330:	197a      	adds	r2, r7, r5
 8000332:	8812      	ldrh	r2, [r2, #0]
 8000334:	9201      	str	r2, [sp, #4]
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2302      	movs	r3, #2
 800033a:	000a      	movs	r2, r1
 800033c:	21a0      	movs	r1, #160	; 0xa0
 800033e:	f000 ff83 	bl	8001248 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000342:	19bb      	adds	r3, r7, r6
 8000344:	19ba      	adds	r2, r7, r6
 8000346:	8812      	ldrh	r2, [r2, #0]
 8000348:	3201      	adds	r2, #1
 800034a:	801a      	strh	r2, [r3, #0]
		offset=0;
 800034c:	210c      	movs	r1, #12
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 8000354:	1dbb      	adds	r3, r7, #6
 8000356:	1db9      	adds	r1, r7, #6
 8000358:	197a      	adds	r2, r7, r5
 800035a:	8809      	ldrh	r1, [r1, #0]
 800035c:	8812      	ldrh	r2, [r2, #0]
 800035e:	1a8a      	subs	r2, r1, r2
 8000360:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;
 8000362:	193b      	adds	r3, r7, r4
 8000364:	1939      	adds	r1, r7, r4
 8000366:	197a      	adds	r2, r7, r5
 8000368:	8809      	ldrh	r1, [r1, #0]
 800036a:	8812      	ldrh	r2, [r2, #0]
 800036c:	188a      	adds	r2, r1, r2
 800036e:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numofpages; i++)
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	3301      	adds	r3, #1
 8000374:	623b      	str	r3, [r7, #32]
 8000376:	2318      	movs	r3, #24
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	6a3a      	ldr	r2, [r7, #32]
 800037e:	429a      	cmp	r2, r3
 8000380:	dbae      	blt.n	80002e0 <EEPROM_Read+0x78>
	}
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b00b      	add	sp, #44	; 0x2c
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	20000028 	.word	0x20000028

08000390 <debugPrintln>:
uint8_t dataWrite[100];
uint8_t time[3];
uint8_t date[3];

void debugPrintln(UART_HandleTypeDef *uart_handle,char _out[])
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart_handle, (uint8_t *) _out, strlen(_out), 60);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	0018      	movs	r0, r3
 800039e:	f7ff feb3 	bl	8000108 <strlen>
 80003a2:	0003      	movs	r3, r0
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	6839      	ldr	r1, [r7, #0]
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	233c      	movs	r3, #60	; 0x3c
 80003ac:	f002 fbf6 	bl	8002b9c <HAL_UART_Transmit>
	char newline[2]="\r\n";
 80003b0:	210c      	movs	r1, #12
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	4a05      	ldr	r2, [pc, #20]	; (80003cc <debugPrintln+0x3c>)
 80003b6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(uart_handle, (uint8_t *) newline, 2, 10);
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	230a      	movs	r3, #10
 80003be:	2202      	movs	r2, #2
 80003c0:	f002 fbec 	bl	8002b9c <HAL_UART_Transmit>
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b004      	add	sp, #16
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	00000a0d 	.word	0x00000a0d

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d4:	f000 fbbe 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d8:	f000 f832 	bl	8000440 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003dc:	f000 f970 	bl	80006c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003e0:	f000 f89c 	bl	800051c <MX_I2C1_Init>
  MX_RTC_Init();
 80003e4:	f000 f8da 	bl	800059c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80003e8:	f000 f93a 	bl	8000660 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  set_time();
 80003ec:	f000 fa1c 	bl	8000828 <set_time>
  /*for (int i = 0; i<512;i++)
  {
	  EEPROM_PageErase(i);
  }
*/
  EEPROM_Read(3, 0, dataRead, 128);
 80003f0:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <main+0x60>)
 80003f2:	2380      	movs	r3, #128	; 0x80
 80003f4:	2100      	movs	r1, #0
 80003f6:	2003      	movs	r0, #3
 80003f8:	f7ff ff36 	bl	8000268 <EEPROM_Read>
  HAL_Delay (200);
 80003fc:	20c8      	movs	r0, #200	; 0xc8
 80003fe:	f000 fc0d 	bl	8000c1c <HAL_Delay>
  get_time_to_store();
 8000402:	f000 fa51 	bl	80008a8 <get_time_to_store>
  get_time_to_store();
 8000406:	f000 fa4f 	bl	80008a8 <get_time_to_store>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  debugPrintln(&huart1, "Hello World!");
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <main+0x64>)
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <main+0x68>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f7ff ffbd 	bl	8000390 <debugPrintln>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000416:	2380      	movs	r3, #128	; 0x80
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	4a08      	ldr	r2, [pc, #32]	; (800043c <main+0x6c>)
 800041c:	0019      	movs	r1, r3
 800041e:	0010      	movs	r0, r2
 8000420:	f000 fe61 	bl	80010e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000424:	23fa      	movs	r3, #250	; 0xfa
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fbf7 	bl	8000c1c <HAL_Delay>
	  debugPrintln(&huart1, "Hello World!");
 800042e:	e7ec      	b.n	800040a <main+0x3a>
 8000430:	20000074 	.word	0x20000074
 8000434:	08003360 	.word	0x08003360
 8000438:	200000f4 	.word	0x200000f4
 800043c:	48000800 	.word	0x48000800

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b097      	sub	sp, #92	; 0x5c
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	2428      	movs	r4, #40	; 0x28
 8000448:	193b      	adds	r3, r7, r4
 800044a:	0018      	movs	r0, r3
 800044c:	2330      	movs	r3, #48	; 0x30
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f002 ff71 	bl	8003338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	2318      	movs	r3, #24
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	0018      	movs	r0, r3
 800045c:	2310      	movs	r3, #16
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f002 ff69 	bl	8003338 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	0018      	movs	r0, r3
 800046a:	2314      	movs	r3, #20
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f002 ff62 	bl	8003338 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000474:	0021      	movs	r1, r4
 8000476:	187b      	adds	r3, r7, r1
 8000478:	220a      	movs	r2, #10
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2201      	movs	r2, #1
 8000480:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2210      	movs	r2, #16
 8000486:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2201      	movs	r2, #1
 800048c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2202      	movs	r2, #2
 8000492:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	22a0      	movs	r2, #160	; 0xa0
 800049e:	0392      	lsls	r2, r2, #14
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fa86 	bl	80019bc <HAL_RCC_OscConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80004b4:	f000 fa2a 	bl	800090c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	2118      	movs	r1, #24
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2207      	movs	r2, #7
 80004be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2202      	movs	r2, #2
 80004c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2101      	movs	r1, #1
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 fd8a 	bl	8001ff0 <HAL_RCC_ClockConfig>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80004e0:	f000 fa14 	bl	800090c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4a0c      	ldr	r2, [pc, #48]	; (8000518 <SystemClock_Config+0xd8>)
 80004e8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	0092      	lsls	r2, r2, #2
 80004fc:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	0018      	movs	r0, r3
 8000502:	f001 fec7 	bl	8002294 <HAL_RCCEx_PeriphCLKConfig>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800050a:	f000 f9ff 	bl	800090c <Error_Handler>
  }
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b017      	add	sp, #92	; 0x5c
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	00010021 	.word	0x00010021

0800051c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_I2C1_Init+0x74>)
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <MX_I2C1_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_I2C1_Init+0x74>)
 8000528:	4a1b      	ldr	r2, [pc, #108]	; (8000598 <MX_I2C1_Init+0x7c>)
 800052a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_I2C1_Init+0x74>)
 8000534:	2201      	movs	r2, #1
 8000536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_I2C1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_I2C1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MX_I2C1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_I2C1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_I2C1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_I2C1_Init+0x74>)
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fddf 	bl	800111c <HAL_I2C_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000562:	f000 f9d3 	bl	800090c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <MX_I2C1_Init+0x74>)
 8000568:	2100      	movs	r1, #0
 800056a:	0018      	movs	r0, r3
 800056c:	f001 f98e 	bl	800188c <HAL_I2CEx_ConfigAnalogFilter>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000574:	f000 f9ca 	bl	800090c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MX_I2C1_Init+0x74>)
 800057a:	2100      	movs	r1, #0
 800057c:	0018      	movs	r0, r3
 800057e:	f001 f9d1 	bl	8001924 <HAL_I2CEx_ConfigDigitalFilter>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000586:	f000 f9c1 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000028 	.word	0x20000028
 8000594:	40005400 	.word	0x40005400
 8000598:	2000090e 	.word	0x2000090e

0800059c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	2314      	movs	r3, #20
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f002 fec4 	bl	8003338 <memset>
  RTC_DateTypeDef sDate = {0};
 80005b0:	003b      	movs	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_RTC_Init+0xbc>)
 80005b8:	4a28      	ldr	r2, [pc, #160]	; (800065c <MX_RTC_Init+0xc0>)
 80005ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_RTC_Init+0xbc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_RTC_Init+0xbc>)
 80005c4:	227f      	movs	r2, #127	; 0x7f
 80005c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_RTC_Init+0xbc>)
 80005ca:	22ff      	movs	r2, #255	; 0xff
 80005cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_RTC_Init+0xbc>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_RTC_Init+0xbc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005da:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_RTC_Init+0xbc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_RTC_Init+0xbc>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 ff34 	bl	8002450 <HAL_RTC_Init>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80005ec:	f000 f98e 	bl	800090c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2210      	movs	r2, #16
 80005f4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x20;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2220      	movs	r2, #32
 80005fa:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x30;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800060e:	1d39      	adds	r1, r7, #4
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_RTC_Init+0xbc>)
 8000612:	2201      	movs	r2, #1
 8000614:	0018      	movs	r0, r3
 8000616:	f001 ffaf 	bl	8002578 <HAL_RTC_SetTime>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800061e:	f000 f975 	bl	800090c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000622:	003b      	movs	r3, r7
 8000624:	2205      	movs	r2, #5
 8000626:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000628:	003b      	movs	r3, r7
 800062a:	2204      	movs	r2, #4
 800062c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x29;
 800062e:	003b      	movs	r3, r7
 8000630:	2229      	movs	r2, #41	; 0x29
 8000632:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000634:	003b      	movs	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800063a:	0039      	movs	r1, r7
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_RTC_Init+0xbc>)
 800063e:	2201      	movs	r2, #1
 8000640:	0018      	movs	r0, r3
 8000642:	f002 f8b3 	bl	80027ac <HAL_RTC_SetDate>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800064a:	f000 f95f 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b006      	add	sp, #24
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000178 	.word	0x20000178
 800065c:	40002800 	.word	0x40002800

08000660 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000666:	4a15      	ldr	r2, [pc, #84]	; (80006bc <MX_USART1_UART_Init+0x5c>)
 8000668:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800066c:	2296      	movs	r2, #150	; 0x96
 800066e:	0192      	lsls	r2, r2, #6
 8000670:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MX_USART1_UART_Init+0x58>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fa25 	bl	8002af4 <HAL_UART_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ae:	f000 f92d 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000f4 	.word	0x200000f4
 80006bc:	40013800 	.word	0x40013800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	240c      	movs	r4, #12
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2314      	movs	r3, #20
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f002 fe31 	bl	8003338 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b51      	ldr	r3, [pc, #324]	; (800081c <MX_GPIO_Init+0x15c>)
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	4b50      	ldr	r3, [pc, #320]	; (800081c <MX_GPIO_Init+0x15c>)
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	0289      	lsls	r1, r1, #10
 80006e0:	430a      	orrs	r2, r1
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	4b4d      	ldr	r3, [pc, #308]	; (800081c <MX_GPIO_Init+0x15c>)
 80006e6:	695a      	ldr	r2, [r3, #20]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	029b      	lsls	r3, r3, #10
 80006ec:	4013      	ands	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b4a      	ldr	r3, [pc, #296]	; (800081c <MX_GPIO_Init+0x15c>)
 80006f4:	695a      	ldr	r2, [r3, #20]
 80006f6:	4b49      	ldr	r3, [pc, #292]	; (800081c <MX_GPIO_Init+0x15c>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	02c9      	lsls	r1, r1, #11
 80006fc:	430a      	orrs	r2, r1
 80006fe:	615a      	str	r2, [r3, #20]
 8000700:	4b46      	ldr	r3, [pc, #280]	; (800081c <MX_GPIO_Init+0x15c>)
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	02db      	lsls	r3, r3, #11
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b43      	ldr	r3, [pc, #268]	; (800081c <MX_GPIO_Init+0x15c>)
 8000710:	695a      	ldr	r2, [r3, #20]
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <MX_GPIO_Init+0x15c>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0309      	lsls	r1, r1, #12
 8000718:	430a      	orrs	r2, r1
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	4b3f      	ldr	r3, [pc, #252]	; (800081c <MX_GPIO_Init+0x15c>)
 800071e:	695a      	ldr	r2, [r3, #20]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	031b      	lsls	r3, r3, #12
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Temp_Active_Pin|Proximity_Active_Pin, GPIO_PIN_RESET);
 800072a:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <MX_GPIO_Init+0x160>)
 800072c:	2200      	movs	r2, #0
 800072e:	2111      	movs	r1, #17
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fcbb 	bl	80010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000736:	23c0      	movs	r3, #192	; 0xc0
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	483a      	ldr	r0, [pc, #232]	; (8000824 <MX_GPIO_Init+0x164>)
 800073c:	2200      	movs	r2, #0
 800073e:	0019      	movs	r1, r3
 8000740:	f000 fcb4 	bl	80010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2290      	movs	r2, #144	; 0x90
 800074e:	0352      	lsls	r2, r2, #13
 8000750:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000758:	193a      	adds	r2, r7, r4
 800075a:	2390      	movs	r3, #144	; 0x90
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f000 fb33 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_on_Pin */
  GPIO_InitStruct.Pin = USB_on_Pin;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2210      	movs	r2, #16
 800076a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_on_GPIO_Port, &GPIO_InitStruct);
 8000778:	193a      	adds	r2, r7, r4
 800077a:	2390      	movs	r3, #144	; 0x90
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fb23 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : Temp_Active_Pin Proximity_Active_Pin */
  GPIO_InitStruct.Pin = Temp_Active_Pin|Proximity_Active_Pin;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2211      	movs	r2, #17
 800078a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2201      	movs	r2, #1
 8000790:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <MX_GPIO_Init+0x160>)
 80007a2:	0019      	movs	r1, r3
 80007a4:	0010      	movs	r0, r2
 80007a6:	f000 fb11 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Data_Pin */
  GPIO_InitStruct.Pin = Temp_Data_Pin;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2202      	movs	r2, #2
 80007ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	2203      	movs	r2, #3
 80007b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Data_GPIO_Port, &GPIO_InitStruct);
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_GPIO_Init+0x160>)
 80007c0:	0019      	movs	r1, r3
 80007c2:	0010      	movs	r0, r2
 80007c4:	f000 fb02 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80007c8:	0021      	movs	r1, r4
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	22c0      	movs	r2, #192	; 0xc0
 80007ce:	0092      	lsls	r2, r2, #2
 80007d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	000c      	movs	r4, r1
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2201      	movs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <MX_GPIO_Init+0x164>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f000 faed 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Interrupt_Pin */
  GPIO_InitStruct.Pin = Proximity_Interrupt_Pin;
 80007f2:	0021      	movs	r1, r4
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2220      	movs	r2, #32
 80007f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Proximity_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8000806:	187b      	adds	r3, r7, r1
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <MX_GPIO_Init+0x160>)
 800080a:	0019      	movs	r1, r3
 800080c:	0010      	movs	r0, r2
 800080e:	f000 fadd 	bl	8000dcc <HAL_GPIO_Init>

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b009      	add	sp, #36	; 0x24
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400
 8000824:	48000800 	.word	0x48000800

08000828 <set_time>:

/* USER CODE BEGIN 4 */
void set_time (void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  sTime.Hours = 0x10;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2210      	movs	r2, #16
 8000832:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x20;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2220      	movs	r2, #32
 8000838:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x30;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2230      	movs	r2, #48	; 0x30
 800083e:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800084c:	1d39      	adds	r1, r7, #4
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <set_time+0x78>)
 8000850:	2201      	movs	r2, #1
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fe90 	bl	8002578 <HAL_RTC_SetTime>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <set_time+0x38>
	{
		Error_Handler();
 800085c:	f000 f856 	bl	800090c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000860:	003b      	movs	r3, r7
 8000862:	2205      	movs	r2, #5
 8000864:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_APRIL;
 8000866:	003b      	movs	r3, r7
 8000868:	2204      	movs	r2, #4
 800086a:	705a      	strb	r2, [r3, #1]
	sDate.Date = 0x29;
 800086c:	003b      	movs	r3, r7
 800086e:	2229      	movs	r2, #41	; 0x29
 8000870:	709a      	strb	r2, [r3, #2]
	sDate.Year = 0x22;
 8000872:	003b      	movs	r3, r7
 8000874:	2222      	movs	r2, #34	; 0x22
 8000876:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000878:	0039      	movs	r1, r7
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <set_time+0x78>)
 800087c:	2201      	movs	r2, #1
 800087e:	0018      	movs	r0, r3
 8000880:	f001 ff94 	bl	80027ac <HAL_RTC_SetDate>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <set_time+0x64>
	{
		Error_Handler();
 8000888:	f000 f840 	bl	800090c <Error_Handler>
	}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <set_time+0x7c>)
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <set_time+0x78>)
 8000890:	2101      	movs	r1, #1
 8000892:	0018      	movs	r0, r3
 8000894:	f002 f915 	bl	8002ac2 <HAL_RTCEx_BKUPWrite>
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b006      	add	sp, #24
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000178 	.word	0x20000178
 80008a4:	000032f2 	.word	0x000032f2

080008a8 <get_time_to_store>:

void get_time_to_store(void)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80008ae:	0039      	movs	r1, r7
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <get_time_to_store+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 ff1b 	bl	80026f0 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80008ba:	2414      	movs	r4, #20
 80008bc:	1939      	adds	r1, r7, r4
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <get_time_to_store+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	0018      	movs	r0, r3
 80008c4:	f002 f818 	bl	80028f8 <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 time[0] = gTime.Hours;
 80008c8:	003b      	movs	r3, r7
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <get_time_to_store+0x5c>)
 80008ce:	701a      	strb	r2, [r3, #0]
 time[1] = gTime.Minutes;
 80008d0:	003b      	movs	r3, r7
 80008d2:	785a      	ldrb	r2, [r3, #1]
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <get_time_to_store+0x5c>)
 80008d6:	705a      	strb	r2, [r3, #1]
 time[2] = gTime.Seconds;
 80008d8:	003b      	movs	r3, r7
 80008da:	789a      	ldrb	r2, [r3, #2]
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <get_time_to_store+0x5c>)
 80008de:	709a      	strb	r2, [r3, #2]
/* Display date Format: dd-mm-yy */
 date[0] = gDate.Date;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	789a      	ldrb	r2, [r3, #2]
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <get_time_to_store+0x60>)
 80008e6:	701a      	strb	r2, [r3, #0]
 date[1] = gDate.Month;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	785a      	ldrb	r2, [r3, #1]
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <get_time_to_store+0x60>)
 80008ee:	705a      	strb	r2, [r3, #1]
 date[2] = gDate.Year;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	78da      	ldrb	r2, [r3, #3]
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <get_time_to_store+0x60>)
 80008f6:	709a      	strb	r2, [r3, #2]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b007      	add	sp, #28
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	20000178 	.word	0x20000178
 8000904:	20000198 	.word	0x20000198
 8000908:	20000200 	.word	0x20000200

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	699a      	ldr	r2, [r3, #24]
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	2101      	movs	r1, #1
 8000926:	430a      	orrs	r2, r1
 8000928:	619a      	str	r2, [r3, #24]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	2201      	movs	r2, #1
 8000930:	4013      	ands	r3, r2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	69da      	ldr	r2, [r3, #28]
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0549      	lsls	r1, r1, #21
 8000940:	430a      	orrs	r2, r1
 8000942:	61da      	str	r2, [r3, #28]
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_MspInit+0x44>)
 8000946:	69da      	ldr	r2, [r3, #28]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	055b      	lsls	r3, r3, #21
 800094c:	4013      	ands	r3, r2
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	2414      	movs	r4, #20
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	2314      	movs	r3, #20
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f002 fce0 	bl	8003338 <memset>
  if(hi2c->Instance==I2C1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <HAL_I2C_MspInit+0x90>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d132      	bne.n	80009e8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_I2C_MspInit+0x94>)
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <HAL_I2C_MspInit+0x94>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	02c9      	lsls	r1, r1, #11
 800098c:	430a      	orrs	r2, r1
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_I2C_MspInit+0x94>)
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	02db      	lsls	r3, r3, #11
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	22c0      	movs	r2, #192	; 0xc0
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a6:	0021      	movs	r1, r4
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2212      	movs	r2, #18
 80009ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2203      	movs	r2, #3
 80009b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2201      	movs	r2, #1
 80009be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_I2C_MspInit+0x98>)
 80009c4:	0019      	movs	r1, r3
 80009c6:	0010      	movs	r0, r2
 80009c8:	f000 fa00 	bl	8000dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_I2C_MspInit+0x94>)
 80009ce:	69da      	ldr	r2, [r3, #28]
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_I2C_MspInit+0x94>)
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	0389      	lsls	r1, r1, #14
 80009d6:	430a      	orrs	r2, r1
 80009d8:	61da      	str	r2, [r3, #28]
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_I2C_MspInit+0x94>)
 80009dc:	69da      	ldr	r2, [r3, #28]
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	039b      	lsls	r3, r3, #14
 80009e2:	4013      	ands	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b00b      	add	sp, #44	; 0x2c
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	40005400 	.word	0x40005400
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000400 	.word	0x48000400

080009fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_RTC_MspInit+0x28>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d106      	bne.n	8000a1c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_RTC_MspInit+0x2c>)
 8000a10:	6a1a      	ldr	r2, [r3, #32]
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_RTC_MspInit+0x2c>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	0209      	lsls	r1, r1, #8
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40002800 	.word	0x40002800
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b08b      	sub	sp, #44	; 0x2c
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	2414      	movs	r4, #20
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2314      	movs	r3, #20
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f002 fc7a 	bl	8003338 <memset>
  if(huart->Instance==USART1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_UART_MspInit+0x94>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d133      	bne.n	8000ab6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a50:	699a      	ldr	r2, [r3, #24]
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	01c9      	lsls	r1, r1, #7
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	619a      	str	r2, [r3, #24]
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a5e:	699a      	ldr	r2, [r3, #24]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	01db      	lsls	r3, r3, #7
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a6c:	695a      	ldr	r2, [r3, #20]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0289      	lsls	r1, r1, #10
 8000a74:	430a      	orrs	r2, r1
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_UART_MspInit+0x98>)
 8000a7a:	695a      	ldr	r2, [r3, #20]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	029b      	lsls	r3, r3, #10
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	22c0      	movs	r2, #192	; 0xc0
 8000a8a:	00d2      	lsls	r2, r2, #3
 8000a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	0021      	movs	r1, r4
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2202      	movs	r2, #2
 8000a94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	187a      	adds	r2, r7, r1
 8000aaa:	2390      	movs	r3, #144	; 0x90
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 f98b 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b00b      	add	sp, #44	; 0x2c
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	40013800 	.word	0x40013800
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f87a 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490e      	ldr	r1, [pc, #56]	; (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0b      	ldr	r4, [pc, #44]	; (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b2a:	f7ff ffe4 	bl	8000af6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b2e:	f002 fbdf 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fc4d 	bl	80003d0 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   r0, =_estack
 8000b38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b44:	080033b0 	.word	0x080033b0
  ldr r2, =_sbss
 8000b48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b4c:	20000208 	.word	0x20000208

08000b50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_COMP_IRQHandler>
	...

08000b54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_Init+0x24>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_Init+0x24>)
 8000b5e:	2110      	movs	r1, #16
 8000b60:	430a      	orrs	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f809 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6a:	f7ff fed5 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000b86:	681c      	ldr	r4, [r3, #0]
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_InitTick+0x60>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	23fa      	movs	r3, #250	; 0xfa
 8000b90:	0098      	lsls	r0, r3, #2
 8000b92:	f7ff fac1 	bl	8000118 <__udivsi3>
 8000b96:	0003      	movs	r3, r0
 8000b98:	0019      	movs	r1, r3
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	f7ff fabc 	bl	8000118 <__udivsi3>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 f905 	bl	8000db2 <HAL_SYSTICK_Config>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e00f      	b.n	8000bd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d80b      	bhi.n	8000bce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	425b      	negs	r3, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f8e2 	bl	8000d88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_InitTick+0x64>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b003      	add	sp, #12
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	001a      	movs	r2, r3
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	18d2      	adds	r2, r2, r3
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_IncTick+0x20>)
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000204 	.word	0x20000204

08000c08 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_GetTick+0x10>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	20000204 	.word	0x20000204

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff fff0 	bl	8000c08 <HAL_GetTick>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	189b      	adds	r3, r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	f7ff ffe0 	bl	8000c08 <HAL_GetTick>
 8000c48:	0002      	movs	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b004      	add	sp, #16
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b7f      	cmp	r3, #127	; 0x7f
 8000c78:	d828      	bhi.n	8000ccc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7a:	4a2f      	ldr	r2, [pc, #188]	; (8000d38 <__NVIC_SetPriority+0xd4>)
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	33c0      	adds	r3, #192	; 0xc0
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	589b      	ldr	r3, [r3, r2]
 8000c8a:	1dfa      	adds	r2, r7, #7
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	0011      	movs	r1, r2
 8000c90:	2203      	movs	r2, #3
 8000c92:	400a      	ands	r2, r1
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	21ff      	movs	r1, #255	; 0xff
 8000c98:	4091      	lsls	r1, r2
 8000c9a:	000a      	movs	r2, r1
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	22ff      	movs	r2, #255	; 0xff
 8000ca8:	401a      	ands	r2, r3
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	4003      	ands	r3, r0
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	481f      	ldr	r0, [pc, #124]	; (8000d38 <__NVIC_SetPriority+0xd4>)
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	33c0      	adds	r3, #192	; 0xc0
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cca:	e031      	b.n	8000d30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <__NVIC_SetPriority+0xd8>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3306      	adds	r3, #6
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	18d3      	adds	r3, r2, r3
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	1dfa      	adds	r2, r7, #7
 8000ce8:	7812      	ldrb	r2, [r2, #0]
 8000cea:	0011      	movs	r1, r2
 8000cec:	2203      	movs	r2, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	00d2      	lsls	r2, r2, #3
 8000cf2:	21ff      	movs	r1, #255	; 0xff
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	43d2      	mvns	r2, r2
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	22ff      	movs	r2, #255	; 0xff
 8000d04:	401a      	ands	r2, r3
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	4003      	ands	r3, r0
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <__NVIC_SetPriority+0xd8>)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	4023      	ands	r3, r4
 8000d20:	3b08      	subs	r3, #8
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	430a      	orrs	r2, r1
 8000d26:	3306      	adds	r3, #6
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	18c3      	adds	r3, r0, r3
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b003      	add	sp, #12
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	045b      	lsls	r3, r3, #17
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d301      	bcc.n	8000d58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d54:	2301      	movs	r3, #1
 8000d56:	e010      	b.n	8000d7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <SysTick_Config+0x44>)
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d60:	2301      	movs	r3, #1
 8000d62:	425b      	negs	r3, r3
 8000d64:	2103      	movs	r1, #3
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff ff7c 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x44>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x44>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	210f      	movs	r1, #15
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	1c02      	adds	r2, r0, #0
 8000d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ffbf 	bl	8000d40 <SysTick_Config>
 8000dc2:	0003      	movs	r3, r0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	e14f      	b.n	800107c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d100      	bne.n	8000df4 <HAL_GPIO_Init+0x28>
 8000df2:	e140      	b.n	8001076 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d005      	beq.n	8000e0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2203      	movs	r2, #3
 8000e06:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d130      	bne.n	8000e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e42:	2201      	movs	r2, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	2201      	movs	r2, #1
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2203      	movs	r2, #3
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d017      	beq.n	8000eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d123      	bne.n	8000efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	58d3      	ldr	r3, [r2, r3]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	4013      	ands	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	6939      	ldr	r1, [r7, #16]
 8000efc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	23c0      	movs	r3, #192	; 0xc0
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d100      	bne.n	8000f40 <HAL_GPIO_Init+0x174>
 8000f3e:	e09a      	b.n	8001076 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f40:	4b54      	ldr	r3, [pc, #336]	; (8001094 <HAL_GPIO_Init+0x2c8>)
 8000f42:	699a      	ldr	r2, [r3, #24]
 8000f44:	4b53      	ldr	r3, [pc, #332]	; (8001094 <HAL_GPIO_Init+0x2c8>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	619a      	str	r2, [r3, #24]
 8000f4c:	4b51      	ldr	r3, [pc, #324]	; (8001094 <HAL_GPIO_Init+0x2c8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	2201      	movs	r2, #1
 8000f52:	4013      	ands	r3, r2
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f58:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <HAL_GPIO_Init+0x2cc>)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	589b      	ldr	r3, [r3, r2]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	43da      	mvns	r2, r3
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	2390      	movs	r3, #144	; 0x90
 8000f80:	05db      	lsls	r3, r3, #23
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x1e2>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a44      	ldr	r2, [pc, #272]	; (800109c <HAL_GPIO_Init+0x2d0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x1de>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a43      	ldr	r2, [pc, #268]	; (80010a0 <HAL_GPIO_Init+0x2d4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x1da>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <HAL_GPIO_Init+0x2d8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x1d6>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x1e4>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x1e4>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x1e4>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x1e4>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	400a      	ands	r2, r1
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc0:	4935      	ldr	r1, [pc, #212]	; (8001098 <HAL_GPIO_Init+0x2cc>)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	025b      	lsls	r3, r3, #9
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	029b      	lsls	r3, r3, #10
 8001010:	4013      	ands	r3, r2
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	035b      	lsls	r3, r3, #13
 800103a:	4013      	ands	r3, r2
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43da      	mvns	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	039b      	lsls	r3, r3, #14
 8001064:	4013      	ands	r3, r2
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_GPIO_Init+0x2dc>)
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	40da      	lsrs	r2, r3
 8001084:	1e13      	subs	r3, r2, #0
 8001086:	d000      	beq.n	800108a <HAL_GPIO_Init+0x2be>
 8001088:	e6a8      	b.n	8000ddc <HAL_GPIO_Init+0x10>
  } 
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b006      	add	sp, #24
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000
 800109c:	48000400 	.word	0x48000400
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000c00 	.word	0x48000c00
 80010a8:	40010400 	.word	0x40010400

080010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	0008      	movs	r0, r1
 80010b6:	0011      	movs	r1, r2
 80010b8:	1cbb      	adds	r3, r7, #2
 80010ba:	1c02      	adds	r2, r0, #0
 80010bc:	801a      	strh	r2, [r3, #0]
 80010be:	1c7b      	adds	r3, r7, #1
 80010c0:	1c0a      	adds	r2, r1, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	1c7b      	adds	r3, r7, #1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010cc:	1cbb      	adds	r3, r7, #2
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d6:	1cbb      	adds	r3, r7, #2
 80010d8:	881a      	ldrh	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	000a      	movs	r2, r1
 80010f0:	1cbb      	adds	r3, r7, #2
 80010f2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010fa:	1cbb      	adds	r3, r7, #2
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	041a      	lsls	r2, r3, #16
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	1cb9      	adds	r1, r7, #2
 800110a:	8809      	ldrh	r1, [r1, #0]
 800110c:	400b      	ands	r3, r1
 800110e:	431a      	orrs	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b004      	add	sp, #16
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e082      	b.n	8001234 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2241      	movs	r2, #65	; 0x41
 8001132:	5c9b      	ldrb	r3, [r3, r2]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d107      	bne.n	800114a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	2100      	movs	r1, #0
 8001140:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff fc0b 	bl	8000960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2241      	movs	r2, #65	; 0x41
 800114e:	2124      	movs	r1, #36	; 0x24
 8001150:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	438a      	bics	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4934      	ldr	r1, [pc, #208]	; (800123c <HAL_I2C_Init+0x120>)
 800116c:	400a      	ands	r2, r1
 800116e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4931      	ldr	r1, [pc, #196]	; (8001240 <HAL_I2C_Init+0x124>)
 800117c:	400a      	ands	r2, r1
 800117e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0209      	lsls	r1, r1, #8
 8001194:	430a      	orrs	r2, r1
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	e007      	b.n	80011aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2184      	movs	r1, #132	; 0x84
 80011a4:	0209      	lsls	r1, r1, #8
 80011a6:	430a      	orrs	r2, r1
 80011a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d104      	bne.n	80011bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	491f      	ldr	r1, [pc, #124]	; (8001244 <HAL_I2C_Init+0x128>)
 80011c8:	430a      	orrs	r2, r1
 80011ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	491a      	ldr	r1, [pc, #104]	; (8001240 <HAL_I2C_Init+0x124>)
 80011d8:	400a      	ands	r2, r1
 80011da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69d9      	ldr	r1, [r3, #28]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1a      	ldr	r2, [r3, #32]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2241      	movs	r2, #65	; 0x41
 8001220:	2120      	movs	r1, #32
 8001222:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2242      	movs	r2, #66	; 0x42
 800122e:	2100      	movs	r1, #0
 8001230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}
 800123c:	f0ffffff 	.word	0xf0ffffff
 8001240:	ffff7fff 	.word	0xffff7fff
 8001244:	02008000 	.word	0x02008000

08001248 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	000c      	movs	r4, r1
 8001252:	0010      	movs	r0, r2
 8001254:	0019      	movs	r1, r3
 8001256:	230a      	movs	r3, #10
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	1c22      	adds	r2, r4, #0
 800125c:	801a      	strh	r2, [r3, #0]
 800125e:	2308      	movs	r3, #8
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	1c02      	adds	r2, r0, #0
 8001264:	801a      	strh	r2, [r3, #0]
 8001266:	1dbb      	adds	r3, r7, #6
 8001268:	1c0a      	adds	r2, r1, #0
 800126a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2241      	movs	r2, #65	; 0x41
 8001270:	5c9b      	ldrb	r3, [r3, r2]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b20      	cmp	r3, #32
 8001276:	d000      	beq.n	800127a <HAL_I2C_Mem_Read+0x32>
 8001278:	e110      	b.n	800149c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <HAL_I2C_Mem_Read+0x42>
 8001280:	232c      	movs	r3, #44	; 0x2c
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e103      	b.n	800149e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2240      	movs	r2, #64	; 0x40
 800129a:	5c9b      	ldrb	r3, [r3, r2]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_I2C_Mem_Read+0x5c>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e0fc      	b.n	800149e <HAL_I2C_Mem_Read+0x256>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2240      	movs	r2, #64	; 0x40
 80012a8:	2101      	movs	r1, #1
 80012aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012ac:	f7ff fcac 	bl	8000c08 <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	0219      	lsls	r1, r3, #8
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2319      	movs	r3, #25
 80012c0:	2201      	movs	r2, #1
 80012c2:	f000 f979 	bl	80015b8 <I2C_WaitOnFlagUntilTimeout>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e0e7      	b.n	800149e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2241      	movs	r2, #65	; 0x41
 80012d2:	2122      	movs	r1, #34	; 0x22
 80012d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2242      	movs	r2, #66	; 0x42
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	222c      	movs	r2, #44	; 0x2c
 80012ee:	18ba      	adds	r2, r7, r2
 80012f0:	8812      	ldrh	r2, [r2, #0]
 80012f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012fa:	1dbb      	adds	r3, r7, #6
 80012fc:	881c      	ldrh	r4, [r3, #0]
 80012fe:	2308      	movs	r3, #8
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	881a      	ldrh	r2, [r3, #0]
 8001304:	230a      	movs	r3, #10
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	8819      	ldrh	r1, [r3, #0]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	0023      	movs	r3, r4
 8001316:	f000 f8cb 	bl	80014b0 <I2C_RequestMemoryRead>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d005      	beq.n	800132a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	2100      	movs	r1, #0
 8001324:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0b9      	b.n	800149e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132e:	b29b      	uxth	r3, r3
 8001330:	2bff      	cmp	r3, #255	; 0xff
 8001332:	d911      	bls.n	8001358 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	22ff      	movs	r2, #255	; 0xff
 8001338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133e:	b2da      	uxtb	r2, r3
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	045c      	lsls	r4, r3, #17
 8001344:	230a      	movs	r3, #10
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	8819      	ldrh	r1, [r3, #0]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <HAL_I2C_Mem_Read+0x260>)
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	0023      	movs	r3, r4
 8001352:	f000 fa65 	bl	8001820 <I2C_TransferConfig>
 8001356:	e012      	b.n	800137e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001366:	b2da      	uxtb	r2, r3
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	049c      	lsls	r4, r3, #18
 800136c:	230a      	movs	r3, #10
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <HAL_I2C_Mem_Read+0x260>)
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	0023      	movs	r3, r4
 800137a:	f000 fa51 	bl	8001820 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800137e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	0013      	movs	r3, r2
 8001388:	2200      	movs	r2, #0
 800138a:	2104      	movs	r1, #4
 800138c:	f000 f914 	bl	80015b8 <I2C_WaitOnFlagUntilTimeout>
 8001390:	1e03      	subs	r3, r0, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e082      	b.n	800149e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d03a      	beq.n	800144a <HAL_I2C_Mem_Read+0x202>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d136      	bne.n	800144a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	0013      	movs	r3, r2
 80013e6:	2200      	movs	r2, #0
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	f000 f8e5 	bl	80015b8 <I2C_WaitOnFlagUntilTimeout>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e053      	b.n	800149e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2bff      	cmp	r3, #255	; 0xff
 80013fe:	d911      	bls.n	8001424 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	22ff      	movs	r2, #255	; 0xff
 8001404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140a:	b2da      	uxtb	r2, r3
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	045c      	lsls	r4, r3, #17
 8001410:	230a      	movs	r3, #10
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	8819      	ldrh	r1, [r3, #0]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	2300      	movs	r3, #0
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	0023      	movs	r3, r4
 800141e:	f000 f9ff 	bl	8001820 <I2C_TransferConfig>
 8001422:	e012      	b.n	800144a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001428:	b29a      	uxth	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	b2da      	uxtb	r2, r3
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	049c      	lsls	r4, r3, #18
 8001438:	230a      	movs	r3, #10
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	8819      	ldrh	r1, [r3, #0]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	0023      	movs	r3, r4
 8001446:	f000 f9eb 	bl	8001820 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800144e:	b29b      	uxth	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d194      	bne.n	800137e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	0018      	movs	r0, r3
 800145c:	f000 f92a 	bl	80016b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d001      	beq.n	8001468 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e01a      	b.n	800149e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2220      	movs	r2, #32
 800146e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <HAL_I2C_Mem_Read+0x264>)
 800147c:	400a      	ands	r2, r1
 800147e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2241      	movs	r2, #65	; 0x41
 8001484:	2120      	movs	r1, #32
 8001486:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2242      	movs	r2, #66	; 0x42
 800148c:	2100      	movs	r1, #0
 800148e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2240      	movs	r2, #64	; 0x40
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	e000      	b.n	800149e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800149c:	2302      	movs	r3, #2
  }
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b007      	add	sp, #28
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	80002400 	.word	0x80002400
 80014ac:	fe00e800 	.word	0xfe00e800

080014b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	000c      	movs	r4, r1
 80014ba:	0010      	movs	r0, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	250a      	movs	r5, #10
 80014c0:	197b      	adds	r3, r7, r5
 80014c2:	1c22      	adds	r2, r4, #0
 80014c4:	801a      	strh	r2, [r3, #0]
 80014c6:	2308      	movs	r3, #8
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	1c02      	adds	r2, r0, #0
 80014cc:	801a      	strh	r2, [r3, #0]
 80014ce:	1dbb      	adds	r3, r7, #6
 80014d0:	1c0a      	adds	r2, r1, #0
 80014d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80014d4:	1dbb      	adds	r3, r7, #6
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	197b      	adds	r3, r7, r5
 80014dc:	8819      	ldrh	r1, [r3, #0]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <I2C_RequestMemoryRead+0xc0>)
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2300      	movs	r3, #0
 80014e6:	f000 f99b 	bl	8001820 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ec:	6a39      	ldr	r1, [r7, #32]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f000 f8a0 	bl	8001636 <I2C_WaitOnTXISFlagUntilTimeout>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e033      	b.n	8001566 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001506:	2308      	movs	r3, #8
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
 8001514:	e019      	b.n	800154a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001516:	2308      	movs	r3, #8
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	b29b      	uxth	r3, r3
 8001520:	b2da      	uxtb	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152a:	6a39      	ldr	r1, [r7, #32]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	0018      	movs	r0, r3
 8001530:	f000 f881 	bl	8001636 <I2C_WaitOnTXISFlagUntilTimeout>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d001      	beq.n	800153c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e014      	b.n	8001566 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800153c:	2308      	movs	r3, #8
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	0013      	movs	r3, r2
 8001554:	2200      	movs	r2, #0
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	f000 f82e 	bl	80015b8 <I2C_WaitOnFlagUntilTimeout>
 800155c:	1e03      	subs	r3, r0, #0
 800155e:	d001      	beq.n	8001564 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bdb0      	pop	{r4, r5, r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	80002000 	.word	0x80002000

08001574 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	2b02      	cmp	r3, #2
 8001588:	d103      	bne.n	8001592 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	2b01      	cmp	r3, #1
 800159e:	d007      	beq.n	80015b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2101      	movs	r1, #1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	619a      	str	r2, [r3, #24]
  }
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015c8:	e021      	b.n	800160e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	d01e      	beq.n	800160e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d0:	f7ff fb1a 	bl	8000c08 <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d302      	bcc.n	80015e6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d113      	bne.n	800160e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	2220      	movs	r2, #32
 80015ec:	431a      	orrs	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2241      	movs	r2, #65	; 0x41
 80015f6:	2120      	movs	r1, #32
 80015f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2242      	movs	r2, #66	; 0x42
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	2100      	movs	r1, #0
 8001608:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	4013      	ands	r3, r2
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	425a      	negs	r2, r3
 800161e:	4153      	adcs	r3, r2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	001a      	movs	r2, r3
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d0ce      	beq.n	80015ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}

08001636 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001642:	e02b      	b.n	800169c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	0018      	movs	r0, r3
 800164c:	f000 f86e 	bl	800172c <I2C_IsAcknowledgeFailed>
 8001650:	1e03      	subs	r3, r0, #0
 8001652:	d001      	beq.n	8001658 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e029      	b.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3301      	adds	r3, #1
 800165c:	d01e      	beq.n	800169c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165e:	f7ff fad3 	bl	8000c08 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	429a      	cmp	r2, r3
 800166c:	d302      	bcc.n	8001674 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d113      	bne.n	800169c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	2220      	movs	r2, #32
 800167a:	431a      	orrs	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2241      	movs	r2, #65	; 0x41
 8001684:	2120      	movs	r1, #32
 8001686:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2242      	movs	r2, #66	; 0x42
 800168c:	2100      	movs	r1, #0
 800168e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2240      	movs	r2, #64	; 0x40
 8001694:	2100      	movs	r1, #0
 8001696:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e007      	b.n	80016ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2202      	movs	r2, #2
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d1cc      	bne.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c0:	e028      	b.n	8001714 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 f82f 	bl	800172c <I2C_IsAcknowledgeFailed>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d001      	beq.n	80016d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e026      	b.n	8001724 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d6:	f7ff fa97 	bl	8000c08 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d302      	bcc.n	80016ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d113      	bne.n	8001714 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f0:	2220      	movs	r2, #32
 80016f2:	431a      	orrs	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2241      	movs	r2, #65	; 0x41
 80016fc:	2120      	movs	r1, #32
 80016fe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2242      	movs	r2, #66	; 0x42
 8001704:	2100      	movs	r1, #0
 8001706:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e007      	b.n	8001724 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2220      	movs	r2, #32
 800171c:	4013      	ands	r3, r2
 800171e:	2b20      	cmp	r3, #32
 8001720:	d1cf      	bne.n	80016c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b004      	add	sp, #16
 800172a:	bd80      	pop	{r7, pc}

0800172c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2210      	movs	r2, #16
 8001740:	4013      	ands	r3, r2
 8001742:	2b10      	cmp	r3, #16
 8001744:	d164      	bne.n	8001810 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	049b      	lsls	r3, r3, #18
 8001750:	401a      	ands	r2, r3
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	049b      	lsls	r3, r3, #18
 8001756:	429a      	cmp	r2, r3
 8001758:	d02b      	beq.n	80017b2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	01c9      	lsls	r1, r1, #7
 8001768:	430a      	orrs	r2, r1
 800176a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800176c:	e021      	b.n	80017b2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	3301      	adds	r3, #1
 8001772:	d01e      	beq.n	80017b2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001774:	f7ff fa48 	bl	8000c08 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d302      	bcc.n	800178a <I2C_IsAcknowledgeFailed+0x5e>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d113      	bne.n	80017b2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	2220      	movs	r2, #32
 8001790:	431a      	orrs	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2241      	movs	r2, #65	; 0x41
 800179a:	2120      	movs	r1, #32
 800179c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2242      	movs	r2, #66	; 0x42
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2240      	movs	r2, #64	; 0x40
 80017aa:	2100      	movs	r1, #0
 80017ac:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e02f      	b.n	8001812 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2220      	movs	r2, #32
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d1d6      	bne.n	800176e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2210      	movs	r2, #16
 80017c6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2220      	movs	r2, #32
 80017ce:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7ff fece 	bl	8001574 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	490e      	ldr	r1, [pc, #56]	; (800181c <I2C_IsAcknowledgeFailed+0xf0>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	2204      	movs	r2, #4
 80017ee:	431a      	orrs	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2241      	movs	r2, #65	; 0x41
 80017f8:	2120      	movs	r1, #32
 80017fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2242      	movs	r2, #66	; 0x42
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2240      	movs	r2, #64	; 0x40
 8001808:	2100      	movs	r1, #0
 800180a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	fe00e800 	.word	0xfe00e800

08001820 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	0008      	movs	r0, r1
 800182a:	0011      	movs	r1, r2
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	240a      	movs	r4, #10
 8001830:	193b      	adds	r3, r7, r4
 8001832:	1c02      	adds	r2, r0, #0
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	2009      	movs	r0, #9
 8001838:	183b      	adds	r3, r7, r0
 800183a:	1c0a      	adds	r2, r1, #0
 800183c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	6a3a      	ldr	r2, [r7, #32]
 8001846:	0d51      	lsrs	r1, r2, #21
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	00d2      	lsls	r2, r2, #3
 800184c:	400a      	ands	r2, r1
 800184e:	490e      	ldr	r1, [pc, #56]	; (8001888 <I2C_TransferConfig+0x68>)
 8001850:	430a      	orrs	r2, r1
 8001852:	43d2      	mvns	r2, r2
 8001854:	401a      	ands	r2, r3
 8001856:	0011      	movs	r1, r2
 8001858:	193b      	adds	r3, r7, r4
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	059b      	lsls	r3, r3, #22
 800185e:	0d9a      	lsrs	r2, r3, #22
 8001860:	183b      	adds	r3, r7, r0
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	0418      	lsls	r0, r3, #16
 8001866:	23ff      	movs	r3, #255	; 0xff
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	4003      	ands	r3, r0
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	431a      	orrs	r2, r3
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	431a      	orrs	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b005      	add	sp, #20
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	03ff63ff 	.word	0x03ff63ff

0800188c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2241      	movs	r2, #65	; 0x41
 800189a:	5c9b      	ldrb	r3, [r3, r2]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b20      	cmp	r3, #32
 80018a0:	d138      	bne.n	8001914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2240      	movs	r2, #64	; 0x40
 80018a6:	5c9b      	ldrb	r3, [r3, r2]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e032      	b.n	8001916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2240      	movs	r2, #64	; 0x40
 80018b4:	2101      	movs	r1, #1
 80018b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2241      	movs	r2, #65	; 0x41
 80018bc:	2124      	movs	r1, #36	; 0x24
 80018be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	438a      	bics	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4911      	ldr	r1, [pc, #68]	; (8001920 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80018dc:	400a      	ands	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2101      	movs	r1, #1
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2241      	movs	r2, #65	; 0x41
 8001904:	2120      	movs	r1, #32
 8001906:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001914:	2302      	movs	r3, #2
  }
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	ffffefff 	.word	0xffffefff

08001924 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2241      	movs	r2, #65	; 0x41
 8001932:	5c9b      	ldrb	r3, [r3, r2]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b20      	cmp	r3, #32
 8001938:	d139      	bne.n	80019ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2240      	movs	r2, #64	; 0x40
 800193e:	5c9b      	ldrb	r3, [r3, r2]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001944:	2302      	movs	r3, #2
 8001946:	e033      	b.n	80019b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2240      	movs	r2, #64	; 0x40
 800194c:	2101      	movs	r1, #1
 800194e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2241      	movs	r2, #65	; 0x41
 8001954:	2124      	movs	r1, #36	; 0x24
 8001956:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2101      	movs	r1, #1
 8001964:	438a      	bics	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2241      	movs	r2, #65	; 0x41
 800199e:	2120      	movs	r1, #32
 80019a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	2100      	movs	r1, #0
 80019a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
  }
}
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	fffff0ff 	.word	0xfffff0ff

080019bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e301      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x1e>
 80019d8:	e08d      	b.n	8001af6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019da:	4bc3      	ldr	r3, [pc, #780]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	220c      	movs	r2, #12
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d00e      	beq.n	8001a04 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e6:	4bc0      	ldr	r3, [pc, #768]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	220c      	movs	r2, #12
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x64>
 80019f2:	4bbd      	ldr	r3, [pc, #756]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	025b      	lsls	r3, r3, #9
 80019fa:	401a      	ands	r2, r3
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	025b      	lsls	r3, r3, #9
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	4bb8      	ldr	r3, [pc, #736]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	029b      	lsls	r3, r3, #10
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_OscConfig+0x56>
 8001a10:	e070      	b.n	8001af4 <HAL_RCC_OscConfig+0x138>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d000      	beq.n	8001a1c <HAL_RCC_OscConfig+0x60>
 8001a1a:	e06b      	b.n	8001af4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e2d8      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_OscConfig+0x7c>
 8001a28:	4baf      	ldr	r3, [pc, #700]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4bae      	ldr	r3, [pc, #696]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	0249      	lsls	r1, r1, #9
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e02f      	b.n	8001a98 <HAL_RCC_OscConfig+0xdc>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_OscConfig+0x9e>
 8001a40:	4ba9      	ldr	r3, [pc, #676]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4ba8      	ldr	r3, [pc, #672]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	49a9      	ldr	r1, [pc, #676]	; (8001cec <HAL_RCC_OscConfig+0x330>)
 8001a48:	400a      	ands	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4ba6      	ldr	r3, [pc, #664]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4ba5      	ldr	r3, [pc, #660]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	49a7      	ldr	r1, [pc, #668]	; (8001cf0 <HAL_RCC_OscConfig+0x334>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e01e      	b.n	8001a98 <HAL_RCC_OscConfig+0xdc>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d10e      	bne.n	8001a80 <HAL_RCC_OscConfig+0xc4>
 8001a62:	4ba1      	ldr	r3, [pc, #644]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4ba0      	ldr	r3, [pc, #640]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	02c9      	lsls	r1, r1, #11
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	4b9d      	ldr	r3, [pc, #628]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b9c      	ldr	r3, [pc, #624]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	0249      	lsls	r1, r1, #9
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xdc>
 8001a80:	4b99      	ldr	r3, [pc, #612]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b98      	ldr	r3, [pc, #608]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	4999      	ldr	r1, [pc, #612]	; (8001cec <HAL_RCC_OscConfig+0x330>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4b96      	ldr	r3, [pc, #600]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b95      	ldr	r3, [pc, #596]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	4997      	ldr	r1, [pc, #604]	; (8001cf0 <HAL_RCC_OscConfig+0x334>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d014      	beq.n	8001aca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f8b2 	bl	8000c08 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f8ad 	bl	8000c08 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b64      	cmp	r3, #100	; 0x64
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e28a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abc:	4b8a      	ldr	r3, [pc, #552]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	029b      	lsls	r3, r3, #10
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0xee>
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff f89d 	bl	8000c08 <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f898 	bl	8000c08 <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e275      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	029b      	lsls	r3, r3, #10
 8001aee:	4013      	ands	r3, r2
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x118>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2202      	movs	r2, #2
 8001afc:	4013      	ands	r3, r2
 8001afe:	d100      	bne.n	8001b02 <HAL_RCC_OscConfig+0x146>
 8001b00:	e069      	b.n	8001bd6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b02:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	220c      	movs	r2, #12
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d00b      	beq.n	8001b24 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b0c:	4b76      	ldr	r3, [pc, #472]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	220c      	movs	r2, #12
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d11c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x196>
 8001b18:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	025b      	lsls	r3, r3, #9
 8001b20:	4013      	ands	r3, r2
 8001b22:	d116      	bne.n	8001b52 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e24b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	22f8      	movs	r2, #248	; 0xf8
 8001b40:	4393      	bics	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	00da      	lsls	r2, r3, #3
 8001b4a:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b50:	e041      	b.n	8001bd6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d024      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b60:	2101      	movs	r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff f84f 	bl	8000c08 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff f84a 	bl	8000c08 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e227      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f1      	beq.n	8001b70 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	22f8      	movs	r2, #248	; 0xf8
 8001b92:	4393      	bics	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00da      	lsls	r2, r3, #3
 8001b9c:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e018      	b.n	8001bd6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	438a      	bics	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f82a 	bl	8000c08 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff f825 	bl	8000c08 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e202      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bcc:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d1f1      	bne.n	8001bba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2208      	movs	r2, #8
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d036      	beq.n	8001c4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d019      	beq.n	8001c1c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bec:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f808 	bl	8000c08 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f803 	bl	8000c08 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1e0      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	2202      	movs	r2, #2
 8001c16:	4013      	ands	r3, r2
 8001c18:	d0f1      	beq.n	8001bfe <HAL_RCC_OscConfig+0x242>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	438a      	bics	r2, r1
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7fe ffee 	bl	8000c08 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c32:	f7fe ffe9 	bl	8000c08 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1c6      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d1f1      	bne.n	8001c32 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2204      	movs	r2, #4
 8001c54:	4013      	ands	r3, r2
 8001c56:	d100      	bne.n	8001c5a <HAL_RCC_OscConfig+0x29e>
 8001c58:	e0b4      	b.n	8001dc4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	201f      	movs	r0, #31
 8001c5c:	183b      	adds	r3, r7, r0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	055b      	lsls	r3, r3, #21
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d110      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	0549      	lsls	r1, r1, #21
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	61da      	str	r2, [r3, #28]
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	055b      	lsls	r3, r3, #21
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_RCC_OscConfig+0x338>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d11a      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9c:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	0049      	lsls	r1, r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7fe ffad 	bl	8000c08 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb4:	f7fe ffa8 	bl	8000c08 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e185      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x33c>
 8001cda:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	6a1a      	ldr	r2, [r3, #32]
 8001cde:	4b02      	ldr	r3, [pc, #8]	; (8001ce8 <HAL_RCC_OscConfig+0x32c>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	621a      	str	r2, [r3, #32]
 8001ce6:	e035      	b.n	8001d54 <HAL_RCC_OscConfig+0x398>
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	fffeffff 	.word	0xfffeffff
 8001cf0:	fffbffff 	.word	0xfffbffff
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x35e>
 8001d00:	4bb6      	ldr	r3, [pc, #728]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d02:	6a1a      	ldr	r2, [r3, #32]
 8001d04:	4bb5      	ldr	r3, [pc, #724]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	438a      	bics	r2, r1
 8001d0a:	621a      	str	r2, [r3, #32]
 8001d0c:	4bb3      	ldr	r3, [pc, #716]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	4bb2      	ldr	r3, [pc, #712]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d12:	2104      	movs	r1, #4
 8001d14:	438a      	bics	r2, r1
 8001d16:	621a      	str	r2, [r3, #32]
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x398>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x380>
 8001d22:	4bae      	ldr	r3, [pc, #696]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d24:	6a1a      	ldr	r2, [r3, #32]
 8001d26:	4bad      	ldr	r3, [pc, #692]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d28:	2104      	movs	r1, #4
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	621a      	str	r2, [r3, #32]
 8001d2e:	4bab      	ldr	r3, [pc, #684]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	4baa      	ldr	r3, [pc, #680]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d34:	2101      	movs	r1, #1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	621a      	str	r2, [r3, #32]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0x398>
 8001d3c:	4ba7      	ldr	r3, [pc, #668]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	4ba6      	ldr	r3, [pc, #664]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	438a      	bics	r2, r1
 8001d46:	621a      	str	r2, [r3, #32]
 8001d48:	4ba4      	ldr	r3, [pc, #656]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	4ba3      	ldr	r3, [pc, #652]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d4e:	2104      	movs	r1, #4
 8001d50:	438a      	bics	r2, r1
 8001d52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d014      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7fe ff54 	bl	8000c08 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7fe ff4f 	bl	8000c08 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4a9b      	ldr	r2, [pc, #620]	; (8001fe0 <HAL_RCC_OscConfig+0x624>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e12b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	4b98      	ldr	r3, [pc, #608]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	4013      	ands	r3, r2
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3aa>
 8001d84:	e013      	b.n	8001dae <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff3f 	bl	8000c08 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8e:	e009      	b.n	8001da4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7fe ff3a 	bl	8000c08 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	4a91      	ldr	r2, [pc, #580]	; (8001fe0 <HAL_RCC_OscConfig+0x624>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e116      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dae:	231f      	movs	r3, #31
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	4b87      	ldr	r3, [pc, #540]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001dbe:	4989      	ldr	r1, [pc, #548]	; (8001fe4 <HAL_RCC_OscConfig+0x628>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d063      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d12a      	bne.n	8001e2c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dd6:	4b81      	ldr	r3, [pc, #516]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dda:	4b80      	ldr	r3, [pc, #512]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001ddc:	2104      	movs	r1, #4
 8001dde:	430a      	orrs	r2, r1
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001de2:	4b7e      	ldr	r3, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de6:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe ff0b 	bl	8000c08 <HAL_GetTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001df8:	f7fe ff06 	bl	8000c08 <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0e3      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e0a:	4b74      	ldr	r3, [pc, #464]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	2202      	movs	r2, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	d0f1      	beq.n	8001df8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e14:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	22f8      	movs	r2, #248	; 0xf8
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	00da      	lsls	r2, r3, #3
 8001e24:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2a:	e034      	b.n	8001e96 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	3305      	adds	r3, #5
 8001e32:	d111      	bne.n	8001e58 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e34:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e38:	4b68      	ldr	r3, [pc, #416]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	22f8      	movs	r2, #248	; 0xf8
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	00da      	lsls	r2, r3, #3
 8001e50:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34
 8001e56:	e01e      	b.n	8001e96 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e58:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5c:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e5e:	2104      	movs	r1, #4
 8001e60:	430a      	orrs	r2, r1
 8001e62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e64:	4b5d      	ldr	r3, [pc, #372]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e68:	4b5c      	ldr	r3, [pc, #368]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7fe feca 	bl	8000c08 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e7a:	f7fe fec5 	bl	8000c08 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0a2      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e90:	2202      	movs	r2, #2
 8001e92:	4013      	ands	r3, r2
 8001e94:	d1f1      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d100      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4e4>
 8001e9e:	e097      	b.n	8001fd0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea0:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d100      	bne.n	8001eae <HAL_RCC_OscConfig+0x4f2>
 8001eac:	e06b      	b.n	8001f86 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d14c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001ebc:	494a      	ldr	r1, [pc, #296]	; (8001fe8 <HAL_RCC_OscConfig+0x62c>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fea1 	bl	8000c08 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7fe fe9c 	bl	8000c08 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e079      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	049b      	lsls	r3, r3, #18
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	220f      	movs	r2, #15
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef8:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001efe:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <HAL_RCC_OscConfig+0x630>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	0019      	movs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	431a      	orrs	r2, r3
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0449      	lsls	r1, r1, #17
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fe6f 	bl	8000c08 <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe fe6a 	bl	8000c08 <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e047      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	049b      	lsls	r3, r3, #18
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x574>
 8001f4e:	e03f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f56:	4924      	ldr	r1, [pc, #144]	; (8001fe8 <HAL_RCC_OscConfig+0x62c>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fe54 	bl	8000c08 <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f66:	f7fe fe4f 	bl	8000c08 <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e02c      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	049b      	lsls	r3, r3, #18
 8001f80:	4013      	ands	r3, r2
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x5aa>
 8001f84:	e024      	b.n	8001fd0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e01f      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_OscConfig+0x620>)
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d10e      	bne.n	8001fcc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	23f0      	movs	r3, #240	; 0xf0
 8001fc0:	039b      	lsls	r3, r3, #14
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b008      	add	sp, #32
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	efffffff 	.word	0xefffffff
 8001fe8:	feffffff 	.word	0xfeffffff
 8001fec:	ffc2ffff 	.word	0xffc2ffff

08001ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b3      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d911      	bls.n	8002036 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b58      	ldr	r3, [pc, #352]	; (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4b55      	ldr	r3, [pc, #340]	; (8002174 <HAL_RCC_ClockConfig+0x184>)
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e09a      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d015      	beq.n	800206c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2204      	movs	r2, #4
 8002046:	4013      	ands	r3, r2
 8002048:	d006      	beq.n	8002058 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800204a:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002050:	21e0      	movs	r1, #224	; 0xe0
 8002052:	00c9      	lsls	r1, r1, #3
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	22f0      	movs	r2, #240	; 0xf0
 800205e:	4393      	bics	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	4b44      	ldr	r3, [pc, #272]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	029b      	lsls	r3, r3, #10
 8002086:	4013      	ands	r3, r2
 8002088:	d114      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06e      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	049b      	lsls	r3, r3, #18
 800209e:	4013      	ands	r3, r2
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e062      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e05b      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b4:	4b30      	ldr	r3, [pc, #192]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2203      	movs	r2, #3
 80020ba:	4393      	bics	r3, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7fe fd9e 	bl	8000c08 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d0:	e009      	b.n	80020e6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7fe fd99 	bl	8000c08 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	4a27      	ldr	r2, [pc, #156]	; (800217c <HAL_RCC_ClockConfig+0x18c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e042      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	220c      	movs	r2, #12
 80020ec:	401a      	ands	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1ec      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_ClockConfig+0x184>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d211      	bcs.n	800212a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	4393      	bics	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_RCC_ClockConfig+0x184>)
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_RCC_ClockConfig+0x184>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e020      	b.n	800216c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2204      	movs	r2, #4
 8002130:	4013      	ands	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_RCC_ClockConfig+0x190>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002148:	f000 f820 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214c:	0001      	movs	r1, r0
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x188>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	220f      	movs	r2, #15
 8002156:	4013      	ands	r3, r2
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_RCC_ClockConfig+0x194>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	000a      	movs	r2, r1
 800215e:	40da      	lsrs	r2, r3
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x198>)
 8002162:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002164:	2000      	movs	r0, #0
 8002166:	f7fe fd09 	bl	8000b7c <HAL_InitTick>
  
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40022000 	.word	0x40022000
 8002178:	40021000 	.word	0x40021000
 800217c:	00001388 	.word	0x00001388
 8002180:	fffff8ff 	.word	0xfffff8ff
 8002184:	08003390 	.word	0x08003390
 8002188:	20000000 	.word	0x20000000

0800218c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b08f      	sub	sp, #60	; 0x3c
 8002190:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002192:	2314      	movs	r3, #20
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002198:	ca13      	ldmia	r2!, {r0, r1, r4}
 800219a:	c313      	stmia	r3!, {r0, r1, r4}
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	4a29      	ldr	r2, [pc, #164]	; (8002248 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80021a6:	c313      	stmia	r3!, {r0, r1, r4}
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	220c      	movs	r2, #12
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d002      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x4a>
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d003      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x50>
 80021d4:	e02d      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021da:	e02d      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	0c9b      	lsrs	r3, r3, #18
 80021e0:	220f      	movs	r2, #15
 80021e2:	4013      	ands	r3, r2
 80021e4:	2214      	movs	r2, #20
 80021e6:	18ba      	adds	r2, r7, r2
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	220f      	movs	r2, #15
 80021f2:	4013      	ands	r3, r2
 80021f4:	1d3a      	adds	r2, r7, #4
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	025b      	lsls	r3, r3, #9
 8002200:	4013      	ands	r3, r2
 8002202:	d009      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002206:	4812      	ldr	r0, [pc, #72]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002208:	f7fd ff86 	bl	8000118 <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	001a      	movs	r2, r3
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	4353      	muls	r3, r2
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
 8002216:	e009      	b.n	800222c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221a:	000a      	movs	r2, r1
 800221c:	0152      	lsls	r2, r2, #5
 800221e:	1a52      	subs	r2, r2, r1
 8002220:	0193      	lsls	r3, r2, #6
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	185b      	adds	r3, r3, r1
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002230:	e002      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002236:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b00f      	add	sp, #60	; 0x3c
 8002240:	bd90      	pop	{r4, r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	08003370 	.word	0x08003370
 8002248:	08003380 	.word	0x08003380
 800224c:	40021000 	.word	0x40021000
 8002250:	007a1200 	.word	0x007a1200

08002254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <HAL_RCC_GetHCLKFreq+0x10>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20000000 	.word	0x20000000

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800226c:	f7ff fff2 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002270:	0001      	movs	r1, r0
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	2207      	movs	r2, #7
 800227a:	4013      	ands	r3, r2
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	40d9      	lsrs	r1, r3
 8002282:	000b      	movs	r3, r1
}    
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	40021000 	.word	0x40021000
 8002290:	080033a0 	.word	0x080033a0

08002294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	025b      	lsls	r3, r3, #9
 80022ac:	4013      	ands	r3, r2
 80022ae:	d100      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80022b0:	e08e      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2017      	movs	r0, #23
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b5f      	ldr	r3, [pc, #380]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	055b      	lsls	r3, r3, #21
 80022c2:	4013      	ands	r3, r2
 80022c4:	d110      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	430a      	orrs	r2, r1
 80022d2:	61da      	str	r2, [r3, #28]
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b54      	ldr	r3, [pc, #336]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d11a      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f4:	4b51      	ldr	r3, [pc, #324]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	0049      	lsls	r1, r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe fc81 	bl	8000c08 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	e008      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230c:	f7fe fc7c 	bl	8000c08 <HAL_GetTick>
 8002310:	0002      	movs	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e087      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d0f0      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	23c0      	movs	r3, #192	; 0xc0
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4013      	ands	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d034      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4013      	ands	r3, r2
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d02c      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800234c:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4a3b      	ldr	r2, [pc, #236]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002352:	4013      	ands	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002356:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002358:	6a1a      	ldr	r2, [r3, #32]
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0249      	lsls	r1, r1, #9
 8002360:	430a      	orrs	r2, r1
 8002362:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	4b33      	ldr	r3, [pc, #204]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800236a:	4936      	ldr	r1, [pc, #216]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800236c:	400a      	ands	r2, r1
 800236e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	4013      	ands	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7fe fc43 	bl	8000c08 <HAL_GetTick>
 8002382:	0003      	movs	r3, r0
 8002384:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002386:	e009      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe fc3e 	bl	8000c08 <HAL_GetTick>
 800238c:	0002      	movs	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e048      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ba:	2317      	movs	r3, #23
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023ca:	4920      	ldr	r1, [pc, #128]	; (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	2203      	movs	r2, #3
 80023e0:	4393      	bics	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2220      	movs	r2, #32
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	2210      	movs	r2, #16
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002408:	430a      	orrs	r2, r1
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4013      	ands	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	4393      	bics	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002428:	430a      	orrs	r2, r1
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b006      	add	sp, #24
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	fffffcff 	.word	0xfffffcff
 8002444:	fffeffff 	.word	0xfffeffff
 8002448:	00001388 	.word	0x00001388
 800244c:	efffffff 	.word	0xefffffff

08002450 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e081      	b.n	8002566 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7f5b      	ldrb	r3, [r3, #29]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f7fe fac1 	bl	80009fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	22ca      	movs	r2, #202	; 0xca
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2253      	movs	r2, #83	; 0x53
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 faa9 	bl	80029ea <RTC_EnterInitMode>
 8002498:	1e03      	subs	r3, r0, #0
 800249a:	d008      	beq.n	80024ae <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	22ff      	movs	r2, #255	; 0xff
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2204      	movs	r2, #4
 80024a8:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e05b      	b.n	8002566 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	492d      	ldr	r1, [pc, #180]	; (8002570 <HAL_RTC_Init+0x120>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68d2      	ldr	r2, [r2, #12]
 80024e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6919      	ldr	r1, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	438a      	bics	r2, r1
 8002508:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2220      	movs	r2, #32
 8002512:	4013      	ands	r3, r2
 8002514:	d10e      	bne.n	8002534 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 fa3d 	bl	8002998 <HAL_RTC_WaitForSynchro>
 800251e:	1e03      	subs	r3, r0, #0
 8002520:	d008      	beq.n	8002534 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e018      	b.n	8002566 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	490d      	ldr	r1, [pc, #52]	; (8002574 <HAL_RTC_Init+0x124>)
 8002540:	400a      	ands	r2, r1
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	22ff      	movs	r2, #255	; 0xff
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
  }
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	ff8fffbf 	.word	0xff8fffbf
 8002574:	fffbffff 	.word	0xfffbffff

08002578 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	7f1b      	ldrb	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_RTC_SetTime+0x1c>
 8002590:	2302      	movs	r3, #2
 8002592:	e0a5      	b.n	80026e0 <HAL_RTC_SetTime+0x168>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2202      	movs	r2, #2
 800259e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d125      	bne.n	80025f2 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2240      	movs	r2, #64	; 0x40
 80025ae:	4013      	ands	r3, r2
 80025b0:	d102      	bne.n	80025b8 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2200      	movs	r2, #0
 80025b6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fa40 	bl	8002a42 <RTC_ByteToBcd2>
 80025c2:	0003      	movs	r3, r0
 80025c4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	785b      	ldrb	r3, [r3, #1]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 fa39 	bl	8002a42 <RTC_ByteToBcd2>
 80025d0:	0003      	movs	r3, r0
 80025d2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80025d4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	789b      	ldrb	r3, [r3, #2]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fa31 	bl	8002a42 <RTC_ByteToBcd2>
 80025e0:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80025e2:	0022      	movs	r2, r4
 80025e4:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	78db      	ldrb	r3, [r3, #3]
 80025ea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e017      	b.n	8002622 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2240      	movs	r2, #64	; 0x40
 80025fa:	4013      	ands	r3, r2
 80025fc:	d102      	bne.n	8002604 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002610:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002616:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	78db      	ldrb	r3, [r3, #3]
 800261c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	22ca      	movs	r2, #202	; 0xca
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2253      	movs	r2, #83	; 0x53
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	0018      	movs	r0, r3
 8002636:	f000 f9d8 	bl	80029ea <RTC_EnterInitMode>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d00b      	beq.n	8002656 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	22ff      	movs	r2, #255	; 0xff
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2204      	movs	r2, #4
 800264a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e044      	b.n	80026e0 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4922      	ldr	r1, [pc, #136]	; (80026e8 <HAL_RTC_SetTime+0x170>)
 800265e:	400a      	ands	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	491f      	ldr	r1, [pc, #124]	; (80026ec <HAL_RTC_SetTime+0x174>)
 800266e:	400a      	ands	r2, r1
 8002670:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	438a      	bics	r2, r1
 8002698:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2220      	movs	r2, #32
 80026a2:	4013      	ands	r3, r2
 80026a4:	d111      	bne.n	80026ca <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 f975 	bl	8002998 <HAL_RTC_WaitForSynchro>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	22ff      	movs	r2, #255	; 0xff
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2204      	movs	r2, #4
 80026be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00a      	b.n	80026e0 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	22ff      	movs	r2, #255	; 0xff
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80026de:	2300      	movs	r3, #0
  }
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b007      	add	sp, #28
 80026e6:	bd90      	pop	{r4, r7, pc}
 80026e8:	007f7f7f 	.word	0x007f7f7f
 80026ec:	fffbffff 	.word	0xfffbffff

080026f0 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	045b      	lsls	r3, r3, #17
 8002712:	0c5a      	lsrs	r2, r3, #17
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_RTC_GetTime+0xb8>)
 8002720:	4013      	ands	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	b2db      	uxtb	r3, r3
 800272a:	223f      	movs	r2, #63	; 0x3f
 800272c:	4013      	ands	r3, r2
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	b2db      	uxtb	r3, r3
 800273a:	227f      	movs	r2, #127	; 0x7f
 800273c:	4013      	ands	r3, r2
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	227f      	movs	r2, #127	; 0x7f
 800274a:	4013      	ands	r3, r2
 800274c:	b2da      	uxtb	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	4013      	ands	r3, r2
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d11a      	bne.n	800279e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	0018      	movs	r0, r3
 800276e:	f000 f989 	bl	8002a84 <RTC_Bcd2ToByte>
 8002772:	0003      	movs	r3, r0
 8002774:	001a      	movs	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 f980 	bl	8002a84 <RTC_Bcd2ToByte>
 8002784:	0003      	movs	r3, r0
 8002786:	001a      	movs	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	789b      	ldrb	r3, [r3, #2]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f977 	bl	8002a84 <RTC_Bcd2ToByte>
 8002796:	0003      	movs	r3, r0
 8002798:	001a      	movs	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b006      	add	sp, #24
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	007f7f7f 	.word	0x007f7f7f

080027ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027ac:	b590      	push	{r4, r7, lr}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	7f1b      	ldrb	r3, [r3, #28]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_RTC_SetDate+0x1c>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e091      	b.n	80028ec <HAL_RTC_SetDate+0x140>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2202      	movs	r2, #2
 80027d2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10e      	bne.n	80027f8 <HAL_RTC_SetDate+0x4c>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	001a      	movs	r2, r3
 80027e0:	2310      	movs	r3, #16
 80027e2:	4013      	ands	r3, r2
 80027e4:	d008      	beq.n	80027f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	2210      	movs	r2, #16
 80027ec:	4393      	bics	r3, r2
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	330a      	adds	r3, #10
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d11c      	bne.n	8002838 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	0018      	movs	r0, r3
 8002804:	f000 f91d 	bl	8002a42 <RTC_ByteToBcd2>
 8002808:	0003      	movs	r3, r0
 800280a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f916 	bl	8002a42 <RTC_ByteToBcd2>
 8002816:	0003      	movs	r3, r0
 8002818:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800281a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	789b      	ldrb	r3, [r3, #2]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f90e 	bl	8002a42 <RTC_ByteToBcd2>
 8002826:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002828:	0022      	movs	r2, r4
 800282a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e00e      	b.n	8002856 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	78db      	ldrb	r3, [r3, #3]
 800283c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002844:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800284a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	22ca      	movs	r2, #202	; 0xca
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2253      	movs	r2, #83	; 0x53
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f8be 	bl	80029ea <RTC_EnterInitMode>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d00b      	beq.n	800288a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	22ff      	movs	r2, #255	; 0xff
 8002878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2204      	movs	r2, #4
 800287e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e030      	b.n	80028ec <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4918      	ldr	r1, [pc, #96]	; (80028f4 <HAL_RTC_SetDate+0x148>)
 8002892:	400a      	ands	r2, r1
 8002894:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	438a      	bics	r2, r1
 80028a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2220      	movs	r2, #32
 80028ae:	4013      	ands	r3, r2
 80028b0:	d111      	bne.n	80028d6 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 f86f 	bl	8002998 <HAL_RTC_WaitForSynchro>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	22ff      	movs	r2, #255	; 0xff
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2204      	movs	r2, #4
 80028ca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00a      	b.n	80028ec <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	22ff      	movs	r2, #255	; 0xff
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
  }
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b007      	add	sp, #28
 80028f2:	bd90      	pop	{r4, r7, pc}
 80028f4:	00ffff3f 	.word	0x00ffff3f

080028f8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a21      	ldr	r2, [pc, #132]	; (8002994 <HAL_RTC_GetDate+0x9c>)
 8002910:	4013      	ands	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	b2db      	uxtb	r3, r3
 8002924:	221f      	movs	r2, #31
 8002926:	4013      	ands	r3, r2
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	223f      	movs	r2, #63	; 0x3f
 8002934:	4013      	ands	r3, r2
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2207      	movs	r2, #7
 8002944:	4013      	ands	r3, r2
 8002946:	b2da      	uxtb	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11a      	bne.n	8002988 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	78db      	ldrb	r3, [r3, #3]
 8002956:	0018      	movs	r0, r3
 8002958:	f000 f894 	bl	8002a84 <RTC_Bcd2ToByte>
 800295c:	0003      	movs	r3, r0
 800295e:	001a      	movs	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	0018      	movs	r0, r3
 800296a:	f000 f88b 	bl	8002a84 <RTC_Bcd2ToByte>
 800296e:	0003      	movs	r3, r0
 8002970:	001a      	movs	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	789b      	ldrb	r3, [r3, #2]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 f882 	bl	8002a84 <RTC_Bcd2ToByte>
 8002980:	0003      	movs	r3, r0
 8002982:	001a      	movs	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b006      	add	sp, #24
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	00ffff3f 	.word	0x00ffff3f

08002998 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	21a0      	movs	r1, #160	; 0xa0
 80029b0:	438a      	bics	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80029b4:	f7fe f928 	bl	8000c08 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029be:	f7fe f923 	bl	8000c08 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad2      	subs	r2, r2, r3
 80029c8:	23fa      	movs	r3, #250	; 0xfa
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d901      	bls.n	80029d4 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e006      	b.n	80029e2 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	4013      	ands	r3, r2
 80029de:	d0ee      	beq.n	80029be <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}

080029ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	4013      	ands	r3, r2
 8002a00:	d11a      	bne.n	8002a38 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4252      	negs	r2, r2
 8002a0a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a0c:	f7fe f8fc 	bl	8000c08 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a14:	e00a      	b.n	8002a2c <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a16:	f7fe f8f7 	bl	8000c08 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1ad2      	subs	r2, r2, r3
 8002a20:	23fa      	movs	r3, #250	; 0xfa
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d901      	bls.n	8002a2c <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e006      	b.n	8002a3a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	4013      	ands	r3, r2
 8002a36:	d0ee      	beq.n	8002a16 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	0002      	movs	r2, r0
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002a52:	e007      	b.n	8002a64 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3301      	adds	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	1dfa      	adds	r2, r7, #7
 8002a5e:	7812      	ldrb	r2, [r2, #0]
 8002a60:	3a0a      	subs	r2, #10
 8002a62:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8002a64:	1dfb      	adds	r3, r7, #7
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b09      	cmp	r3, #9
 8002a6a:	d8f3      	bhi.n	8002a54 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	1dfb      	adds	r3, r7, #7
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b2db      	uxtb	r3, r3
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b004      	add	sp, #16
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	1dfb      	adds	r3, r7, #7
 8002a8e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	0013      	movs	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	220f      	movs	r2, #15
 8002aae:	4013      	ands	r3, r2
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	b2db      	uxtb	r3, r3
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b004      	add	sp, #16
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3350      	adds	r3, #80	; 0x50
 8002ad8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	18d3      	adds	r3, r2, r3
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	601a      	str	r2, [r3, #0]
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b006      	add	sp, #24
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e044      	b.n	8002b90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2274      	movs	r2, #116	; 0x74
 8002b12:	2100      	movs	r1, #0
 8002b14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fd ff87 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2224      	movs	r2, #36	; 0x24
 8002b22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	438a      	bics	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f8da 	bl	8002cf0 <UART_SetConfig>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e024      	b.n	8002b90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 fa0d 	bl	8002f70 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	490d      	ldr	r1, [pc, #52]	; (8002b98 <HAL_UART_Init+0xa4>)
 8002b62:	400a      	ands	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	212a      	movs	r1, #42	; 0x2a
 8002b72:	438a      	bics	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 faa5 	bl	80030d8 <UART_CheckIdleState>
 8002b8e:	0003      	movs	r3, r0
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b002      	add	sp, #8
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	ffffb7ff 	.word	0xffffb7ff

08002b9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	1dbb      	adds	r3, r7, #6
 8002baa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d000      	beq.n	8002bb6 <HAL_UART_Transmit+0x1a>
 8002bb4:	e096      	b.n	8002ce4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_UART_Transmit+0x28>
 8002bbc:	1dbb      	adds	r3, r7, #6
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e08e      	b.n	8002ce6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	015b      	lsls	r3, r3, #5
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d109      	bne.n	8002be8 <HAL_UART_Transmit+0x4c>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d105      	bne.n	8002be8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	d001      	beq.n	8002be8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e07e      	b.n	8002ce6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2274      	movs	r2, #116	; 0x74
 8002bec:	5c9b      	ldrb	r3, [r3, r2]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Transmit+0x5a>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e077      	b.n	8002ce6 <HAL_UART_Transmit+0x14a>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2274      	movs	r2, #116	; 0x74
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	2100      	movs	r1, #0
 8002c04:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2221      	movs	r2, #33	; 0x21
 8002c0a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c0c:	f7fd fffc 	bl	8000c08 <HAL_GetTick>
 8002c10:	0003      	movs	r3, r0
 8002c12:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1dba      	adds	r2, r7, #6
 8002c18:	2150      	movs	r1, #80	; 0x50
 8002c1a:	8812      	ldrh	r2, [r2, #0]
 8002c1c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1dba      	adds	r2, r7, #6
 8002c22:	2152      	movs	r1, #82	; 0x52
 8002c24:	8812      	ldrh	r2, [r2, #0]
 8002c26:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	015b      	lsls	r3, r3, #5
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d108      	bne.n	8002c46 <HAL_UART_Transmit+0xaa>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	e003      	b.n	8002c4e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2274      	movs	r2, #116	; 0x74
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002c56:	e02d      	b.n	8002cb4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	0013      	movs	r3, r2
 8002c62:	2200      	movs	r2, #0
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	f000 fa7f 	bl	8003168 <UART_WaitOnFlagUntilTimeout>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e039      	b.n	8002ce6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10b      	bne.n	8002c90 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	05d2      	lsls	r2, r2, #23
 8002c82:	0dd2      	lsrs	r2, r2, #23
 8002c84:	b292      	uxth	r2, r2
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	e008      	b.n	8002ca2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	781a      	ldrb	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2252      	movs	r2, #82	; 0x52
 8002ca6:	5a9b      	ldrh	r3, [r3, r2]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b299      	uxth	r1, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2252      	movs	r2, #82	; 0x52
 8002cb2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2252      	movs	r2, #82	; 0x52
 8002cb8:	5a9b      	ldrh	r3, [r3, r2]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1cb      	bne.n	8002c58 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	0013      	movs	r3, r2
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	f000 fa4b 	bl	8003168 <UART_WaitOnFlagUntilTimeout>
 8002cd2:	1e03      	subs	r3, r0, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e005      	b.n	8002ce6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e000      	b.n	8002ce6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002ce4:	2302      	movs	r3, #2
  }
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b008      	add	sp, #32
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cf8:	231e      	movs	r3, #30
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a8d      	ldr	r2, [pc, #564]	; (8002f54 <UART_SetConfig+0x264>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4a88      	ldr	r2, [pc, #544]	; (8002f58 <UART_SetConfig+0x268>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	0019      	movs	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a7f      	ldr	r2, [pc, #508]	; (8002f5c <UART_SetConfig+0x26c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a7b      	ldr	r2, [pc, #492]	; (8002f60 <UART_SetConfig+0x270>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d127      	bne.n	8002dc6 <UART_SetConfig+0xd6>
 8002d76:	4b7b      	ldr	r3, [pc, #492]	; (8002f64 <UART_SetConfig+0x274>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d00d      	beq.n	8002d9e <UART_SetConfig+0xae>
 8002d82:	d81b      	bhi.n	8002dbc <UART_SetConfig+0xcc>
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d014      	beq.n	8002db2 <UART_SetConfig+0xc2>
 8002d88:	d818      	bhi.n	8002dbc <UART_SetConfig+0xcc>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <UART_SetConfig+0xa4>
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00a      	beq.n	8002da8 <UART_SetConfig+0xb8>
 8002d92:	e013      	b.n	8002dbc <UART_SetConfig+0xcc>
 8002d94:	231f      	movs	r3, #31
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e021      	b.n	8002de2 <UART_SetConfig+0xf2>
 8002d9e:	231f      	movs	r3, #31
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2202      	movs	r2, #2
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e01c      	b.n	8002de2 <UART_SetConfig+0xf2>
 8002da8:	231f      	movs	r3, #31
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2204      	movs	r2, #4
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e017      	b.n	8002de2 <UART_SetConfig+0xf2>
 8002db2:	231f      	movs	r3, #31
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2208      	movs	r2, #8
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e012      	b.n	8002de2 <UART_SetConfig+0xf2>
 8002dbc:	231f      	movs	r3, #31
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e00d      	b.n	8002de2 <UART_SetConfig+0xf2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a67      	ldr	r2, [pc, #412]	; (8002f68 <UART_SetConfig+0x278>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d104      	bne.n	8002dda <UART_SetConfig+0xea>
 8002dd0:	231f      	movs	r3, #31
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e003      	b.n	8002de2 <UART_SetConfig+0xf2>
 8002dda:	231f      	movs	r3, #31
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2210      	movs	r2, #16
 8002de0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d15d      	bne.n	8002eaa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002dee:	231f      	movs	r3, #31
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d015      	beq.n	8002e24 <UART_SetConfig+0x134>
 8002df8:	dc18      	bgt.n	8002e2c <UART_SetConfig+0x13c>
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d00d      	beq.n	8002e1a <UART_SetConfig+0x12a>
 8002dfe:	dc15      	bgt.n	8002e2c <UART_SetConfig+0x13c>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <UART_SetConfig+0x11a>
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d005      	beq.n	8002e14 <UART_SetConfig+0x124>
 8002e08:	e010      	b.n	8002e2c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e0a:	f7ff fa2d 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	61bb      	str	r3, [r7, #24]
        break;
 8002e12:	e012      	b.n	8002e3a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e14:	4b55      	ldr	r3, [pc, #340]	; (8002f6c <UART_SetConfig+0x27c>)
 8002e16:	61bb      	str	r3, [r7, #24]
        break;
 8002e18:	e00f      	b.n	8002e3a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e1a:	f7ff f9b7 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	61bb      	str	r3, [r7, #24]
        break;
 8002e22:	e00a      	b.n	8002e3a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	61bb      	str	r3, [r7, #24]
        break;
 8002e2a:	e006      	b.n	8002e3a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e30:	231e      	movs	r3, #30
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
        break;
 8002e38:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d100      	bne.n	8002e42 <UART_SetConfig+0x152>
 8002e40:	e07b      	b.n	8002f3a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	005a      	lsls	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	18d2      	adds	r2, r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	0019      	movs	r1, r3
 8002e54:	0010      	movs	r0, r2
 8002e56:	f7fd f95f 	bl	8000118 <__udivsi3>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b0f      	cmp	r3, #15
 8002e64:	d91c      	bls.n	8002ea0 <UART_SetConfig+0x1b0>
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	025b      	lsls	r3, r3, #9
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d217      	bcs.n	8002ea0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	200e      	movs	r0, #14
 8002e76:	183b      	adds	r3, r7, r0
 8002e78:	210f      	movs	r1, #15
 8002e7a:	438a      	bics	r2, r1
 8002e7c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2207      	movs	r2, #7
 8002e86:	4013      	ands	r3, r2
 8002e88:	b299      	uxth	r1, r3
 8002e8a:	183b      	adds	r3, r7, r0
 8002e8c:	183a      	adds	r2, r7, r0
 8002e8e:	8812      	ldrh	r2, [r2, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	183a      	adds	r2, r7, r0
 8002e9a:	8812      	ldrh	r2, [r2, #0]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	e04c      	b.n	8002f3a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002ea0:	231e      	movs	r3, #30
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e047      	b.n	8002f3a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eaa:	231f      	movs	r3, #31
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d015      	beq.n	8002ee0 <UART_SetConfig+0x1f0>
 8002eb4:	dc18      	bgt.n	8002ee8 <UART_SetConfig+0x1f8>
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d00d      	beq.n	8002ed6 <UART_SetConfig+0x1e6>
 8002eba:	dc15      	bgt.n	8002ee8 <UART_SetConfig+0x1f8>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <UART_SetConfig+0x1d6>
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d005      	beq.n	8002ed0 <UART_SetConfig+0x1e0>
 8002ec4:	e010      	b.n	8002ee8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec6:	f7ff f9cf 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	61bb      	str	r3, [r7, #24]
        break;
 8002ece:	e012      	b.n	8002ef6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed0:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <UART_SetConfig+0x27c>)
 8002ed2:	61bb      	str	r3, [r7, #24]
        break;
 8002ed4:	e00f      	b.n	8002ef6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed6:	f7ff f959 	bl	800218c <HAL_RCC_GetSysClockFreq>
 8002eda:	0003      	movs	r3, r0
 8002edc:	61bb      	str	r3, [r7, #24]
        break;
 8002ede:	e00a      	b.n	8002ef6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	61bb      	str	r3, [r7, #24]
        break;
 8002ee6:	e006      	b.n	8002ef6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eec:	231e      	movs	r3, #30
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
        break;
 8002ef4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01e      	beq.n	8002f3a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	085a      	lsrs	r2, r3, #1
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	18d2      	adds	r2, r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	0010      	movs	r0, r2
 8002f0e:	f7fd f903 	bl	8000118 <__udivsi3>
 8002f12:	0003      	movs	r3, r0
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	d909      	bls.n	8002f32 <UART_SetConfig+0x242>
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	025b      	lsls	r3, r3, #9
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d204      	bcs.n	8002f32 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	60da      	str	r2, [r3, #12]
 8002f30:	e003      	b.n	8002f3a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002f32:	231e      	movs	r3, #30
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f46:	231e      	movs	r3, #30
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b008      	add	sp, #32
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	ffff69f3 	.word	0xffff69f3
 8002f58:	ffffcfff 	.word	0xffffcfff
 8002f5c:	fffff4ff 	.word	0xfffff4ff
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40004400 	.word	0x40004400
 8002f6c:	007a1200 	.word	0x007a1200

08002f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d00b      	beq.n	8002f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a4a      	ldr	r2, [pc, #296]	; (80030b4 <UART_AdvFeatureConfig+0x144>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a43      	ldr	r2, [pc, #268]	; (80030b8 <UART_AdvFeatureConfig+0x148>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a3b      	ldr	r2, [pc, #236]	; (80030bc <UART_AdvFeatureConfig+0x14c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a34      	ldr	r2, [pc, #208]	; (80030c0 <UART_AdvFeatureConfig+0x150>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2210      	movs	r2, #16
 8003006:	4013      	ands	r3, r2
 8003008:	d00b      	beq.n	8003022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <UART_AdvFeatureConfig+0x154>)
 8003012:	4013      	ands	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2220      	movs	r2, #32
 8003028:	4013      	ands	r3, r2
 800302a:	d00b      	beq.n	8003044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <UART_AdvFeatureConfig+0x158>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	4013      	ands	r3, r2
 800304c:	d01d      	beq.n	800308a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <UART_AdvFeatureConfig+0x15c>)
 8003056:	4013      	ands	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	035b      	lsls	r3, r3, #13
 800306e:	429a      	cmp	r2, r3
 8003070:	d10b      	bne.n	800308a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <UART_AdvFeatureConfig+0x160>)
 800307a:	4013      	ands	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	4013      	ands	r3, r2
 8003092:	d00b      	beq.n	80030ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <UART_AdvFeatureConfig+0x164>)
 800309c:	4013      	ands	r3, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	605a      	str	r2, [r3, #4]
  }
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	fffdffff 	.word	0xfffdffff
 80030b8:	fffeffff 	.word	0xfffeffff
 80030bc:	fffbffff 	.word	0xfffbffff
 80030c0:	ffff7fff 	.word	0xffff7fff
 80030c4:	ffffefff 	.word	0xffffefff
 80030c8:	ffffdfff 	.word	0xffffdfff
 80030cc:	ffefffff 	.word	0xffefffff
 80030d0:	ff9fffff 	.word	0xff9fffff
 80030d4:	fff7ffff 	.word	0xfff7ffff

080030d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	2100      	movs	r1, #0
 80030e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030e8:	f7fd fd8e 	bl	8000c08 <HAL_GetTick>
 80030ec:	0003      	movs	r3, r0
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2208      	movs	r2, #8
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d10c      	bne.n	8003118 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	0391      	lsls	r1, r2, #14
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <UART_CheckIdleState+0x8c>)
 8003108:	9200      	str	r2, [sp, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	f000 f82c 	bl	8003168 <UART_WaitOnFlagUntilTimeout>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e021      	b.n	800315c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2204      	movs	r2, #4
 8003120:	4013      	ands	r3, r2
 8003122:	2b04      	cmp	r3, #4
 8003124:	d10c      	bne.n	8003140 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	03d1      	lsls	r1, r2, #15
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <UART_CheckIdleState+0x8c>)
 8003130:	9200      	str	r2, [sp, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	f000 f818 	bl	8003168 <UART_WaitOnFlagUntilTimeout>
 8003138:	1e03      	subs	r3, r0, #0
 800313a:	d001      	beq.n	8003140 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e00d      	b.n	800315c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2274      	movs	r2, #116	; 0x74
 8003156:	2100      	movs	r1, #0
 8003158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b004      	add	sp, #16
 8003162:	bd80      	pop	{r7, pc}
 8003164:	01ffffff 	.word	0x01ffffff

08003168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b094      	sub	sp, #80	; 0x50
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	1dfb      	adds	r3, r7, #7
 8003176:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003178:	e0a3      	b.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800317c:	3301      	adds	r3, #1
 800317e:	d100      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003180:	e09f      	b.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003182:	f7fd fd41 	bl	8000c08 <HAL_GetTick>
 8003186:	0002      	movs	r2, r0
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800318e:	429a      	cmp	r2, r3
 8003190:	d302      	bcc.n	8003198 <UART_WaitOnFlagUntilTimeout+0x30>
 8003192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003194:	2b00      	cmp	r3, #0
 8003196:	d13d      	bne.n	8003214 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003198:	f3ef 8310 	mrs	r3, PRIMASK
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a0:	647b      	str	r3, [r7, #68]	; 0x44
 80031a2:	2301      	movs	r3, #1
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	f383 8810 	msr	PRIMASK, r3
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	494c      	ldr	r1, [pc, #304]	; (80032ec <UART_WaitOnFlagUntilTimeout+0x184>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	f383 8810 	msr	PRIMASK, r3
}
 80031c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ca:	f3ef 8310 	mrs	r3, PRIMASK
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40
 80031d4:	2301      	movs	r3, #1
 80031d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	f383 8810 	msr	PRIMASK, r3
}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2101      	movs	r1, #1
 80031ec:	438a      	bics	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	f383 8810 	msr	PRIMASK, r3
}
 80031fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2274      	movs	r2, #116	; 0x74
 800320c:	2100      	movs	r1, #0
 800320e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e067      	b.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2204      	movs	r2, #4
 800321c:	4013      	ands	r3, r2
 800321e:	d050      	beq.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69da      	ldr	r2, [r3, #28]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	401a      	ands	r2, r3
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	429a      	cmp	r2, r3
 8003232:	d146      	bne.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323e:	f3ef 8310 	mrs	r3, PRIMASK
 8003242:	613b      	str	r3, [r7, #16]
  return(result);
 8003244:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003248:	2301      	movs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4923      	ldr	r1, [pc, #140]	; (80032ec <UART_WaitOnFlagUntilTimeout+0x184>)
 8003260:	400a      	ands	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003266:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	61fb      	str	r3, [r7, #28]
  return(result);
 8003276:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003278:	64bb      	str	r3, [r7, #72]	; 0x48
 800327a:	2301      	movs	r3, #1
 800327c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f383 8810 	msr	PRIMASK, r3
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	438a      	bics	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	2120      	movs	r1, #32
 80032b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2274      	movs	r2, #116	; 0x74
 80032ba:	2100      	movs	r1, #0
 80032bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e010      	b.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	425a      	negs	r2, r3
 80032d2:	4153      	adcs	r3, r2
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	001a      	movs	r2, r3
 80032d8:	1dfb      	adds	r3, r7, #7
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d100      	bne.n	80032e2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80032e0:	e74b      	b.n	800317a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b014      	add	sp, #80	; 0x50
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	fffffe5f 	.word	0xfffffe5f

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	2600      	movs	r6, #0
 80032f4:	4d0c      	ldr	r5, [pc, #48]	; (8003328 <__libc_init_array+0x38>)
 80032f6:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f8:	1b64      	subs	r4, r4, r5
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	2600      	movs	r6, #0
 8003302:	f000 f821 	bl	8003348 <_init>
 8003306:	4d0a      	ldr	r5, [pc, #40]	; (8003330 <__libc_init_array+0x40>)
 8003308:	4c0a      	ldr	r4, [pc, #40]	; (8003334 <__libc_init_array+0x44>)
 800330a:	1b64      	subs	r4, r4, r5
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	42a6      	cmp	r6, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	00b3      	lsls	r3, r6, #2
 8003316:	58eb      	ldr	r3, [r5, r3]
 8003318:	4798      	blx	r3
 800331a:	3601      	adds	r6, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	00b3      	lsls	r3, r6, #2
 8003320:	58eb      	ldr	r3, [r5, r3]
 8003322:	4798      	blx	r3
 8003324:	3601      	adds	r6, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	080033a8 	.word	0x080033a8
 800332c:	080033a8 	.word	0x080033a8
 8003330:	080033a8 	.word	0x080033a8
 8003334:	080033ac 	.word	0x080033ac

08003338 <memset>:
 8003338:	0003      	movs	r3, r0
 800333a:	1882      	adds	r2, r0, r2
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	7019      	strb	r1, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <_init>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr

08003354 <_fini>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr
