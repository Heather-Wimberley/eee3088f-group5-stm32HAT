
EEE3088F_Group5_HAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003698  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003790  08003790  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003790  08003790  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003790  08003790  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003794  08003794  00013794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000018  080037b0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080037b0  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c898  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0f  00000000  00000000  0002c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128e0  00000000  00000000  0002f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d945  00000000  00000000  00042280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ec56  00000000  00000000  0004fbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000be81b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002418  00000000  00000000  000be86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003740 	.word	0x08003740

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003740 	.word	0x08003740

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	1c0a      	adds	r2, r1, #0
 8000230:	801a      	strh	r2, [r3, #0]
	if ((size+offset)<PAGE_SIZE) return size;
 8000232:	1dbb      	adds	r3, r7, #6
 8000234:	881a      	ldrh	r2, [r3, #0]
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	881b      	ldrh	r3, [r3, #0]
 800023a:	18d3      	adds	r3, r2, r3
 800023c:	2b3f      	cmp	r3, #63	; 0x3f
 800023e:	dc02      	bgt.n	8000246 <bytestowrite+0x26>
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	e004      	b.n	8000250 <bytestowrite+0x30>
	else return PAGE_SIZE-offset;
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	2240      	movs	r2, #64	; 0x40
 800024c:	1ad3      	subs	r3, r2, r3
 800024e:	b29b      	uxth	r3, r3
}
 8000250:	0018      	movs	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	b002      	add	sp, #8
 8000256:	bd80      	pop	{r7, pc}

08000258 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	b08f      	sub	sp, #60	; 0x3c
 800025c:	af04      	add	r7, sp, #16
 800025e:	0004      	movs	r4, r0
 8000260:	0008      	movs	r0, r1
 8000262:	60ba      	str	r2, [r7, #8]
 8000264:	0019      	movs	r1, r3
 8000266:	250e      	movs	r5, #14
 8000268:	197b      	adds	r3, r7, r5
 800026a:	1c22      	adds	r2, r4, #0
 800026c:	801a      	strh	r2, [r3, #0]
 800026e:	240c      	movs	r4, #12
 8000270:	193b      	adds	r3, r7, r4
 8000272:	1c02      	adds	r2, r0, #0
 8000274:	801a      	strh	r2, [r3, #0]
 8000276:	1dbb      	adds	r3, r7, #6
 8000278:	1c0a      	adds	r2, r1, #0
 800027a:	801a      	strh	r2, [r3, #0]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 800027c:	2306      	movs	r3, #6
 800027e:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000280:	2326      	movs	r3, #38	; 0x26
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	197a      	adds	r2, r7, r5
 8000286:	8812      	ldrh	r2, [r2, #0]
 8000288:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800028a:	1dbb      	adds	r3, r7, #6
 800028c:	881a      	ldrh	r2, [r3, #0]
 800028e:	193b      	adds	r3, r7, r4
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	18d3      	adds	r3, r2, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	da00      	bge.n	800029a <EEPROM_Write+0x42>
 8000298:	333f      	adds	r3, #63	; 0x3f
 800029a:	119b      	asrs	r3, r3, #6
 800029c:	b299      	uxth	r1, r3
 800029e:	201a      	movs	r0, #26
 80002a0:	183b      	adds	r3, r7, r0
 80002a2:	220e      	movs	r2, #14
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	8812      	ldrh	r2, [r2, #0]
 80002a8:	188a      	adds	r2, r1, r2
 80002aa:	801a      	strh	r2, [r3, #0]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80002ac:	183a      	adds	r2, r7, r0
 80002ae:	2326      	movs	r3, #38	; 0x26
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	8812      	ldrh	r2, [r2, #0]
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	2318      	movs	r3, #24
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	3201      	adds	r2, #1
 80002c0:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 80002c2:	2324      	movs	r3, #36	; 0x24
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	2200      	movs	r2, #0
 80002c8:	801a      	strh	r2, [r3, #0]

	// write the data
	for (int i=0; i<numofpages; i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	623b      	str	r3, [r7, #32]
 80002ce:	e04d      	b.n	800036c <EEPROM_Write+0x114>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80002d0:	2626      	movs	r6, #38	; 0x26
 80002d2:	19bb      	adds	r3, r7, r6
 80002d4:	881a      	ldrh	r2, [r3, #0]
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	409a      	lsls	r2, r3
 80002da:	0013      	movs	r3, r2
 80002dc:	b21a      	sxth	r2, r3
 80002de:	210c      	movs	r1, #12
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2000      	movs	r0, #0
 80002e4:	5e1b      	ldrsh	r3, [r3, r0]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b21a      	sxth	r2, r3
 80002ea:	2316      	movs	r3, #22
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80002f0:	2514      	movs	r5, #20
 80002f2:	197c      	adds	r4, r7, r5
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	881a      	ldrh	r2, [r3, #0]
 80002f8:	1dbb      	adds	r3, r7, #6
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	0011      	movs	r1, r2
 80002fe:	0018      	movs	r0, r3
 8000300:	f7ff ff8e 	bl	8000220 <bytestowrite>
 8000304:	0003      	movs	r3, r0
 8000306:	8023      	strh	r3, [r4, #0]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000308:	2424      	movs	r4, #36	; 0x24
 800030a:	193b      	adds	r3, r7, r4
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	18d3      	adds	r3, r2, r3
 8000312:	2216      	movs	r2, #22
 8000314:	18ba      	adds	r2, r7, r2
 8000316:	8811      	ldrh	r1, [r2, #0]
 8000318:	481a      	ldr	r0, [pc, #104]	; (8000384 <EEPROM_Write+0x12c>)
 800031a:	22fa      	movs	r2, #250	; 0xfa
 800031c:	0092      	lsls	r2, r2, #2
 800031e:	9202      	str	r2, [sp, #8]
 8000320:	197a      	adds	r2, r7, r5
 8000322:	8812      	ldrh	r2, [r2, #0]
 8000324:	9201      	str	r2, [sp, #4]
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2302      	movs	r3, #2
 800032a:	000a      	movs	r2, r1
 800032c:	21a0      	movs	r1, #160	; 0xa0
 800032e:	f001 f8ad 	bl	800148c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000332:	19bb      	adds	r3, r7, r6
 8000334:	19ba      	adds	r2, r7, r6
 8000336:	8812      	ldrh	r2, [r2, #0]
 8000338:	3201      	adds	r2, #1
 800033a:	801a      	strh	r2, [r3, #0]
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800033c:	210c      	movs	r1, #12
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2200      	movs	r2, #0
 8000342:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000344:	1dbb      	adds	r3, r7, #6
 8000346:	1db9      	adds	r1, r7, #6
 8000348:	197a      	adds	r2, r7, r5
 800034a:	8809      	ldrh	r1, [r1, #0]
 800034c:	8812      	ldrh	r2, [r2, #0]
 800034e:	1a8a      	subs	r2, r1, r2
 8000350:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;  // update the position for the data buffer
 8000352:	193b      	adds	r3, r7, r4
 8000354:	1939      	adds	r1, r7, r4
 8000356:	197a      	adds	r2, r7, r5
 8000358:	8809      	ldrh	r1, [r1, #0]
 800035a:	8812      	ldrh	r2, [r2, #0]
 800035c:	188a      	adds	r2, r1, r2
 800035e:	801a      	strh	r2, [r3, #0]

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000360:	2005      	movs	r0, #5
 8000362:	f000 fd51 	bl	8000e08 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000366:	6a3b      	ldr	r3, [r7, #32]
 8000368:	3301      	adds	r3, #1
 800036a:	623b      	str	r3, [r7, #32]
 800036c:	2318      	movs	r3, #24
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	6a3a      	ldr	r2, [r7, #32]
 8000374:	429a      	cmp	r2, r3
 8000376:	dbab      	blt.n	80002d0 <EEPROM_Write+0x78>
	}
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b00b      	add	sp, #44	; 0x2c
 8000380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	20000034 	.word	0x20000034

08000388 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038a:	b08f      	sub	sp, #60	; 0x3c
 800038c:	af04      	add	r7, sp, #16
 800038e:	0004      	movs	r4, r0
 8000390:	0008      	movs	r0, r1
 8000392:	60ba      	str	r2, [r7, #8]
 8000394:	0019      	movs	r1, r3
 8000396:	250e      	movs	r5, #14
 8000398:	197b      	adds	r3, r7, r5
 800039a:	1c22      	adds	r2, r4, #0
 800039c:	801a      	strh	r2, [r3, #0]
 800039e:	240c      	movs	r4, #12
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	1c02      	adds	r2, r0, #0
 80003a4:	801a      	strh	r2, [r3, #0]
 80003a6:	1dbb      	adds	r3, r7, #6
 80003a8:	1c0a      	adds	r2, r1, #0
 80003aa:	801a      	strh	r2, [r3, #0]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80003ac:	2306      	movs	r3, #6
 80003ae:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80003b0:	2326      	movs	r3, #38	; 0x26
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	197a      	adds	r2, r7, r5
 80003b6:	8812      	ldrh	r2, [r2, #0]
 80003b8:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80003ba:	1dbb      	adds	r3, r7, #6
 80003bc:	881a      	ldrh	r2, [r3, #0]
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	18d3      	adds	r3, r2, r3
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	da00      	bge.n	80003ca <EEPROM_Read+0x42>
 80003c8:	333f      	adds	r3, #63	; 0x3f
 80003ca:	119b      	asrs	r3, r3, #6
 80003cc:	b299      	uxth	r1, r3
 80003ce:	201a      	movs	r0, #26
 80003d0:	183b      	adds	r3, r7, r0
 80003d2:	220e      	movs	r2, #14
 80003d4:	18ba      	adds	r2, r7, r2
 80003d6:	8812      	ldrh	r2, [r2, #0]
 80003d8:	188a      	adds	r2, r1, r2
 80003da:	801a      	strh	r2, [r3, #0]

	uint16_t numofpages = (endPage-startPage) + 1;
 80003dc:	183a      	adds	r2, r7, r0
 80003de:	2326      	movs	r3, #38	; 0x26
 80003e0:	18fb      	adds	r3, r7, r3
 80003e2:	8812      	ldrh	r2, [r2, #0]
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	b29a      	uxth	r2, r3
 80003ea:	2318      	movs	r3, #24
 80003ec:	18fb      	adds	r3, r7, r3
 80003ee:	3201      	adds	r2, #1
 80003f0:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 80003f2:	2324      	movs	r3, #36	; 0x24
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	2200      	movs	r2, #0
 80003f8:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<numofpages; i++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]
 80003fe:	e04a      	b.n	8000496 <EEPROM_Read+0x10e>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000400:	2626      	movs	r6, #38	; 0x26
 8000402:	19bb      	adds	r3, r7, r6
 8000404:	881a      	ldrh	r2, [r3, #0]
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	409a      	lsls	r2, r3
 800040a:	0013      	movs	r3, r2
 800040c:	b21a      	sxth	r2, r3
 800040e:	210c      	movs	r1, #12
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2000      	movs	r0, #0
 8000414:	5e1b      	ldrsh	r3, [r3, r0]
 8000416:	4313      	orrs	r3, r2
 8000418:	b21a      	sxth	r2, r3
 800041a:	2316      	movs	r3, #22
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8000420:	2514      	movs	r5, #20
 8000422:	197c      	adds	r4, r7, r5
 8000424:	187b      	adds	r3, r7, r1
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	1dbb      	adds	r3, r7, #6
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	0011      	movs	r1, r2
 800042e:	0018      	movs	r0, r3
 8000430:	f7ff fef6 	bl	8000220 <bytestowrite>
 8000434:	0003      	movs	r3, r0
 8000436:	8023      	strh	r3, [r4, #0]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000438:	2424      	movs	r4, #36	; 0x24
 800043a:	193b      	adds	r3, r7, r4
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	18d3      	adds	r3, r2, r3
 8000442:	2216      	movs	r2, #22
 8000444:	18ba      	adds	r2, r7, r2
 8000446:	8811      	ldrh	r1, [r2, #0]
 8000448:	4818      	ldr	r0, [pc, #96]	; (80004ac <EEPROM_Read+0x124>)
 800044a:	22fa      	movs	r2, #250	; 0xfa
 800044c:	0092      	lsls	r2, r2, #2
 800044e:	9202      	str	r2, [sp, #8]
 8000450:	197a      	adds	r2, r7, r5
 8000452:	8812      	ldrh	r2, [r2, #0]
 8000454:	9201      	str	r2, [sp, #4]
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	2302      	movs	r3, #2
 800045a:	000a      	movs	r2, r1
 800045c:	21a0      	movs	r1, #160	; 0xa0
 800045e:	f001 f943 	bl	80016e8 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000462:	19bb      	adds	r3, r7, r6
 8000464:	19ba      	adds	r2, r7, r6
 8000466:	8812      	ldrh	r2, [r2, #0]
 8000468:	3201      	adds	r2, #1
 800046a:	801a      	strh	r2, [r3, #0]
		offset=0;
 800046c:	210c      	movs	r1, #12
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 8000474:	1dbb      	adds	r3, r7, #6
 8000476:	1db9      	adds	r1, r7, #6
 8000478:	197a      	adds	r2, r7, r5
 800047a:	8809      	ldrh	r1, [r1, #0]
 800047c:	8812      	ldrh	r2, [r2, #0]
 800047e:	1a8a      	subs	r2, r1, r2
 8000480:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	1939      	adds	r1, r7, r4
 8000486:	197a      	adds	r2, r7, r5
 8000488:	8809      	ldrh	r1, [r1, #0]
 800048a:	8812      	ldrh	r2, [r2, #0]
 800048c:	188a      	adds	r2, r1, r2
 800048e:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numofpages; i++)
 8000490:	6a3b      	ldr	r3, [r7, #32]
 8000492:	3301      	adds	r3, #1
 8000494:	623b      	str	r3, [r7, #32]
 8000496:	2318      	movs	r3, #24
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	6a3a      	ldr	r2, [r7, #32]
 800049e:	429a      	cmp	r2, r3
 80004a0:	dbae      	blt.n	8000400 <EEPROM_Read+0x78>
	}
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b00b      	add	sp, #44	; 0x2c
 80004aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ac:	20000034 	.word	0x20000034

080004b0 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80004b0:	b5b0      	push	{r4, r5, r7, lr}
 80004b2:	b098      	sub	sp, #96	; 0x60
 80004b4:	af04      	add	r7, sp, #16
 80004b6:	0002      	movs	r2, r0
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	801a      	strh	r2, [r3, #0]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80004bc:	2306      	movs	r3, #6
 80004be:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80004c0:	1dbb      	adds	r3, r7, #6
 80004c2:	881a      	ldrh	r2, [r3, #0]
 80004c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004c6:	409a      	lsls	r2, r3
 80004c8:	244a      	movs	r4, #74	; 0x4a
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	801a      	strh	r2, [r3, #0]

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80004ce:	2508      	movs	r5, #8
 80004d0:	197b      	adds	r3, r7, r5
 80004d2:	2240      	movs	r2, #64	; 0x40
 80004d4:	21ff      	movs	r1, #255	; 0xff
 80004d6:	0018      	movs	r0, r3
 80004d8:	f003 f929 	bl	800372e <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	881a      	ldrh	r2, [r3, #0]
 80004e0:	4809      	ldr	r0, [pc, #36]	; (8000508 <EEPROM_PageErase+0x58>)
 80004e2:	23fa      	movs	r3, #250	; 0xfa
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	9302      	str	r3, [sp, #8]
 80004e8:	2340      	movs	r3, #64	; 0x40
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	197b      	adds	r3, r7, r5
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2302      	movs	r3, #2
 80004f2:	21a0      	movs	r1, #160	; 0xa0
 80004f4:	f000 ffca 	bl	800148c <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay
 80004f8:	2005      	movs	r0, #5
 80004fa:	f000 fc85 	bl	8000e08 <HAL_Delay>
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b014      	add	sp, #80	; 0x50
 8000504:	bdb0      	pop	{r4, r5, r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	20000034 	.word	0x20000034

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fc15 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f81f 	bl	8000558 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f95d 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051e:	f000 f889 	bl	8000634 <MX_I2C1_Init>
  MX_RTC_Init();
 8000522:	f000 f8c7 	bl	80006b4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f927 	bl	8000778 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  for (int i = 0; i<512;i++)
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e007      	b.n	8000540 <main+0x34>
  {
	  EEPROM_PageErase(i);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	b29b      	uxth	r3, r3
 8000534:	0018      	movs	r0, r3
 8000536:	f7ff ffbb 	bl	80004b0 <EEPROM_PageErase>
  for (int i = 0; i<512;i++)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	429a      	cmp	r2, r3
 8000548:	dbf2      	blt.n	8000530 <main+0x24>
  }
  read_all_data();
 800054a:	f000 fa01 	bl	8000950 <read_all_data>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  store_one_set();
 800054e:	f000 fa3f 	bl	80009d0 <store_one_set>
	  read_all_data();
 8000552:	f000 f9fd 	bl	8000950 <read_all_data>
	  store_one_set();
 8000556:	e7fa      	b.n	800054e <main+0x42>

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b097      	sub	sp, #92	; 0x5c
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	2428      	movs	r4, #40	; 0x28
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	2330      	movs	r3, #48	; 0x30
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f003 f8e0 	bl	800372e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056e:	2318      	movs	r3, #24
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	0018      	movs	r0, r3
 8000574:	2310      	movs	r3, #16
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f003 f8d8 	bl	800372e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	0018      	movs	r0, r3
 8000582:	2314      	movs	r3, #20
 8000584:	001a      	movs	r2, r3
 8000586:	2100      	movs	r1, #0
 8000588:	f003 f8d1 	bl	800372e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800058c:	0021      	movs	r1, r4
 800058e:	187b      	adds	r3, r7, r1
 8000590:	220a      	movs	r2, #10
 8000592:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2201      	movs	r2, #1
 8000598:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2210      	movs	r2, #16
 800059e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2201      	movs	r2, #1
 80005a4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2202      	movs	r2, #2
 80005aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	22a0      	movs	r2, #160	; 0xa0
 80005b6:	0392      	lsls	r2, r2, #14
 80005b8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fcae 	bl	8001f24 <HAL_RCC_OscConfig>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005cc:	f000 fa72 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	2118      	movs	r1, #24
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2207      	movs	r2, #7
 80005d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2202      	movs	r2, #2
 80005dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2101      	movs	r1, #1
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 ffb2 	bl	8002558 <HAL_RCC_ClockConfig>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005f8:	f000 fa5c 	bl	8000ab4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4a0c      	ldr	r2, [pc, #48]	; (8000630 <SystemClock_Config+0xd8>)
 8000600:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	0092      	lsls	r2, r2, #2
 8000614:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	0018      	movs	r0, r3
 800061a:	f002 f8ef 	bl	80027fc <HAL_RCCEx_PeriphCLKConfig>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000622:	f000 fa47 	bl	8000ab4 <Error_Handler>
  }
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b017      	add	sp, #92	; 0x5c
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	00010021 	.word	0x00010021

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_I2C1_Init+0x74>)
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <MX_I2C1_Init+0x78>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <MX_I2C1_Init+0x7c>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_I2C1_Init+0x74>)
 800064c:	2201      	movs	r2, #1
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fe75 	bl	8001360 <HAL_I2C_Init>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800067a:	f000 fa1b 	bl	8000ab4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000680:	2100      	movs	r1, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fbb6 	bl	8001df4 <HAL_I2CEx_ConfigAnalogFilter>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800068c:	f000 fa12 	bl	8000ab4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_I2C1_Init+0x74>)
 8000692:	2100      	movs	r1, #0
 8000694:	0018      	movs	r0, r3
 8000696:	f001 fbf9 	bl	8001e8c <HAL_I2CEx_ConfigDigitalFilter>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800069e:	f000 fa09 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000034 	.word	0x20000034
 80006ac:	40005400 	.word	0x40005400
 80006b0:	2000090e 	.word	0x2000090e

080006b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f003 f833 	bl	800372e <memset>
  RTC_DateTypeDef sDate = {0};
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006ce:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_RTC_Init+0xbc>)
 80006d0:	4a28      	ldr	r2, [pc, #160]	; (8000774 <MX_RTC_Init+0xc0>)
 80006d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_RTC_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_RTC_Init+0xbc>)
 80006dc:	227f      	movs	r2, #127	; 0x7f
 80006de:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_RTC_Init+0xbc>)
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <MX_RTC_Init+0xbc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_RTC_Init+0xbc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_RTC_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_RTC_Init+0xbc>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 f95c 	bl	80029b8 <HAL_RTC_Init>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000704:	f000 f9d6 	bl	8000ab4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2216      	movs	r2, #22
 800070c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x30;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2230      	movs	r2, #48	; 0x30
 8000712:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000726:	1d39      	adds	r1, r7, #4
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_RTC_Init+0xbc>)
 800072a:	2201      	movs	r2, #1
 800072c:	0018      	movs	r0, r3
 800072e:	f002 f9d7 	bl	8002ae0 <HAL_RTC_SetTime>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000736:	f000 f9bd 	bl	8000ab4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800073a:	003b      	movs	r3, r7
 800073c:	2204      	movs	r2, #4
 800073e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000740:	003b      	movs	r3, r7
 8000742:	2205      	movs	r2, #5
 8000744:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x29;
 8000746:	003b      	movs	r3, r7
 8000748:	2229      	movs	r2, #41	; 0x29
 800074a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x22;
 800074c:	003b      	movs	r3, r7
 800074e:	2222      	movs	r2, #34	; 0x22
 8000750:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000752:	0039      	movs	r1, r7
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_RTC_Init+0xbc>)
 8000756:	2201      	movs	r2, #1
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fadb 	bl	8002d14 <HAL_RTC_SetDate>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000762:	f000 f9a7 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b006      	add	sp, #24
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	20000080 	.word	0x20000080
 8000774:	40002800 	.word	0x40002800

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_USART1_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000784:	2296      	movs	r2, #150	; 0x96
 8000786:	0192      	lsls	r2, r2, #6
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fc35 	bl	800302c <HAL_UART_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f975 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000a0 	.word	0x200000a0
 80007d4:	40013800 	.word	0x40013800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	240c      	movs	r4, #12
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	0018      	movs	r0, r3
 80007e4:	2314      	movs	r3, #20
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f002 ffa0 	bl	800372e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b55      	ldr	r3, [pc, #340]	; (8000944 <MX_GPIO_Init+0x16c>)
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	4b54      	ldr	r3, [pc, #336]	; (8000944 <MX_GPIO_Init+0x16c>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0289      	lsls	r1, r1, #10
 80007f8:	430a      	orrs	r2, r1
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	4b51      	ldr	r3, [pc, #324]	; (8000944 <MX_GPIO_Init+0x16c>)
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	029b      	lsls	r3, r3, #10
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b4e      	ldr	r3, [pc, #312]	; (8000944 <MX_GPIO_Init+0x16c>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b4d      	ldr	r3, [pc, #308]	; (8000944 <MX_GPIO_Init+0x16c>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	02c9      	lsls	r1, r1, #11
 8000814:	430a      	orrs	r2, r1
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	4b4a      	ldr	r3, [pc, #296]	; (8000944 <MX_GPIO_Init+0x16c>)
 800081a:	695a      	ldr	r2, [r3, #20]
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	02db      	lsls	r3, r3, #11
 8000820:	4013      	ands	r3, r2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b47      	ldr	r3, [pc, #284]	; (8000944 <MX_GPIO_Init+0x16c>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b46      	ldr	r3, [pc, #280]	; (8000944 <MX_GPIO_Init+0x16c>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0309      	lsls	r1, r1, #12
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b43      	ldr	r3, [pc, #268]	; (8000944 <MX_GPIO_Init+0x16c>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	031b      	lsls	r3, r3, #12
 800083c:	4013      	ands	r3, r2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Temp_Active_Pin|Proximity_Active_Pin, GPIO_PIN_RESET);
 8000842:	4b41      	ldr	r3, [pc, #260]	; (8000948 <MX_GPIO_Init+0x170>)
 8000844:	2200      	movs	r2, #0
 8000846:	2111      	movs	r1, #17
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fd4f 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800084e:	23c0      	movs	r3, #192	; 0xc0
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	483e      	ldr	r0, [pc, #248]	; (800094c <MX_GPIO_Init+0x174>)
 8000854:	2200      	movs	r2, #0
 8000856:	0019      	movs	r1, r3
 8000858:	f000 fd48 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2290      	movs	r2, #144	; 0x90
 8000866:	0352      	lsls	r2, r2, #13
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	193a      	adds	r2, r7, r4
 8000872:	2390      	movs	r3, #144	; 0x90
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f000 fbc7 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_on_Pin */
  GPIO_InitStruct.Pin = USB_on_Pin;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2210      	movs	r2, #16
 8000882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2288      	movs	r2, #136	; 0x88
 8000888:	0352      	lsls	r2, r2, #13
 800088a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_on_GPIO_Port, &GPIO_InitStruct);
 8000892:	193a      	adds	r2, r7, r4
 8000894:	2390      	movs	r3, #144	; 0x90
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	0011      	movs	r1, r2
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fbb6 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : Temp_Active_Pin Proximity_Active_Pin */
  GPIO_InitStruct.Pin = Temp_Active_Pin|Proximity_Active_Pin;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2211      	movs	r2, #17
 80008a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2201      	movs	r2, #1
 80008aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_GPIO_Init+0x170>)
 80008bc:	0019      	movs	r1, r3
 80008be:	0010      	movs	r0, r2
 80008c0:	f000 fba4 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Data_Pin */
  GPIO_InitStruct.Pin = Temp_Data_Pin;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2202      	movs	r2, #2
 80008c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2203      	movs	r2, #3
 80008ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Data_GPIO_Port, &GPIO_InitStruct);
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_GPIO_Init+0x170>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f000 fb95 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	22c0      	movs	r2, #192	; 0xc0
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	000c      	movs	r4, r1
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2201      	movs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	193b      	adds	r3, r7, r4
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_GPIO_Init+0x174>)
 8000904:	0019      	movs	r1, r3
 8000906:	0010      	movs	r0, r2
 8000908:	f000 fb80 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Interrupt_Pin */
  GPIO_InitStruct.Pin = Proximity_Interrupt_Pin;
 800090c:	0021      	movs	r1, r4
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2220      	movs	r2, #32
 8000912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Proximity_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8000920:	187b      	adds	r3, r7, r1
 8000922:	4a09      	ldr	r2, [pc, #36]	; (8000948 <MX_GPIO_Init+0x170>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f000 fb70 	bl	800100c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	2101      	movs	r1, #1
 8000930:	2007      	movs	r0, #7
 8000932:	f000 fb39 	bl	8000fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000936:	2007      	movs	r0, #7
 8000938:	f000 fb4b 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b009      	add	sp, #36	; 0x24
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	48000400 	.word	0x48000400
 800094c:	48000800 	.word	0x48000800

08000950 <read_all_data>:

/* USER CODE BEGIN 4 */
void read_all_data (void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	EEPROM_Read(1, 0, dataRead, 640);
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4a03      	ldr	r2, [pc, #12]	; (8000968 <read_all_data+0x18>)
 800095a:	2100      	movs	r1, #0
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fd13 	bl	8000388 <EEPROM_Read>
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000124 	.word	0x20000124

0800096c <get_time_to_store>:
	}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
}

void get_time_to_store(void)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000972:	0039      	movs	r1, r7
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <get_time_to_store+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f002 f96d 	bl	8002c58 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800097e:	2414      	movs	r4, #20
 8000980:	1939      	adds	r1, r7, r4
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <get_time_to_store+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f002 fa6a 	bl	8002e60 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	 time[0] = gTime.Hours;
 800098c:	003b      	movs	r3, r7
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <get_time_to_store+0x5c>)
 8000992:	701a      	strb	r2, [r3, #0]
	 time[1] = gTime.Minutes;
 8000994:	003b      	movs	r3, r7
 8000996:	785a      	ldrb	r2, [r3, #1]
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <get_time_to_store+0x5c>)
 800099a:	705a      	strb	r2, [r3, #1]
	 time[2] = gTime.Seconds;
 800099c:	003b      	movs	r3, r7
 800099e:	789a      	ldrb	r2, [r3, #2]
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <get_time_to_store+0x5c>)
 80009a2:	709a      	strb	r2, [r3, #2]
	/* Display date Format: dd-mm-yy */
	 date[0] = gDate.Date;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	789a      	ldrb	r2, [r3, #2]
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <get_time_to_store+0x60>)
 80009aa:	701a      	strb	r2, [r3, #0]
	 date[1] = gDate.Month;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	785a      	ldrb	r2, [r3, #1]
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <get_time_to_store+0x60>)
 80009b2:	705a      	strb	r2, [r3, #1]
	 date[2] = gDate.Year;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	78da      	ldrb	r2, [r3, #3]
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <get_time_to_store+0x60>)
 80009ba:	709a      	strb	r2, [r3, #2]
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b007      	add	sp, #28
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	20000080 	.word	0x20000080
 80009c8:	200003a4 	.word	0x200003a4
 80009cc:	200003a8 	.word	0x200003a8

080009d0 <store_one_set>:

void store_one_set()
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
	get_time_to_store();
 80009d6:	f7ff ffc9 	bl	800096c <get_time_to_store>
	if(ID<1024)
	{

		datas[0] = ID;
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <store_one_set+0xb8>)
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <store_one_set+0xbc>)
 80009e0:	701a      	strb	r2, [r3, #0]
		memcpy(datas + 1, temp, 4 * sizeof(uint8_t));
 80009e2:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <store_one_set+0xc0>)
 80009e4:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <store_one_set+0xc4>)
 80009e6:	0010      	movs	r0, r2
 80009e8:	0019      	movs	r1, r3
 80009ea:	2304      	movs	r3, #4
 80009ec:	001a      	movs	r2, r3
 80009ee:	f002 fe95 	bl	800371c <memcpy>
		memcpy(datas + 5, proximity, 4 * sizeof(uint8_t));
 80009f2:	4a29      	ldr	r2, [pc, #164]	; (8000a98 <store_one_set+0xc8>)
 80009f4:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <store_one_set+0xcc>)
 80009f6:	0010      	movs	r0, r2
 80009f8:	0019      	movs	r1, r3
 80009fa:	2304      	movs	r3, #4
 80009fc:	001a      	movs	r2, r3
 80009fe:	f002 fe8d 	bl	800371c <memcpy>
		memcpy(datas + 9, time, 3 * sizeof(uint8_t));
 8000a02:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <store_one_set+0xd0>)
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <store_one_set+0xd4>)
 8000a06:	0010      	movs	r0, r2
 8000a08:	0019      	movs	r1, r3
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	f002 fe85 	bl	800371c <memcpy>
		memcpy(datas + 12, date, 3 * sizeof(uint8_t));
 8000a12:	4a25      	ldr	r2, [pc, #148]	; (8000aa8 <store_one_set+0xd8>)
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <store_one_set+0xdc>)
 8000a16:	0010      	movs	r0, r2
 8000a18:	0019      	movs	r1, r3
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	f002 fe7d 	bl	800371c <memcpy>
		uint8_t pages = (ID-1)/4+1;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <store_one_set+0xb8>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	da00      	bge.n	8000a2e <store_one_set+0x5e>
 8000a2c:	3303      	adds	r3, #3
 8000a2e:	109b      	asrs	r3, r3, #2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	3201      	adds	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
		uint16_t sizes = 16;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2210      	movs	r2, #16
 8000a3c:	801a      	strh	r2, [r3, #0]
		uint16_t offsets = (ID-1)%4*16;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <store_one_set+0xb8>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <store_one_set+0xe0>)
 8000a46:	4013      	ands	r3, r2
 8000a48:	d504      	bpl.n	8000a54 <store_one_set+0x84>
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	4252      	negs	r2, r2
 8000a50:	4313      	orrs	r3, r2
 8000a52:	3301      	adds	r3, #1
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	1cbb      	adds	r3, r7, #2
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	801a      	strh	r2, [r3, #0]

		EEPROM_Write (pages, offsets , datas ,sizes);
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b298      	uxth	r0, r3
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	881c      	ldrh	r4, [r3, #0]
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <store_one_set+0xbc>)
 8000a68:	1cbb      	adds	r3, r7, #2
 8000a6a:	8819      	ldrh	r1, [r3, #0]
 8000a6c:	0023      	movs	r3, r4
 8000a6e:	f7ff fbf3 	bl	8000258 <EEPROM_Write>
		ID++;
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <store_one_set+0xb8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <store_one_set+0xb8>)
 8000a7c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b003      	add	sp, #12
 8000a84:	bd90      	pop	{r4, r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	200003ac 	.word	0x200003ac
 8000a90:	200003ad 	.word	0x200003ad
 8000a94:	20000004 	.word	0x20000004
 8000a98:	200003b1 	.word	0x200003b1
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	200003b5 	.word	0x200003b5
 8000aa4:	200003a4 	.word	0x200003a4
 8000aa8:	200003b8 	.word	0x200003b8
 8000aac:	200003a8 	.word	0x200003a8
 8000ab0:	80000003 	.word	0x80000003

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	699a      	ldr	r2, [r3, #24]
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_MspInit+0x44>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	619a      	str	r2, [r3, #24]
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	69da      	ldr	r2, [r3, #28]
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0549      	lsls	r1, r1, #21
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	61da      	str	r2, [r3, #28]
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_MspInit+0x44>)
 8000aee:	69da      	ldr	r2, [r3, #28]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	055b      	lsls	r3, r3, #21
 8000af4:	4013      	ands	r3, r2
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b08b      	sub	sp, #44	; 0x2c
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	2414      	movs	r4, #20
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	0018      	movs	r0, r3
 8000b16:	2314      	movs	r3, #20
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f002 fe07 	bl	800372e <memset>
  if(hi2c->Instance==I2C1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <HAL_I2C_MspInit+0x90>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d132      	bne.n	8000b90 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_I2C_MspInit+0x94>)
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_I2C_MspInit+0x94>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	02c9      	lsls	r1, r1, #11
 8000b34:	430a      	orrs	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_I2C_MspInit+0x94>)
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	02db      	lsls	r3, r3, #11
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	22c0      	movs	r2, #192	; 0xc0
 8000b4a:	0052      	lsls	r2, r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4e:	0021      	movs	r1, r4
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2212      	movs	r2, #18
 8000b54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2203      	movs	r2, #3
 8000b60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2201      	movs	r2, #1
 8000b66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_I2C_MspInit+0x98>)
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	0010      	movs	r0, r2
 8000b70:	f000 fa4c 	bl	800100c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_I2C_MspInit+0x94>)
 8000b76:	69da      	ldr	r2, [r3, #28]
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_I2C_MspInit+0x94>)
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	0389      	lsls	r1, r1, #14
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	61da      	str	r2, [r3, #28]
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_I2C_MspInit+0x94>)
 8000b84:	69da      	ldr	r2, [r3, #28]
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	039b      	lsls	r3, r3, #14
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b00b      	add	sp, #44	; 0x2c
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_RTC_MspInit+0x28>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d106      	bne.n	8000bc4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_RTC_MspInit+0x2c>)
 8000bb8:	6a1a      	ldr	r2, [r3, #32]
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_RTC_MspInit+0x2c>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0209      	lsls	r1, r1, #8
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40002800 	.word	0x40002800
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b08b      	sub	sp, #44	; 0x2c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	2414      	movs	r4, #20
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	0018      	movs	r0, r3
 8000be2:	2314      	movs	r3, #20
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f002 fda1 	bl	800372e <memset>
  if(huart->Instance==USART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <HAL_UART_MspInit+0x94>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d133      	bne.n	8000c5e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_UART_MspInit+0x98>)
 8000bf8:	699a      	ldr	r2, [r3, #24]
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_UART_MspInit+0x98>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	01c9      	lsls	r1, r1, #7
 8000c00:	430a      	orrs	r2, r1
 8000c02:	619a      	str	r2, [r3, #24]
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_UART_MspInit+0x98>)
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	01db      	lsls	r3, r3, #7
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_UART_MspInit+0x98>)
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x98>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0289      	lsls	r1, r1, #10
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_UART_MspInit+0x98>)
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	029b      	lsls	r3, r3, #10
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	22c0      	movs	r2, #192	; 0xc0
 8000c32:	00d2      	lsls	r2, r2, #3
 8000c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	0021      	movs	r1, r4
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2203      	movs	r2, #3
 8000c48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	187a      	adds	r2, r7, r1
 8000c52:	2390      	movs	r3, #144	; 0x90
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 f9d7 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b00b      	add	sp, #44	; 0x2c
 8000c64:	bd90      	pop	{r4, r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f89c 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_on_Pin);
 8000ca2:	2010      	movs	r0, #16
 8000ca4:	f000 fb40 	bl	8001328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	1dbb      	adds	r3, r7, #6
 8000cba:	801a      	strh	r2, [r3, #0]
    if ( GPIO_Pin == USB_on_Pin)
 8000cbc:	1dbb      	adds	r3, r7, #6
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	2b10      	cmp	r3, #16
 8000cc2:	d106      	bne.n	8000cd2 <HAL_GPIO_EXTI_Callback+0x22>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	0019      	movs	r1, r3
 8000cce:	f000 fb0d 	bl	80012ec <HAL_GPIO_WritePin>
    }
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	48000800 	.word	0x48000800

08000ce0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopForever+0xe>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopForever+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d16:	f7ff ffe3 	bl	8000ce0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d1a:	f002 fcdb 	bl	80036d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d1e:	f7ff fbf5 	bl	800050c <main>

08000d22 <LoopForever>:

LoopForever:
    b LoopForever
 8000d22:	e7fe      	b.n	8000d22 <LoopForever>
  ldr   r0, =_estack
 8000d24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d30:	08003798 	.word	0x08003798
  ldr r2, =_sbss
 8000d34:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d38:	200003c0 	.word	0x200003c0

08000d3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC1_COMP_IRQHandler>
	...

08000d40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <HAL_Init+0x24>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_Init+0x24>)
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f809 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d56:	f7ff feb3 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_InitTick+0x60>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	23fa      	movs	r3, #250	; 0xfa
 8000d7c:	0098      	lsls	r0, r3, #2
 8000d7e:	f7ff f9c3 	bl	8000108 <__udivsi3>
 8000d82:	0003      	movs	r3, r0
 8000d84:	0019      	movs	r1, r3
 8000d86:	0020      	movs	r0, r4
 8000d88:	f7ff f9be 	bl	8000108 <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f92f 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e00f      	b.n	8000dbc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d80b      	bhi.n	8000dba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2301      	movs	r3, #1
 8000da6:	425b      	negs	r3, r3
 8000da8:	2200      	movs	r2, #0
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 f8fc 	bl	8000fa8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_InitTick+0x64>)
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b003      	add	sp, #12
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	2000000c 	.word	0x2000000c
 8000dc8:	20000014 	.word	0x20000014
 8000dcc:	20000010 	.word	0x20000010

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	001a      	movs	r2, r3
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x20>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	18d2      	adds	r2, r2, r3
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_IncTick+0x20>)
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	20000014 	.word	0x20000014
 8000df0:	200003bc 	.word	0x200003bc

08000df4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <HAL_GetTick+0x10>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	200003bc 	.word	0x200003bc

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff fff0 	bl	8000df4 <HAL_GetTick>
 8000e14:	0003      	movs	r3, r0
 8000e16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	001a      	movs	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	189b      	adds	r3, r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	f7ff ffe0 	bl	8000df4 <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	20000014 	.word	0x20000014

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	0002      	movs	r2, r0
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b7f      	cmp	r3, #127	; 0x7f
 8000e62:	d809      	bhi.n	8000e78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	001a      	movs	r2, r3
 8000e6a:	231f      	movs	r3, #31
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_EnableIRQ+0x30>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	4091      	lsls	r1, r2
 8000e74:	000a      	movs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
  }
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b7f      	cmp	r3, #127	; 0x7f
 8000e98:	d828      	bhi.n	8000eec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9a:	4a2f      	ldr	r2, [pc, #188]	; (8000f58 <__NVIC_SetPriority+0xd4>)
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	33c0      	adds	r3, #192	; 0xc0
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	589b      	ldr	r3, [r3, r2]
 8000eaa:	1dfa      	adds	r2, r7, #7
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	0011      	movs	r1, r2
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	00d2      	lsls	r2, r2, #3
 8000eb6:	21ff      	movs	r1, #255	; 0xff
 8000eb8:	4091      	lsls	r1, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	43d2      	mvns	r2, r2
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	019b      	lsls	r3, r3, #6
 8000ec6:	22ff      	movs	r2, #255	; 0xff
 8000ec8:	401a      	ands	r2, r3
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	0018      	movs	r0, r3
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	4003      	ands	r3, r0
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed8:	481f      	ldr	r0, [pc, #124]	; (8000f58 <__NVIC_SetPriority+0xd4>)
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	33c0      	adds	r3, #192	; 0xc0
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eea:	e031      	b.n	8000f50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <__NVIC_SetPriority+0xd8>)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	3b08      	subs	r3, #8
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3306      	adds	r3, #6
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	3304      	adds	r3, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	1dfa      	adds	r2, r7, #7
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	400a      	ands	r2, r1
 8000f10:	00d2      	lsls	r2, r2, #3
 8000f12:	21ff      	movs	r1, #255	; 0xff
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	22ff      	movs	r2, #255	; 0xff
 8000f24:	401a      	ands	r2, r3
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	4003      	ands	r3, r0
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <__NVIC_SetPriority+0xd8>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	001c      	movs	r4, r3
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	4023      	ands	r3, r4
 8000f40:	3b08      	subs	r3, #8
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	430a      	orrs	r2, r1
 8000f46:	3306      	adds	r3, #6
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	18c3      	adds	r3, r0, r3
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b003      	add	sp, #12
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	1e5a      	subs	r2, r3, #1
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	045b      	lsls	r3, r3, #17
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d301      	bcc.n	8000f78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f74:	2301      	movs	r3, #1
 8000f76:	e010      	b.n	8000f9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <SysTick_Config+0x44>)
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	3a01      	subs	r2, #1
 8000f7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f80:	2301      	movs	r3, #1
 8000f82:	425b      	negs	r3, r3
 8000f84:	2103      	movs	r1, #3
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff ff7c 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x44>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x44>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	1c02      	adds	r2, r0, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	0002      	movs	r2, r0
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff ff33 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ffaf 	bl	8000f60 <SysTick_Config>
 8001002:	0003      	movs	r3, r0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e14f      	b.n	80012bc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4091      	lsls	r1, r2
 8001026:	000a      	movs	r2, r1
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <HAL_GPIO_Init+0x28>
 8001032:	e140      	b.n	80012b6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	409a      	lsls	r2, r3
 800105a:	0013      	movs	r3, r2
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	2201      	movs	r2, #1
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	58d3      	ldr	r3, [r2, r3]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2207      	movs	r2, #7
 8001108:	4013      	ands	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2107      	movs	r1, #7
 8001122:	400b      	ands	r3, r1
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	6939      	ldr	r1, [r7, #16]
 800113c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	401a      	ands	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	23c0      	movs	r3, #192	; 0xc0
 8001178:	029b      	lsls	r3, r3, #10
 800117a:	4013      	ands	r3, r2
 800117c:	d100      	bne.n	8001180 <HAL_GPIO_Init+0x174>
 800117e:	e09a      	b.n	80012b6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 8001186:	2101      	movs	r1, #1
 8001188:	430a      	orrs	r2, r1
 800118a:	619a      	str	r2, [r3, #24]
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x2c8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2201      	movs	r2, #1
 8001192:	4013      	ands	r3, r2
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001198:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	589b      	ldr	r3, [r3, r2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4013      	ands	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	43da      	mvns	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	2390      	movs	r3, #144	; 0x90
 80011c0:	05db      	lsls	r3, r3, #23
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x1e2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a44      	ldr	r2, [pc, #272]	; (80012dc <HAL_GPIO_Init+0x2d0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x1de>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a43      	ldr	r2, [pc, #268]	; (80012e0 <HAL_GPIO_Init+0x2d4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x1da>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_GPIO_Init+0x2d8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x1d6>
 80011de:	2303      	movs	r3, #3
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e004      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011ee:	2300      	movs	r3, #0
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	2103      	movs	r1, #3
 80011f4:	400a      	ands	r2, r1
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4093      	lsls	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x2cc>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	4013      	ands	r3, r2
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	029b      	lsls	r3, r3, #10
 8001250:	4013      	ands	r3, r2
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	035b      	lsls	r3, r3, #13
 800127a:	4013      	ands	r3, r2
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43da      	mvns	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	039b      	lsls	r3, r3, #14
 80012a4:	4013      	ands	r3, r2
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_GPIO_Init+0x2dc>)
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	40da      	lsrs	r2, r3
 80012c4:	1e13      	subs	r3, r2, #0
 80012c6:	d000      	beq.n	80012ca <HAL_GPIO_Init+0x2be>
 80012c8:	e6a8      	b.n	800101c <HAL_GPIO_Init+0x10>
  } 
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b006      	add	sp, #24
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000
 80012dc:	48000400 	.word	0x48000400
 80012e0:	48000800 	.word	0x48000800
 80012e4:	48000c00 	.word	0x48000c00
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	0008      	movs	r0, r1
 80012f6:	0011      	movs	r1, r2
 80012f8:	1cbb      	adds	r3, r7, #2
 80012fa:	1c02      	adds	r2, r0, #0
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	1c7b      	adds	r3, r7, #1
 8001300:	1c0a      	adds	r2, r1, #0
 8001302:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001304:	1c7b      	adds	r3, r7, #1
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800130c:	1cbb      	adds	r3, r7, #2
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001316:	1cbb      	adds	r3, r7, #2
 8001318:	881a      	ldrh	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	0002      	movs	r2, r0
 8001330:	1dbb      	adds	r3, r7, #6
 8001332:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	1dba      	adds	r2, r7, #6
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	4013      	ands	r3, r2
 800133e:	d008      	beq.n	8001352 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001342:	1dba      	adds	r2, r7, #6
 8001344:	8812      	ldrh	r2, [r2, #0]
 8001346:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001348:	1dbb      	adds	r3, r7, #6
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff fcaf 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e082      	b.n	8001478 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2241      	movs	r2, #65	; 0x41
 8001376:	5c9b      	ldrb	r3, [r3, r2]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d107      	bne.n	800138e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2240      	movs	r2, #64	; 0x40
 8001382:	2100      	movs	r1, #0
 8001384:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff fbbd 	bl	8000b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2241      	movs	r2, #65	; 0x41
 8001392:	2124      	movs	r1, #36	; 0x24
 8001394:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	438a      	bics	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4934      	ldr	r1, [pc, #208]	; (8001480 <HAL_I2C_Init+0x120>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4931      	ldr	r1, [pc, #196]	; (8001484 <HAL_I2C_Init+0x124>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	0209      	lsls	r1, r1, #8
 80013d8:	430a      	orrs	r2, r1
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	e007      	b.n	80013ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2184      	movs	r1, #132	; 0x84
 80013e8:	0209      	lsls	r1, r1, #8
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d104      	bne.n	8001400 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	491f      	ldr	r1, [pc, #124]	; (8001488 <HAL_I2C_Init+0x128>)
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	491a      	ldr	r1, [pc, #104]	; (8001484 <HAL_I2C_Init+0x124>)
 800141c:	400a      	ands	r2, r1
 800141e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	431a      	orrs	r2, r3
 800142a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69d9      	ldr	r1, [r3, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1a      	ldr	r2, [r3, #32]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2241      	movs	r2, #65	; 0x41
 8001464:	2120      	movs	r1, #32
 8001466:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2242      	movs	r2, #66	; 0x42
 8001472:	2100      	movs	r1, #0
 8001474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}
 8001480:	f0ffffff 	.word	0xf0ffffff
 8001484:	ffff7fff 	.word	0xffff7fff
 8001488:	02008000 	.word	0x02008000

0800148c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af02      	add	r7, sp, #8
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	000c      	movs	r4, r1
 8001496:	0010      	movs	r0, r2
 8001498:	0019      	movs	r1, r3
 800149a:	230a      	movs	r3, #10
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	1c22      	adds	r2, r4, #0
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	2308      	movs	r3, #8
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	1c02      	adds	r2, r0, #0
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	1dbb      	adds	r3, r7, #6
 80014ac:	1c0a      	adds	r2, r1, #0
 80014ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2241      	movs	r2, #65	; 0x41
 80014b4:	5c9b      	ldrb	r3, [r3, r2]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	d000      	beq.n	80014be <HAL_I2C_Mem_Write+0x32>
 80014bc:	e10c      	b.n	80016d8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <HAL_I2C_Mem_Write+0x42>
 80014c4:	232c      	movs	r3, #44	; 0x2c
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0ff      	b.n	80016da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2240      	movs	r2, #64	; 0x40
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_I2C_Mem_Write+0x5c>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e0f8      	b.n	80016da <HAL_I2C_Mem_Write+0x24e>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	2101      	movs	r1, #1
 80014ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014f0:	f7ff fc80 	bl	8000df4 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	0219      	lsls	r1, r3, #8
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2319      	movs	r3, #25
 8001504:	2201      	movs	r2, #1
 8001506:	f000 fb0b 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0e3      	b.n	80016da <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2241      	movs	r2, #65	; 0x41
 8001516:	2121      	movs	r1, #33	; 0x21
 8001518:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2242      	movs	r2, #66	; 0x42
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	222c      	movs	r2, #44	; 0x2c
 8001532:	18ba      	adds	r2, r7, r2
 8001534:	8812      	ldrh	r2, [r2, #0]
 8001536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800153e:	1dbb      	adds	r3, r7, #6
 8001540:	881c      	ldrh	r4, [r3, #0]
 8001542:	2308      	movs	r3, #8
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	230a      	movs	r3, #10
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	8819      	ldrh	r1, [r3, #0]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	0023      	movs	r3, r4
 800155a:	f000 f9f9 	bl	8001950 <I2C_RequestMemoryWrite>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d005      	beq.n	800156e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2240      	movs	r2, #64	; 0x40
 8001566:	2100      	movs	r1, #0
 8001568:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0b5      	b.n	80016da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001572:	b29b      	uxth	r3, r3
 8001574:	2bff      	cmp	r3, #255	; 0xff
 8001576:	d911      	bls.n	800159c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001582:	b2da      	uxtb	r2, r3
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	045c      	lsls	r4, r3, #17
 8001588:	230a      	movs	r3, #10
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	8819      	ldrh	r1, [r3, #0]
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	0023      	movs	r3, r4
 8001596:	f000 fbf7 	bl	8001d88 <I2C_TransferConfig>
 800159a:	e012      	b.n	80015c2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	049c      	lsls	r4, r3, #18
 80015b0:	230a      	movs	r3, #10
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	8819      	ldrh	r1, [r3, #0]
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	0023      	movs	r3, r4
 80015be:	f000 fbe3 	bl	8001d88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 fae8 	bl	8001b9e <I2C_WaitOnTXISFlagUntilTimeout>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e081      	b.n	80016da <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	3b01      	subs	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160a:	b29b      	uxth	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d03a      	beq.n	8001686 <HAL_I2C_Mem_Write+0x1fa>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001614:	2b00      	cmp	r3, #0
 8001616:	d136      	bne.n	8001686 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	0013      	movs	r3, r2
 8001622:	2200      	movs	r2, #0
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	f000 fa7b 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 800162a:	1e03      	subs	r3, r0, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e053      	b.n	80016da <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	d911      	bls.n	8001660 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	22ff      	movs	r2, #255	; 0xff
 8001640:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	b2da      	uxtb	r2, r3
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	045c      	lsls	r4, r3, #17
 800164c:	230a      	movs	r3, #10
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	8819      	ldrh	r1, [r3, #0]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	2300      	movs	r3, #0
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	0023      	movs	r3, r4
 800165a:	f000 fb95 	bl	8001d88 <I2C_TransferConfig>
 800165e:	e012      	b.n	8001686 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	b2da      	uxtb	r2, r3
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	049c      	lsls	r4, r3, #18
 8001674:	230a      	movs	r3, #10
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	8819      	ldrh	r1, [r3, #0]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	2300      	movs	r3, #0
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	0023      	movs	r3, r4
 8001682:	f000 fb81 	bl	8001d88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168a:	b29b      	uxth	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d198      	bne.n	80015c2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	0018      	movs	r0, r3
 8001698:	f000 fac0 	bl	8001c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800169c:	1e03      	subs	r3, r0, #0
 800169e:	d001      	beq.n	80016a4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e01a      	b.n	80016da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2220      	movs	r2, #32
 80016aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	490b      	ldr	r1, [pc, #44]	; (80016e4 <HAL_I2C_Mem_Write+0x258>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2241      	movs	r2, #65	; 0x41
 80016c0:	2120      	movs	r1, #32
 80016c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2242      	movs	r2, #66	; 0x42
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2240      	movs	r2, #64	; 0x40
 80016d0:	2100      	movs	r1, #0
 80016d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e000      	b.n	80016da <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80016d8:	2302      	movs	r3, #2
  }
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b007      	add	sp, #28
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	fe00e800 	.word	0xfe00e800

080016e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	000c      	movs	r4, r1
 80016f2:	0010      	movs	r0, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	230a      	movs	r3, #10
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	1c22      	adds	r2, r4, #0
 80016fc:	801a      	strh	r2, [r3, #0]
 80016fe:	2308      	movs	r3, #8
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	1c02      	adds	r2, r0, #0
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	1dbb      	adds	r3, r7, #6
 8001708:	1c0a      	adds	r2, r1, #0
 800170a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2241      	movs	r2, #65	; 0x41
 8001710:	5c9b      	ldrb	r3, [r3, r2]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b20      	cmp	r3, #32
 8001716:	d000      	beq.n	800171a <HAL_I2C_Mem_Read+0x32>
 8001718:	e110      	b.n	800193c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_I2C_Mem_Read+0x42>
 8001720:	232c      	movs	r3, #44	; 0x2c
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e103      	b.n	800193e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	5c9b      	ldrb	r3, [r3, r2]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_I2C_Mem_Read+0x5c>
 8001740:	2302      	movs	r3, #2
 8001742:	e0fc      	b.n	800193e <HAL_I2C_Mem_Read+0x256>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2240      	movs	r2, #64	; 0x40
 8001748:	2101      	movs	r1, #1
 800174a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800174c:	f7ff fb52 	bl	8000df4 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	0219      	lsls	r1, r3, #8
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2319      	movs	r3, #25
 8001760:	2201      	movs	r2, #1
 8001762:	f000 f9dd 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0e7      	b.n	800193e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2241      	movs	r2, #65	; 0x41
 8001772:	2122      	movs	r1, #34	; 0x22
 8001774:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2242      	movs	r2, #66	; 0x42
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	222c      	movs	r2, #44	; 0x2c
 800178e:	18ba      	adds	r2, r7, r2
 8001790:	8812      	ldrh	r2, [r2, #0]
 8001792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800179a:	1dbb      	adds	r3, r7, #6
 800179c:	881c      	ldrh	r4, [r3, #0]
 800179e:	2308      	movs	r3, #8
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	881a      	ldrh	r2, [r3, #0]
 80017a4:	230a      	movs	r3, #10
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	8819      	ldrh	r1, [r3, #0]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	0023      	movs	r3, r4
 80017b6:	f000 f92f 	bl	8001a18 <I2C_RequestMemoryRead>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d005      	beq.n	80017ca <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2240      	movs	r2, #64	; 0x40
 80017c2:	2100      	movs	r1, #0
 80017c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0b9      	b.n	800193e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2bff      	cmp	r3, #255	; 0xff
 80017d2:	d911      	bls.n	80017f8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	045c      	lsls	r4, r3, #17
 80017e4:	230a      	movs	r3, #10
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	8819      	ldrh	r1, [r3, #0]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_I2C_Mem_Read+0x260>)
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	0023      	movs	r3, r4
 80017f2:	f000 fac9 	bl	8001d88 <I2C_TransferConfig>
 80017f6:	e012      	b.n	800181e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001806:	b2da      	uxtb	r2, r3
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	049c      	lsls	r4, r3, #18
 800180c:	230a      	movs	r3, #10
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	8819      	ldrh	r1, [r3, #0]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <HAL_I2C_Mem_Read+0x260>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	0023      	movs	r3, r4
 800181a:	f000 fab5 	bl	8001d88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800181e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	0013      	movs	r3, r2
 8001828:	2200      	movs	r2, #0
 800182a:	2104      	movs	r1, #4
 800182c:	f000 f978 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e082      	b.n	800193e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d03a      	beq.n	80018ea <HAL_I2C_Mem_Read+0x202>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d136      	bne.n	80018ea <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800187c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	0013      	movs	r3, r2
 8001886:	2200      	movs	r2, #0
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	f000 f949 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e053      	b.n	800193e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	2bff      	cmp	r3, #255	; 0xff
 800189e:	d911      	bls.n	80018c4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	22ff      	movs	r2, #255	; 0xff
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	045c      	lsls	r4, r3, #17
 80018b0:	230a      	movs	r3, #10
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	8819      	ldrh	r1, [r3, #0]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	0023      	movs	r3, r4
 80018be:	f000 fa63 	bl	8001d88 <I2C_TransferConfig>
 80018c2:	e012      	b.n	80018ea <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	049c      	lsls	r4, r3, #18
 80018d8:	230a      	movs	r3, #10
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	8819      	ldrh	r1, [r3, #0]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	2300      	movs	r3, #0
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	0023      	movs	r3, r4
 80018e6:	f000 fa4f 	bl	8001d88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d194      	bne.n	800181e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 f98e 	bl	8001c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001900:	1e03      	subs	r3, r0, #0
 8001902:	d001      	beq.n	8001908 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e01a      	b.n	800193e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2220      	movs	r2, #32
 800190e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	490c      	ldr	r1, [pc, #48]	; (800194c <HAL_I2C_Mem_Read+0x264>)
 800191c:	400a      	ands	r2, r1
 800191e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2241      	movs	r2, #65	; 0x41
 8001924:	2120      	movs	r1, #32
 8001926:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2242      	movs	r2, #66	; 0x42
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	2100      	movs	r1, #0
 8001936:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	e000      	b.n	800193e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800193c:	2302      	movs	r3, #2
  }
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b007      	add	sp, #28
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	80002400 	.word	0x80002400
 800194c:	fe00e800 	.word	0xfe00e800

08001950 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af02      	add	r7, sp, #8
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	000c      	movs	r4, r1
 800195a:	0010      	movs	r0, r2
 800195c:	0019      	movs	r1, r3
 800195e:	250a      	movs	r5, #10
 8001960:	197b      	adds	r3, r7, r5
 8001962:	1c22      	adds	r2, r4, #0
 8001964:	801a      	strh	r2, [r3, #0]
 8001966:	2308      	movs	r3, #8
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	1c02      	adds	r2, r0, #0
 800196c:	801a      	strh	r2, [r3, #0]
 800196e:	1dbb      	adds	r3, r7, #6
 8001970:	1c0a      	adds	r2, r1, #0
 8001972:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001974:	1dbb      	adds	r3, r7, #6
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	045c      	lsls	r4, r3, #17
 800197e:	197b      	adds	r3, r7, r5
 8001980:	8819      	ldrh	r1, [r3, #0]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <I2C_RequestMemoryWrite+0xc4>)
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	0023      	movs	r3, r4
 800198a:	f000 f9fd 	bl	8001d88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	6a39      	ldr	r1, [r7, #32]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0018      	movs	r0, r3
 8001996:	f000 f902 	bl	8001b9e <I2C_WaitOnTXISFlagUntilTimeout>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d001      	beq.n	80019a2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e033      	b.n	8001a0a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019a2:	1dbb      	adds	r3, r7, #6
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019aa:	2308      	movs	r3, #8
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
 80019b8:	e019      	b.n	80019ee <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019ba:	2308      	movs	r3, #8
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	6a39      	ldr	r1, [r7, #32]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 f8e3 	bl	8001b9e <I2C_WaitOnTXISFlagUntilTimeout>
 80019d8:	1e03      	subs	r3, r0, #0
 80019da:	d001      	beq.n	80019e0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e014      	b.n	8001a0a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019e0:	2308      	movs	r3, #8
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80019ee:	6a3a      	ldr	r2, [r7, #32]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	0013      	movs	r3, r2
 80019f8:	2200      	movs	r2, #0
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	f000 f890 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b004      	add	sp, #16
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	80002000 	.word	0x80002000

08001a18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	000c      	movs	r4, r1
 8001a22:	0010      	movs	r0, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	250a      	movs	r5, #10
 8001a28:	197b      	adds	r3, r7, r5
 8001a2a:	1c22      	adds	r2, r4, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	2308      	movs	r3, #8
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	1c02      	adds	r2, r0, #0
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	1dbb      	adds	r3, r7, #6
 8001a38:	1c0a      	adds	r2, r1, #0
 8001a3a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a3c:	1dbb      	adds	r3, r7, #6
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	197b      	adds	r3, r7, r5
 8001a44:	8819      	ldrh	r1, [r3, #0]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <I2C_RequestMemoryRead+0xc0>)
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f000 f99b 	bl	8001d88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f000 f8a0 	bl	8001b9e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d001      	beq.n	8001a66 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e033      	b.n	8001ace <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a66:	1dbb      	adds	r3, r7, #6
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a6e:	2308      	movs	r3, #8
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a7c:	e019      	b.n	8001ab2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a7e:	2308      	movs	r3, #8
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a92:	6a39      	ldr	r1, [r7, #32]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f881 	bl	8001b9e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a9c:	1e03      	subs	r3, r0, #0
 8001a9e:	d001      	beq.n	8001aa4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e014      	b.n	8001ace <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ab2:	6a3a      	ldr	r2, [r7, #32]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	0013      	movs	r3, r2
 8001abc:	2200      	movs	r2, #0
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	f000 f82e 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d001      	beq.n	8001acc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b004      	add	sp, #16
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	80002000 	.word	0x80002000

08001adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2202      	movs	r2, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d103      	bne.n	8001afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d007      	beq.n	8001b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2101      	movs	r1, #1
 8001b14:	430a      	orrs	r2, r1
 8001b16:	619a      	str	r2, [r3, #24]
  }
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b30:	e021      	b.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	d01e      	beq.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b38:	f7ff f95c 	bl	8000df4 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d302      	bcc.n	8001b4e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d113      	bne.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	2220      	movs	r2, #32
 8001b54:	431a      	orrs	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2241      	movs	r2, #65	; 0x41
 8001b5e:	2120      	movs	r1, #32
 8001b60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2242      	movs	r2, #66	; 0x42
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2240      	movs	r2, #64	; 0x40
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	425a      	negs	r2, r3
 8001b86:	4153      	adcs	r3, r2
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	001a      	movs	r2, r3
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d0ce      	beq.n	8001b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	0018      	movs	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b004      	add	sp, #16
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001baa:	e02b      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 f86e 	bl	8001c94 <I2C_IsAcknowledgeFailed>
 8001bb8:	1e03      	subs	r3, r0, #0
 8001bba:	d001      	beq.n	8001bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e029      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	d01e      	beq.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7ff f915 	bl	8000df4 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d113      	bne.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	2220      	movs	r2, #32
 8001be2:	431a      	orrs	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2241      	movs	r2, #65	; 0x41
 8001bec:	2120      	movs	r1, #32
 8001bee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2242      	movs	r2, #66	; 0x42
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e007      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d1cc      	bne.n	8001bac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b004      	add	sp, #16
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c28:	e028      	b.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f82f 	bl	8001c94 <I2C_IsAcknowledgeFailed>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e026      	b.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7ff f8d9 	bl	8000df4 <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d113      	bne.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	2220      	movs	r2, #32
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2241      	movs	r2, #65	; 0x41
 8001c64:	2120      	movs	r1, #32
 8001c66:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2242      	movs	r2, #66	; 0x42
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	2100      	movs	r1, #0
 8001c76:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e007      	b.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2220      	movs	r2, #32
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d1cf      	bne.n	8001c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b004      	add	sp, #16
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d164      	bne.n	8001d78 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	049b      	lsls	r3, r3, #18
 8001cb8:	401a      	ands	r2, r3
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	049b      	lsls	r3, r3, #18
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d02b      	beq.n	8001d1a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	01c9      	lsls	r1, r1, #7
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd4:	e021      	b.n	8001d1a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	d01e      	beq.n	8001d1a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cdc:	f7ff f88a 	bl	8000df4 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d302      	bcc.n	8001cf2 <I2C_IsAcknowledgeFailed+0x5e>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2241      	movs	r2, #65	; 0x41
 8001d02:	2120      	movs	r1, #32
 8001d04:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2242      	movs	r2, #66	; 0x42
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	2100      	movs	r1, #0
 8001d14:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e02f      	b.n	8001d7a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2220      	movs	r2, #32
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d1d6      	bne.n	8001cd6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2220      	movs	r2, #32
 8001d36:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fece 	bl	8001adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	490e      	ldr	r1, [pc, #56]	; (8001d84 <I2C_IsAcknowledgeFailed+0xf0>)
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	2204      	movs	r2, #4
 8001d56:	431a      	orrs	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2241      	movs	r2, #65	; 0x41
 8001d60:	2120      	movs	r1, #32
 8001d62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2242      	movs	r2, #66	; 0x42
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	fe00e800 	.word	0xfe00e800

08001d88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	0008      	movs	r0, r1
 8001d92:	0011      	movs	r1, r2
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	240a      	movs	r4, #10
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	1c02      	adds	r2, r0, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	2009      	movs	r0, #9
 8001da0:	183b      	adds	r3, r7, r0
 8001da2:	1c0a      	adds	r2, r1, #0
 8001da4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	0d51      	lsrs	r1, r2, #21
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	00d2      	lsls	r2, r2, #3
 8001db4:	400a      	ands	r2, r1
 8001db6:	490e      	ldr	r1, [pc, #56]	; (8001df0 <I2C_TransferConfig+0x68>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	43d2      	mvns	r2, r2
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	0011      	movs	r1, r2
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	059b      	lsls	r3, r3, #22
 8001dc6:	0d9a      	lsrs	r2, r3, #22
 8001dc8:	183b      	adds	r3, r7, r0
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	0418      	lsls	r0, r3, #16
 8001dce:	23ff      	movs	r3, #255	; 0xff
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	4003      	ands	r3, r0
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b005      	add	sp, #20
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	03ff63ff 	.word	0x03ff63ff

08001df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2241      	movs	r2, #65	; 0x41
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d138      	bne.n	8001e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2240      	movs	r2, #64	; 0x40
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e032      	b.n	8001e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2241      	movs	r2, #65	; 0x41
 8001e24:	2124      	movs	r1, #36	; 0x24
 8001e26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	438a      	bics	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4911      	ldr	r1, [pc, #68]	; (8001e88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2241      	movs	r2, #65	; 0x41
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	2100      	movs	r1, #0
 8001e76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	ffffefff 	.word	0xffffefff

08001e8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2241      	movs	r2, #65	; 0x41
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d139      	bne.n	8001f16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2240      	movs	r2, #64	; 0x40
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e033      	b.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2241      	movs	r2, #65	; 0x41
 8001ebc:	2124      	movs	r1, #36	; 0x24
 8001ebe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	438a      	bics	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2241      	movs	r2, #65	; 0x41
 8001f06:	2120      	movs	r1, #32
 8001f08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	fffff0ff 	.word	0xfffff0ff

08001f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e301      	b.n	800253a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d100      	bne.n	8001f42 <HAL_RCC_OscConfig+0x1e>
 8001f40:	e08d      	b.n	800205e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f42:	4bc3      	ldr	r3, [pc, #780]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	220c      	movs	r2, #12
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d00e      	beq.n	8001f6c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f4e:	4bc0      	ldr	r3, [pc, #768]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	220c      	movs	r2, #12
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x64>
 8001f5a:	4bbd      	ldr	r3, [pc, #756]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	025b      	lsls	r3, r3, #9
 8001f62:	401a      	ands	r2, r3
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	4bb8      	ldr	r3, [pc, #736]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	029b      	lsls	r3, r3, #10
 8001f74:	4013      	ands	r3, r2
 8001f76:	d100      	bne.n	8001f7a <HAL_RCC_OscConfig+0x56>
 8001f78:	e070      	b.n	800205c <HAL_RCC_OscConfig+0x138>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d000      	beq.n	8001f84 <HAL_RCC_OscConfig+0x60>
 8001f82:	e06b      	b.n	800205c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e2d8      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x7c>
 8001f90:	4baf      	ldr	r3, [pc, #700]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4bae      	ldr	r3, [pc, #696]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	0249      	lsls	r1, r1, #9
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e02f      	b.n	8002000 <HAL_RCC_OscConfig+0xdc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x9e>
 8001fa8:	4ba9      	ldr	r3, [pc, #676]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4ba8      	ldr	r3, [pc, #672]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	49a9      	ldr	r1, [pc, #676]	; (8002254 <HAL_RCC_OscConfig+0x330>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	4ba6      	ldr	r3, [pc, #664]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4ba5      	ldr	r3, [pc, #660]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	49a7      	ldr	r1, [pc, #668]	; (8002258 <HAL_RCC_OscConfig+0x334>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e01e      	b.n	8002000 <HAL_RCC_OscConfig+0xdc>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_RCC_OscConfig+0xc4>
 8001fca:	4ba1      	ldr	r3, [pc, #644]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	02c9      	lsls	r1, r1, #11
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b9d      	ldr	r3, [pc, #628]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b9c      	ldr	r3, [pc, #624]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	0249      	lsls	r1, r1, #9
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0xdc>
 8001fe8:	4b99      	ldr	r3, [pc, #612]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b98      	ldr	r3, [pc, #608]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	4999      	ldr	r1, [pc, #612]	; (8002254 <HAL_RCC_OscConfig+0x330>)
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	4b96      	ldr	r3, [pc, #600]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b95      	ldr	r3, [pc, #596]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	4997      	ldr	r1, [pc, #604]	; (8002258 <HAL_RCC_OscConfig+0x334>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d014      	beq.n	8002032 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe fef4 	bl	8000df4 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002012:	f7fe feef 	bl	8000df4 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b64      	cmp	r3, #100	; 0x64
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e28a      	b.n	800253a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002024:	4b8a      	ldr	r3, [pc, #552]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0xee>
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fedf 	bl	8000df4 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe feda 	bl	8000df4 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e275      	b.n	800253a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b80      	ldr	r3, [pc, #512]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x118>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d100      	bne.n	800206a <HAL_RCC_OscConfig+0x146>
 8002068:	e069      	b.n	800213e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800206a:	4b79      	ldr	r3, [pc, #484]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	220c      	movs	r2, #12
 8002070:	4013      	ands	r3, r2
 8002072:	d00b      	beq.n	800208c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002074:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	220c      	movs	r2, #12
 800207a:	4013      	ands	r3, r2
 800207c:	2b08      	cmp	r3, #8
 800207e:	d11c      	bne.n	80020ba <HAL_RCC_OscConfig+0x196>
 8002080:	4b73      	ldr	r3, [pc, #460]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	4013      	ands	r3, r2
 800208a:	d116      	bne.n	80020ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208c:	4b70      	ldr	r3, [pc, #448]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2202      	movs	r2, #2
 8002092:	4013      	ands	r3, r2
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x17e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e24b      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b6b      	ldr	r3, [pc, #428]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	22f8      	movs	r2, #248	; 0xf8
 80020a8:	4393      	bics	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	00da      	lsls	r2, r3, #3
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b8:	e041      	b.n	800213e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d024      	beq.n	800210c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c2:	4b63      	ldr	r3, [pc, #396]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b62      	ldr	r3, [pc, #392]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe fe91 	bl	8000df4 <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d8:	f7fe fe8c 	bl	8000df4 <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e227      	b.n	800253a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ea:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2202      	movs	r2, #2
 80020f0:	4013      	ands	r3, r2
 80020f2:	d0f1      	beq.n	80020d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	4b56      	ldr	r3, [pc, #344]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	22f8      	movs	r2, #248	; 0xf8
 80020fa:	4393      	bics	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00da      	lsls	r2, r3, #3
 8002104:	4b52      	ldr	r3, [pc, #328]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e018      	b.n	800213e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210c:	4b50      	ldr	r3, [pc, #320]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002112:	2101      	movs	r1, #1
 8002114:	438a      	bics	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fe6c 	bl	8000df4 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002122:	f7fe fe67 	bl	8000df4 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e202      	b.n	800253a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002134:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d1f1      	bne.n	8002122 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2208      	movs	r2, #8
 8002144:	4013      	ands	r3, r2
 8002146:	d036      	beq.n	80021b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d019      	beq.n	8002184 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002154:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002156:	2101      	movs	r1, #1
 8002158:	430a      	orrs	r2, r1
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7fe fe4a 	bl	8000df4 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002166:	f7fe fe45 	bl	8000df4 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1e0      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002178:	4b35      	ldr	r3, [pc, #212]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d0f1      	beq.n	8002166 <HAL_RCC_OscConfig+0x242>
 8002182:	e018      	b.n	80021b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002184:	4b32      	ldr	r3, [pc, #200]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 800218a:	2101      	movs	r1, #1
 800218c:	438a      	bics	r2, r1
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7fe fe30 	bl	8000df4 <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219a:	f7fe fe2b 	bl	8000df4 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1c6      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d1f1      	bne.n	800219a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d100      	bne.n	80021c2 <HAL_RCC_OscConfig+0x29e>
 80021c0:	e0b4      	b.n	800232c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	201f      	movs	r0, #31
 80021c4:	183b      	adds	r3, r7, r0
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	055b      	lsls	r3, r3, #21
 80021d2:	4013      	ands	r3, r2
 80021d4:	d110      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	0549      	lsls	r1, r1, #21
 80021e0:	430a      	orrs	r2, r1
 80021e2:	61da      	str	r2, [r3, #28]
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021f2:	183b      	adds	r3, r7, r0
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_RCC_OscConfig+0x338>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4013      	ands	r3, r2
 8002202:	d11a      	bne.n	800223a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_RCC_OscConfig+0x338>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_RCC_OscConfig+0x338>)
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	0049      	lsls	r1, r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe fdef 	bl	8000df4 <HAL_GetTick>
 8002216:	0003      	movs	r3, r0
 8002218:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7fe fdea 	bl	8000df4 <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e185      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x338>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10e      	bne.n	8002260 <HAL_RCC_OscConfig+0x33c>
 8002242:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	4b02      	ldr	r3, [pc, #8]	; (8002250 <HAL_RCC_OscConfig+0x32c>)
 8002248:	2101      	movs	r1, #1
 800224a:	430a      	orrs	r2, r1
 800224c:	621a      	str	r2, [r3, #32]
 800224e:	e035      	b.n	80022bc <HAL_RCC_OscConfig+0x398>
 8002250:	40021000 	.word	0x40021000
 8002254:	fffeffff 	.word	0xfffeffff
 8002258:	fffbffff 	.word	0xfffbffff
 800225c:	40007000 	.word	0x40007000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x35e>
 8002268:	4bb6      	ldr	r3, [pc, #728]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	4bb5      	ldr	r3, [pc, #724]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800226e:	2101      	movs	r1, #1
 8002270:	438a      	bics	r2, r1
 8002272:	621a      	str	r2, [r3, #32]
 8002274:	4bb3      	ldr	r3, [pc, #716]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4bb2      	ldr	r3, [pc, #712]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800227a:	2104      	movs	r1, #4
 800227c:	438a      	bics	r2, r1
 800227e:	621a      	str	r2, [r3, #32]
 8002280:	e01c      	b.n	80022bc <HAL_RCC_OscConfig+0x398>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x380>
 800228a:	4bae      	ldr	r3, [pc, #696]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	4bad      	ldr	r3, [pc, #692]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002290:	2104      	movs	r1, #4
 8002292:	430a      	orrs	r2, r1
 8002294:	621a      	str	r2, [r3, #32]
 8002296:	4bab      	ldr	r3, [pc, #684]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	4baa      	ldr	r3, [pc, #680]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800229c:	2101      	movs	r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	621a      	str	r2, [r3, #32]
 80022a2:	e00b      	b.n	80022bc <HAL_RCC_OscConfig+0x398>
 80022a4:	4ba7      	ldr	r3, [pc, #668]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	4ba6      	ldr	r3, [pc, #664]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80022aa:	2101      	movs	r1, #1
 80022ac:	438a      	bics	r2, r1
 80022ae:	621a      	str	r2, [r3, #32]
 80022b0:	4ba4      	ldr	r3, [pc, #656]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	4ba3      	ldr	r3, [pc, #652]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80022b6:	2104      	movs	r1, #4
 80022b8:	438a      	bics	r2, r1
 80022ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d014      	beq.n	80022ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c4:	f7fe fd96 	bl	8000df4 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e009      	b.n	80022e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fd91 	bl	8000df4 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	4a9b      	ldr	r2, [pc, #620]	; (8002548 <HAL_RCC_OscConfig+0x624>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e12b      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e2:	4b98      	ldr	r3, [pc, #608]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	2202      	movs	r2, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x3aa>
 80022ec:	e013      	b.n	8002316 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7fe fd81 	bl	8000df4 <HAL_GetTick>
 80022f2:	0003      	movs	r3, r0
 80022f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f6:	e009      	b.n	800230c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7fe fd7c 	bl	8000df4 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	4a91      	ldr	r2, [pc, #580]	; (8002548 <HAL_RCC_OscConfig+0x624>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e116      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	4b8d      	ldr	r3, [pc, #564]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	2202      	movs	r2, #2
 8002312:	4013      	ands	r3, r2
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002316:	231f      	movs	r3, #31
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002320:	4b88      	ldr	r3, [pc, #544]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	4b87      	ldr	r3, [pc, #540]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002326:	4989      	ldr	r1, [pc, #548]	; (800254c <HAL_RCC_OscConfig+0x628>)
 8002328:	400a      	ands	r2, r1
 800232a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2210      	movs	r2, #16
 8002332:	4013      	ands	r3, r2
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d12a      	bne.n	8002394 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800233e:	4b81      	ldr	r3, [pc, #516]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002342:	4b80      	ldr	r3, [pc, #512]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002344:	2104      	movs	r1, #4
 8002346:	430a      	orrs	r2, r1
 8002348:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800234a:	4b7e      	ldr	r3, [pc, #504]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800234c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234e:	4b7d      	ldr	r3, [pc, #500]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002350:	2101      	movs	r1, #1
 8002352:	430a      	orrs	r2, r1
 8002354:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7fe fd4d 	bl	8000df4 <HAL_GetTick>
 800235a:	0003      	movs	r3, r0
 800235c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002360:	f7fe fd48 	bl	8000df4 <HAL_GetTick>
 8002364:	0002      	movs	r2, r0
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0e3      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002372:	4b74      	ldr	r3, [pc, #464]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	2202      	movs	r2, #2
 8002378:	4013      	ands	r3, r2
 800237a:	d0f1      	beq.n	8002360 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800237c:	4b71      	ldr	r3, [pc, #452]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	22f8      	movs	r2, #248	; 0xf8
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	00da      	lsls	r2, r3, #3
 800238c:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800238e:	430a      	orrs	r2, r1
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
 8002392:	e034      	b.n	80023fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	3305      	adds	r3, #5
 800239a:	d111      	bne.n	80023c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800239c:	4b69      	ldr	r3, [pc, #420]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800239e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80023a2:	2104      	movs	r1, #4
 80023a4:	438a      	bics	r2, r1
 80023a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023a8:	4b66      	ldr	r3, [pc, #408]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ac:	22f8      	movs	r2, #248	; 0xf8
 80023ae:	4393      	bics	r3, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	00da      	lsls	r2, r3, #3
 80023b8:	4b62      	ldr	r3, [pc, #392]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34
 80023be:	e01e      	b.n	80023fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023c0:	4b60      	ldr	r3, [pc, #384]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80023c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c4:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80023c6:	2104      	movs	r1, #4
 80023c8:	430a      	orrs	r2, r1
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023cc:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80023ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d0:	4b5c      	ldr	r3, [pc, #368]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	438a      	bics	r2, r1
 80023d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7fe fd0c 	bl	8000df4 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023e2:	f7fe fd07 	bl	8000df4 <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0a2      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d1f1      	bne.n	80023e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d100      	bne.n	8002408 <HAL_RCC_OscConfig+0x4e4>
 8002406:	e097      	b.n	8002538 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	4b4e      	ldr	r3, [pc, #312]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	220c      	movs	r2, #12
 800240e:	4013      	ands	r3, r2
 8002410:	2b08      	cmp	r3, #8
 8002412:	d100      	bne.n	8002416 <HAL_RCC_OscConfig+0x4f2>
 8002414:	e06b      	b.n	80024ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d14c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b48      	ldr	r3, [pc, #288]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002424:	494a      	ldr	r1, [pc, #296]	; (8002550 <HAL_RCC_OscConfig+0x62c>)
 8002426:	400a      	ands	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe fce3 	bl	8000df4 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe fcde 	bl	8000df4 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e079      	b.n	800253a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	049b      	lsls	r3, r3, #18
 800244e:	4013      	ands	r3, r2
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002452:	4b3c      	ldr	r3, [pc, #240]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002456:	220f      	movs	r2, #15
 8002458:	4393      	bics	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002460:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002462:	430a      	orrs	r2, r1
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <HAL_RCC_OscConfig+0x630>)
 800246c:	4013      	ands	r3, r2
 800246e:	0019      	movs	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	431a      	orrs	r2, r3
 800247a:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002480:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	0449      	lsls	r1, r1, #17
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe fcb1 	bl	8000df4 <HAL_GetTick>
 8002492:	0003      	movs	r3, r0
 8002494:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fcac 	bl	8000df4 <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e047      	b.n	800253a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	049b      	lsls	r3, r3, #18
 80024b2:	4013      	ands	r3, r2
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x574>
 80024b6:	e03f      	b.n	8002538 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80024be:	4924      	ldr	r1, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x62c>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fc96 	bl	8000df4 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fc91 	bl	8000df4 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e02c      	b.n	800253a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	049b      	lsls	r3, r3, #18
 80024e8:	4013      	ands	r3, r2
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x5aa>
 80024ec:	e024      	b.n	8002538 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e01f      	b.n	800253a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_RCC_OscConfig+0x620>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	025b      	lsls	r3, r3, #9
 800250c:	401a      	ands	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	429a      	cmp	r2, r3
 8002514:	d10e      	bne.n	8002534 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	220f      	movs	r2, #15
 800251a:	401a      	ands	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	23f0      	movs	r3, #240	; 0xf0
 8002528:	039b      	lsls	r3, r3, #14
 800252a:	401a      	ands	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b008      	add	sp, #32
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	40021000 	.word	0x40021000
 8002548:	00001388 	.word	0x00001388
 800254c:	efffffff 	.word	0xefffffff
 8002550:	feffffff 	.word	0xfeffffff
 8002554:	ffc2ffff 	.word	0xffc2ffff

08002558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b3      	b.n	80026d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <HAL_RCC_ClockConfig+0x184>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d911      	bls.n	800259e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b58      	ldr	r3, [pc, #352]	; (80026dc <HAL_RCC_ClockConfig+0x184>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2201      	movs	r2, #1
 8002580:	4393      	bics	r3, r2
 8002582:	0019      	movs	r1, r3
 8002584:	4b55      	ldr	r3, [pc, #340]	; (80026dc <HAL_RCC_ClockConfig+0x184>)
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_ClockConfig+0x184>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e09a      	b.n	80026d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2202      	movs	r2, #2
 80025a4:	4013      	ands	r3, r2
 80025a6:	d015      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2204      	movs	r2, #4
 80025ae:	4013      	ands	r3, r2
 80025b0:	d006      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025b2:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 80025b8:	21e0      	movs	r1, #224	; 0xe0
 80025ba:	00c9      	lsls	r1, r1, #3
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	22f0      	movs	r2, #240	; 0xf0
 80025c6:	4393      	bics	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2201      	movs	r2, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	d040      	beq.n	8002660 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	029b      	lsls	r3, r3, #10
 80025ee:	4013      	ands	r3, r2
 80025f0:	d114      	bne.n	800261c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06e      	b.n	80026d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	049b      	lsls	r3, r3, #18
 8002606:	4013      	ands	r3, r2
 8002608:	d108      	bne.n	800261c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e062      	b.n	80026d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2202      	movs	r2, #2
 8002614:	4013      	ands	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e05b      	b.n	80026d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261c:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2203      	movs	r2, #3
 8002622:	4393      	bics	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002630:	f7fe fbe0 	bl	8000df4 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	e009      	b.n	800264e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263a:	f7fe fbdb 	bl	8000df4 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <HAL_RCC_ClockConfig+0x18c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e042      	b.n	80026d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	220c      	movs	r2, #12
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	429a      	cmp	r2, r3
 800265e:	d1ec      	bne.n	800263a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCC_ClockConfig+0x184>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d211      	bcs.n	8002692 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCC_ClockConfig+0x184>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	4393      	bics	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_RCC_ClockConfig+0x184>)
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_RCC_ClockConfig+0x184>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	4013      	ands	r3, r2
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e020      	b.n	80026d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2204      	movs	r2, #4
 8002698:	4013      	ands	r3, r2
 800269a:	d009      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_RCC_ClockConfig+0x190>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026b0:	f000 f820 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026b4:	0001      	movs	r1, r0
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x188>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	220f      	movs	r2, #15
 80026be:	4013      	ands	r3, r2
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x194>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	000a      	movs	r2, r1
 80026c6:	40da      	lsrs	r2, r3
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x198>)
 80026ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fb4b 	bl	8000d68 <HAL_InitTick>
  
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b004      	add	sp, #16
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40021000 	.word	0x40021000
 80026e4:	00001388 	.word	0x00001388
 80026e8:	fffff8ff 	.word	0xfffff8ff
 80026ec:	08003778 	.word	0x08003778
 80026f0:	2000000c 	.word	0x2000000c

080026f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b08f      	sub	sp, #60	; 0x3c
 80026f8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80026fa:	2314      	movs	r3, #20
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002700:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002702:	c313      	stmia	r3!, {r0, r1, r4}
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800270c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800270e:	c313      	stmia	r3!, {r0, r1, r4}
 8002710:	6812      	ldr	r2, [r2, #0]
 8002712:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002718:	2300      	movs	r3, #0
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
 800271c:	2300      	movs	r3, #0
 800271e:	637b      	str	r3, [r7, #52]	; 0x34
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	220c      	movs	r2, #12
 8002732:	4013      	ands	r3, r2
 8002734:	2b04      	cmp	r3, #4
 8002736:	d002      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x4a>
 8002738:	2b08      	cmp	r3, #8
 800273a:	d003      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x50>
 800273c:	e02d      	b.n	800279a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002740:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002742:	e02d      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	0c9b      	lsrs	r3, r3, #18
 8002748:	220f      	movs	r2, #15
 800274a:	4013      	ands	r3, r2
 800274c:	2214      	movs	r2, #20
 800274e:	18ba      	adds	r2, r7, r2
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	220f      	movs	r2, #15
 800275a:	4013      	ands	r3, r2
 800275c:	1d3a      	adds	r2, r7, #4
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	025b      	lsls	r3, r3, #9
 8002768:	4013      	ands	r3, r2
 800276a:	d009      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800276c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800276e:	4812      	ldr	r0, [pc, #72]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002770:	f7fd fcca 	bl	8000108 <__udivsi3>
 8002774:	0003      	movs	r3, r0
 8002776:	001a      	movs	r2, r3
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	4353      	muls	r3, r2
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
 800277e:	e009      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002782:	000a      	movs	r2, r1
 8002784:	0152      	lsls	r2, r2, #5
 8002786:	1a52      	subs	r2, r2, r1
 8002788:	0193      	lsls	r3, r2, #6
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	185b      	adds	r3, r3, r1
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002798:	e002      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800279e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b00f      	add	sp, #60	; 0x3c
 80027a8:	bd90      	pop	{r4, r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	08003758 	.word	0x08003758
 80027b0:	08003768 	.word	0x08003768
 80027b4:	40021000 	.word	0x40021000
 80027b8:	007a1200 	.word	0x007a1200

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <HAL_RCC_GetHCLKFreq+0x10>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	2000000c 	.word	0x2000000c

080027d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80027d4:	f7ff fff2 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027d8:	0001      	movs	r1, r0
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	2207      	movs	r2, #7
 80027e2:	4013      	ands	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027e6:	5cd3      	ldrb	r3, [r2, r3]
 80027e8:	40d9      	lsrs	r1, r3
 80027ea:	000b      	movs	r3, r1
}    
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08003788 	.word	0x08003788

080027fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	025b      	lsls	r3, r3, #9
 8002814:	4013      	ands	r3, r2
 8002816:	d100      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002818:	e08e      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800281a:	2017      	movs	r0, #23
 800281c:	183b      	adds	r3, r7, r0
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002822:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	055b      	lsls	r3, r3, #21
 800282a:	4013      	ands	r3, r2
 800282c:	d110      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	0549      	lsls	r1, r1, #21
 8002838:	430a      	orrs	r2, r1
 800283a:	61da      	str	r2, [r3, #28]
 800283c:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	055b      	lsls	r3, r3, #21
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284a:	183b      	adds	r3, r7, r0
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4013      	ands	r3, r2
 800285a:	d11a      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285c:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0049      	lsls	r1, r1, #1
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286a:	f7fe fac3 	bl	8000df4 <HAL_GetTick>
 800286e:	0003      	movs	r3, r0
 8002870:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	e008      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002874:	f7fe fabe 	bl	8000df4 <HAL_GetTick>
 8002878:	0002      	movs	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e087      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4013      	ands	r3, r2
 8002890:	d0f0      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	23c0      	movs	r3, #192	; 0xc0
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d034      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	23c0      	movs	r3, #192	; 0xc0
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d02c      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4a3b      	ldr	r2, [pc, #236]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	0249      	lsls	r1, r1, #9
 80028c8:	430a      	orrs	r2, r1
 80028ca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028d2:	4936      	ldr	r1, [pc, #216]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028d8:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	4013      	ands	r3, r2
 80028e4:	d013      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe fa85 	bl	8000df4 <HAL_GetTick>
 80028ea:	0003      	movs	r3, r0
 80028ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	e009      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe fa80 	bl	8000df4 <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	4a2d      	ldr	r2, [pc, #180]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e048      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002914:	4013      	ands	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800291e:	430a      	orrs	r2, r1
 8002920:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002922:	2317      	movs	r3, #23
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d105      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002932:	4920      	ldr	r1, [pc, #128]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002934:	400a      	ands	r2, r1
 8002936:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	2203      	movs	r2, #3
 8002948:	4393      	bics	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002952:	430a      	orrs	r2, r1
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2220      	movs	r2, #32
 800295c:	4013      	ands	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	2210      	movs	r2, #16
 8002966:	4393      	bics	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002970:	430a      	orrs	r2, r1
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4013      	ands	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	2240      	movs	r2, #64	; 0x40
 8002986:	4393      	bics	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002990:	430a      	orrs	r2, r1
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b006      	add	sp, #24
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	fffffcff 	.word	0xfffffcff
 80029ac:	fffeffff 	.word	0xfffeffff
 80029b0:	00001388 	.word	0x00001388
 80029b4:	efffffff 	.word	0xefffffff

080029b8 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e081      	b.n	8002ace <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7f5b      	ldrb	r3, [r3, #29]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7fe f8e1 	bl	8000ba4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	22ca      	movs	r2, #202	; 0xca
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2253      	movs	r2, #83	; 0x53
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 faa9 	bl	8002f52 <RTC_EnterInitMode>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	22ff      	movs	r2, #255	; 0xff
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e05b      	b.n	8002ace <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	492d      	ldr	r1, [pc, #180]	; (8002ad8 <HAL_RTC_Init+0x120>)
 8002a22:	400a      	ands	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68d2      	ldr	r2, [r2, #12]
 8002a4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6919      	ldr	r1, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	438a      	bics	r2, r1
 8002a70:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d10e      	bne.n	8002a9c <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 fa3d 	bl	8002f00 <HAL_RTC_WaitForSynchro>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e018      	b.n	8002ace <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	490d      	ldr	r1, [pc, #52]	; (8002adc <HAL_RTC_Init+0x124>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	22ff      	movs	r2, #255	; 0xff
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
  }
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	ff8fffbf 	.word	0xff8fffbf
 8002adc:	fffbffff 	.word	0xfffbffff

08002ae0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	7f1b      	ldrb	r3, [r3, #28]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_RTC_SetTime+0x1c>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0a5      	b.n	8002c48 <HAL_RTC_SetTime+0x168>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2202      	movs	r2, #2
 8002b06:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d125      	bne.n	8002b5a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2240      	movs	r2, #64	; 0x40
 8002b16:	4013      	ands	r3, r2
 8002b18:	d102      	bne.n	8002b20 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 fa40 	bl	8002faa <RTC_ByteToBcd2>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	785b      	ldrb	r3, [r3, #1]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fa39 	bl	8002faa <RTC_ByteToBcd2>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b3c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	789b      	ldrb	r3, [r3, #2]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 fa31 	bl	8002faa <RTC_ByteToBcd2>
 8002b48:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b4a:	0022      	movs	r2, r4
 8002b4c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	78db      	ldrb	r3, [r3, #3]
 8002b52:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e017      	b.n	8002b8a <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2240      	movs	r2, #64	; 0x40
 8002b62:	4013      	ands	r3, r2
 8002b64:	d102      	bne.n	8002b6c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b78:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b7e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	78db      	ldrb	r3, [r3, #3]
 8002b84:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	22ca      	movs	r2, #202	; 0xca
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2253      	movs	r2, #83	; 0x53
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 f9d8 	bl	8002f52 <RTC_EnterInitMode>
 8002ba2:	1e03      	subs	r3, r0, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e044      	b.n	8002c48 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4922      	ldr	r1, [pc, #136]	; (8002c50 <HAL_RTC_SetTime+0x170>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	491f      	ldr	r1, [pc, #124]	; (8002c54 <HAL_RTC_SetTime+0x174>)
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2180      	movs	r1, #128	; 0x80
 8002bfe:	438a      	bics	r2, r1
 8002c00:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2220      	movs	r2, #32
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f975 	bl	8002f00 <HAL_RTC_WaitForSynchro>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	22ff      	movs	r2, #255	; 0xff
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2204      	movs	r2, #4
 8002c26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00a      	b.n	8002c48 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
  }
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b007      	add	sp, #28
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	007f7f7f 	.word	0x007f7f7f
 8002c54:	fffbffff 	.word	0xfffbffff

08002c58 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	045b      	lsls	r3, r3, #17
 8002c7a:	0c5a      	lsrs	r2, r3, #17
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <HAL_RTC_GetTime+0xb8>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	223f      	movs	r2, #63	; 0x3f
 8002c94:	4013      	ands	r3, r2
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	227f      	movs	r2, #127	; 0x7f
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	227f      	movs	r2, #127	; 0x7f
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2240      	movs	r2, #64	; 0x40
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11a      	bne.n	8002d06 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 f989 	bl	8002fec <RTC_Bcd2ToByte>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	001a      	movs	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	785b      	ldrb	r3, [r3, #1]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f980 	bl	8002fec <RTC_Bcd2ToByte>
 8002cec:	0003      	movs	r3, r0
 8002cee:	001a      	movs	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	789b      	ldrb	r3, [r3, #2]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f977 	bl	8002fec <RTC_Bcd2ToByte>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	001a      	movs	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b006      	add	sp, #24
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	007f7f7f 	.word	0x007f7f7f

08002d14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	7f1b      	ldrb	r3, [r3, #28]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_RTC_SetDate+0x1c>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e091      	b.n	8002e54 <HAL_RTC_SetDate+0x140>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10e      	bne.n	8002d60 <HAL_RTC_SetDate+0x4c>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	001a      	movs	r2, r3
 8002d48:	2310      	movs	r3, #16
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d008      	beq.n	8002d60 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2210      	movs	r2, #16
 8002d54:	4393      	bics	r3, r2
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	330a      	adds	r3, #10
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11c      	bne.n	8002da0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	78db      	ldrb	r3, [r3, #3]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 f91d 	bl	8002faa <RTC_ByteToBcd2>
 8002d70:	0003      	movs	r3, r0
 8002d72:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f916 	bl	8002faa <RTC_ByteToBcd2>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d82:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	789b      	ldrb	r3, [r3, #2]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f90e 	bl	8002faa <RTC_ByteToBcd2>
 8002d8e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002d90:	0022      	movs	r2, r4
 8002d92:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e00e      	b.n	8002dbe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	78db      	ldrb	r3, [r3, #3]
 8002da4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	785b      	ldrb	r3, [r3, #1]
 8002daa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002db2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	22ca      	movs	r2, #202	; 0xca
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2253      	movs	r2, #83	; 0x53
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 f8be 	bl	8002f52 <RTC_EnterInitMode>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	22ff      	movs	r2, #255	; 0xff
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2204      	movs	r2, #4
 8002de6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e030      	b.n	8002e54 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4918      	ldr	r1, [pc, #96]	; (8002e5c <HAL_RTC_SetDate+0x148>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	438a      	bics	r2, r1
 8002e0c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2220      	movs	r2, #32
 8002e16:	4013      	ands	r3, r2
 8002e18:	d111      	bne.n	8002e3e <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f86f 	bl	8002f00 <HAL_RTC_WaitForSynchro>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	22ff      	movs	r2, #255	; 0xff
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2204      	movs	r2, #4
 8002e32:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00a      	b.n	8002e54 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	22ff      	movs	r2, #255	; 0xff
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002e52:	2300      	movs	r3, #0
  }
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b007      	add	sp, #28
 8002e5a:	bd90      	pop	{r4, r7, pc}
 8002e5c:	00ffff3f 	.word	0x00ffff3f

08002e60 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a21      	ldr	r2, [pc, #132]	; (8002efc <HAL_RTC_GetDate+0x9c>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	221f      	movs	r2, #31
 8002e8e:	4013      	ands	r3, r2
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	223f      	movs	r2, #63	; 0x3f
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	0b5b      	lsrs	r3, r3, #13
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2207      	movs	r2, #7
 8002eac:	4013      	ands	r3, r2
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11a      	bne.n	8002ef0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	78db      	ldrb	r3, [r3, #3]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f894 	bl	8002fec <RTC_Bcd2ToByte>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 f88b 	bl	8002fec <RTC_Bcd2ToByte>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	001a      	movs	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	789b      	ldrb	r3, [r3, #2]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 f882 	bl	8002fec <RTC_Bcd2ToByte>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	001a      	movs	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b006      	add	sp, #24
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	00ffff3f 	.word	0x00ffff3f

08002f00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	21a0      	movs	r1, #160	; 0xa0
 8002f18:	438a      	bics	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f1c:	f7fd ff6a 	bl	8000df4 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f26:	f7fd ff65 	bl	8000df4 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	23fa      	movs	r3, #250	; 0xfa
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d901      	bls.n	8002f3c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e006      	b.n	8002f4a <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	4013      	ands	r3, r2
 8002f46:	d0ee      	beq.n	8002f26 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	4013      	ands	r3, r2
 8002f68:	d11a      	bne.n	8002fa0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4252      	negs	r2, r2
 8002f72:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002f74:	f7fd ff3e 	bl	8000df4 <HAL_GetTick>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f7c:	e00a      	b.n	8002f94 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f7e:	f7fd ff39 	bl	8000df4 <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	23fa      	movs	r3, #250	; 0xfa
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d901      	bls.n	8002f94 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e006      	b.n	8002fa2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2240      	movs	r2, #64	; 0x40
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d0ee      	beq.n	8002f7e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b004      	add	sp, #16
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	1dfb      	adds	r3, r7, #7
 8002fb4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002fba:	e007      	b.n	8002fcc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	1dfa      	adds	r2, r7, #7
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	3a0a      	subs	r2, #10
 8002fca:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8002fcc:	1dfb      	adds	r3, r7, #7
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	d8f3      	bhi.n	8002fbc <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	1dfb      	adds	r3, r7, #7
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	b2db      	uxtb	r3, r3
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}

08002fec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	b2db      	uxtb	r3, r3
 8003004:	001a      	movs	r2, r3
 8003006:	0013      	movs	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	189b      	adds	r3, r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8003010:	1dfb      	adds	r3, r7, #7
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	220f      	movs	r2, #15
 8003016:	4013      	ands	r3, r2
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	18d3      	adds	r3, r2, r3
 8003020:	b2db      	uxtb	r3, r3
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e044      	b.n	80030c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2274      	movs	r2, #116	; 0x74
 800304a:	2100      	movs	r1, #0
 800304c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0018      	movs	r0, r3
 8003052:	f7fd fdbf 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2224      	movs	r2, #36	; 0x24
 800305a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	438a      	bics	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f830 	bl	80030d4 <UART_SetConfig>
 8003074:	0003      	movs	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e024      	b.n	80030c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 f963 	bl	8003354 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	490d      	ldr	r1, [pc, #52]	; (80030d0 <HAL_UART_Init+0xa4>)
 800309a:	400a      	ands	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	212a      	movs	r1, #42	; 0x2a
 80030aa:	438a      	bics	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 f9fb 	bl	80034bc <UART_CheckIdleState>
 80030c6:	0003      	movs	r3, r0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	ffffb7ff 	.word	0xffffb7ff

080030d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030dc:	231e      	movs	r3, #30
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a8d      	ldr	r2, [pc, #564]	; (8003338 <UART_SetConfig+0x264>)
 8003104:	4013      	ands	r3, r2
 8003106:	0019      	movs	r1, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	430a      	orrs	r2, r1
 8003110:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a88      	ldr	r2, [pc, #544]	; (800333c <UART_SetConfig+0x268>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a7f      	ldr	r2, [pc, #508]	; (8003340 <UART_SetConfig+0x26c>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a7b      	ldr	r2, [pc, #492]	; (8003344 <UART_SetConfig+0x270>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d127      	bne.n	80031aa <UART_SetConfig+0xd6>
 800315a:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <UART_SetConfig+0x274>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	2203      	movs	r2, #3
 8003160:	4013      	ands	r3, r2
 8003162:	2b03      	cmp	r3, #3
 8003164:	d00d      	beq.n	8003182 <UART_SetConfig+0xae>
 8003166:	d81b      	bhi.n	80031a0 <UART_SetConfig+0xcc>
 8003168:	2b02      	cmp	r3, #2
 800316a:	d014      	beq.n	8003196 <UART_SetConfig+0xc2>
 800316c:	d818      	bhi.n	80031a0 <UART_SetConfig+0xcc>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0xa4>
 8003172:	2b01      	cmp	r3, #1
 8003174:	d00a      	beq.n	800318c <UART_SetConfig+0xb8>
 8003176:	e013      	b.n	80031a0 <UART_SetConfig+0xcc>
 8003178:	231f      	movs	r3, #31
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e021      	b.n	80031c6 <UART_SetConfig+0xf2>
 8003182:	231f      	movs	r3, #31
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2202      	movs	r2, #2
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e01c      	b.n	80031c6 <UART_SetConfig+0xf2>
 800318c:	231f      	movs	r3, #31
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2204      	movs	r2, #4
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	e017      	b.n	80031c6 <UART_SetConfig+0xf2>
 8003196:	231f      	movs	r3, #31
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	2208      	movs	r2, #8
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e012      	b.n	80031c6 <UART_SetConfig+0xf2>
 80031a0:	231f      	movs	r3, #31
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2210      	movs	r2, #16
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e00d      	b.n	80031c6 <UART_SetConfig+0xf2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a67      	ldr	r2, [pc, #412]	; (800334c <UART_SetConfig+0x278>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d104      	bne.n	80031be <UART_SetConfig+0xea>
 80031b4:	231f      	movs	r3, #31
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e003      	b.n	80031c6 <UART_SetConfig+0xf2>
 80031be:	231f      	movs	r3, #31
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2210      	movs	r2, #16
 80031c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d15d      	bne.n	800328e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80031d2:	231f      	movs	r3, #31
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d015      	beq.n	8003208 <UART_SetConfig+0x134>
 80031dc:	dc18      	bgt.n	8003210 <UART_SetConfig+0x13c>
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d00d      	beq.n	80031fe <UART_SetConfig+0x12a>
 80031e2:	dc15      	bgt.n	8003210 <UART_SetConfig+0x13c>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <UART_SetConfig+0x11a>
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d005      	beq.n	80031f8 <UART_SetConfig+0x124>
 80031ec:	e010      	b.n	8003210 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ee:	f7ff faef 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 80031f2:	0003      	movs	r3, r0
 80031f4:	61bb      	str	r3, [r7, #24]
        break;
 80031f6:	e012      	b.n	800321e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f8:	4b55      	ldr	r3, [pc, #340]	; (8003350 <UART_SetConfig+0x27c>)
 80031fa:	61bb      	str	r3, [r7, #24]
        break;
 80031fc:	e00f      	b.n	800321e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fe:	f7ff fa79 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8003202:	0003      	movs	r3, r0
 8003204:	61bb      	str	r3, [r7, #24]
        break;
 8003206:	e00a      	b.n	800321e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	61bb      	str	r3, [r7, #24]
        break;
 800320e:	e006      	b.n	800321e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003214:	231e      	movs	r3, #30
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
        break;
 800321c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d100      	bne.n	8003226 <UART_SetConfig+0x152>
 8003224:	e07b      	b.n	800331e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	005a      	lsls	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	18d2      	adds	r2, r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	0019      	movs	r1, r3
 8003238:	0010      	movs	r0, r2
 800323a:	f7fc ff65 	bl	8000108 <__udivsi3>
 800323e:	0003      	movs	r3, r0
 8003240:	b29b      	uxth	r3, r3
 8003242:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b0f      	cmp	r3, #15
 8003248:	d91c      	bls.n	8003284 <UART_SetConfig+0x1b0>
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	025b      	lsls	r3, r3, #9
 8003250:	429a      	cmp	r2, r3
 8003252:	d217      	bcs.n	8003284 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	b29a      	uxth	r2, r3
 8003258:	200e      	movs	r0, #14
 800325a:	183b      	adds	r3, r7, r0
 800325c:	210f      	movs	r1, #15
 800325e:	438a      	bics	r2, r1
 8003260:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	b29b      	uxth	r3, r3
 8003268:	2207      	movs	r2, #7
 800326a:	4013      	ands	r3, r2
 800326c:	b299      	uxth	r1, r3
 800326e:	183b      	adds	r3, r7, r0
 8003270:	183a      	adds	r2, r7, r0
 8003272:	8812      	ldrh	r2, [r2, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	183a      	adds	r2, r7, r0
 800327e:	8812      	ldrh	r2, [r2, #0]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	e04c      	b.n	800331e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003284:	231e      	movs	r3, #30
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e047      	b.n	800331e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800328e:	231f      	movs	r3, #31
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d015      	beq.n	80032c4 <UART_SetConfig+0x1f0>
 8003298:	dc18      	bgt.n	80032cc <UART_SetConfig+0x1f8>
 800329a:	2b04      	cmp	r3, #4
 800329c:	d00d      	beq.n	80032ba <UART_SetConfig+0x1e6>
 800329e:	dc15      	bgt.n	80032cc <UART_SetConfig+0x1f8>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <UART_SetConfig+0x1d6>
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d005      	beq.n	80032b4 <UART_SetConfig+0x1e0>
 80032a8:	e010      	b.n	80032cc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032aa:	f7ff fa91 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 80032ae:	0003      	movs	r3, r0
 80032b0:	61bb      	str	r3, [r7, #24]
        break;
 80032b2:	e012      	b.n	80032da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b4:	4b26      	ldr	r3, [pc, #152]	; (8003350 <UART_SetConfig+0x27c>)
 80032b6:	61bb      	str	r3, [r7, #24]
        break;
 80032b8:	e00f      	b.n	80032da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ba:	f7ff fa1b 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80032be:	0003      	movs	r3, r0
 80032c0:	61bb      	str	r3, [r7, #24]
        break;
 80032c2:	e00a      	b.n	80032da <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	61bb      	str	r3, [r7, #24]
        break;
 80032ca:	e006      	b.n	80032da <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032d0:	231e      	movs	r3, #30
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
        break;
 80032d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01e      	beq.n	800331e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	085a      	lsrs	r2, r3, #1
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	18d2      	adds	r2, r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0019      	movs	r1, r3
 80032f0:	0010      	movs	r0, r2
 80032f2:	f7fc ff09 	bl	8000108 <__udivsi3>
 80032f6:	0003      	movs	r3, r0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	d909      	bls.n	8003316 <UART_SetConfig+0x242>
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	025b      	lsls	r3, r3, #9
 8003308:	429a      	cmp	r2, r3
 800330a:	d204      	bcs.n	8003316 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	e003      	b.n	800331e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003316:	231e      	movs	r3, #30
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800332a:	231e      	movs	r3, #30
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	781b      	ldrb	r3, [r3, #0]
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b008      	add	sp, #32
 8003336:	bd80      	pop	{r7, pc}
 8003338:	ffff69f3 	.word	0xffff69f3
 800333c:	ffffcfff 	.word	0xffffcfff
 8003340:	fffff4ff 	.word	0xfffff4ff
 8003344:	40013800 	.word	0x40013800
 8003348:	40021000 	.word	0x40021000
 800334c:	40004400 	.word	0x40004400
 8003350:	007a1200 	.word	0x007a1200

08003354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2201      	movs	r2, #1
 8003362:	4013      	ands	r3, r2
 8003364:	d00b      	beq.n	800337e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a4a      	ldr	r2, [pc, #296]	; (8003498 <UART_AdvFeatureConfig+0x144>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d00b      	beq.n	80033a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4a43      	ldr	r2, [pc, #268]	; (800349c <UART_AdvFeatureConfig+0x148>)
 8003390:	4013      	ands	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2204      	movs	r2, #4
 80033a6:	4013      	ands	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <UART_AdvFeatureConfig+0x14c>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2208      	movs	r2, #8
 80033c8:	4013      	ands	r3, r2
 80033ca:	d00b      	beq.n	80033e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a34      	ldr	r2, [pc, #208]	; (80034a4 <UART_AdvFeatureConfig+0x150>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2210      	movs	r2, #16
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00b      	beq.n	8003406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	; (80034a8 <UART_AdvFeatureConfig+0x154>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2220      	movs	r2, #32
 800340c:	4013      	ands	r3, r2
 800340e:	d00b      	beq.n	8003428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4a25      	ldr	r2, [pc, #148]	; (80034ac <UART_AdvFeatureConfig+0x158>)
 8003418:	4013      	ands	r3, r2
 800341a:	0019      	movs	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	4013      	ands	r3, r2
 8003430:	d01d      	beq.n	800346e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <UART_AdvFeatureConfig+0x15c>)
 800343a:	4013      	ands	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344e:	2380      	movs	r3, #128	; 0x80
 8003450:	035b      	lsls	r3, r3, #13
 8003452:	429a      	cmp	r2, r3
 8003454:	d10b      	bne.n	800346e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <UART_AdvFeatureConfig+0x160>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	4013      	ands	r3, r2
 8003476:	d00b      	beq.n	8003490 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <UART_AdvFeatureConfig+0x164>)
 8003480:	4013      	ands	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}
 8003498:	fffdffff 	.word	0xfffdffff
 800349c:	fffeffff 	.word	0xfffeffff
 80034a0:	fffbffff 	.word	0xfffbffff
 80034a4:	ffff7fff 	.word	0xffff7fff
 80034a8:	ffffefff 	.word	0xffffefff
 80034ac:	ffffdfff 	.word	0xffffdfff
 80034b0:	ffefffff 	.word	0xffefffff
 80034b4:	ff9fffff 	.word	0xff9fffff
 80034b8:	fff7ffff 	.word	0xfff7ffff

080034bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	; 0x80
 80034c8:	2100      	movs	r1, #0
 80034ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034cc:	f7fd fc92 	bl	8000df4 <HAL_GetTick>
 80034d0:	0003      	movs	r3, r0
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2208      	movs	r2, #8
 80034dc:	4013      	ands	r3, r2
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d10c      	bne.n	80034fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	0391      	lsls	r1, r2, #14
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4a17      	ldr	r2, [pc, #92]	; (8003548 <UART_CheckIdleState+0x8c>)
 80034ec:	9200      	str	r2, [sp, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f000 f82c 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d001      	beq.n	80034fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e021      	b.n	8003540 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2204      	movs	r2, #4
 8003504:	4013      	ands	r3, r2
 8003506:	2b04      	cmp	r3, #4
 8003508:	d10c      	bne.n	8003524 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	03d1      	lsls	r1, r2, #15
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <UART_CheckIdleState+0x8c>)
 8003514:	9200      	str	r2, [sp, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	f000 f818 	bl	800354c <UART_WaitOnFlagUntilTimeout>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d001      	beq.n	8003524 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e00d      	b.n	8003540 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2274      	movs	r2, #116	; 0x74
 800353a:	2100      	movs	r1, #0
 800353c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}
 8003548:	01ffffff 	.word	0x01ffffff

0800354c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b094      	sub	sp, #80	; 0x50
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	1dfb      	adds	r3, r7, #7
 800355a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355c:	e0a3      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003560:	3301      	adds	r3, #1
 8003562:	d100      	bne.n	8003566 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003564:	e09f      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fd fc45 	bl	8000df4 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <UART_WaitOnFlagUntilTimeout+0x30>
 8003576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003578:	2b00      	cmp	r3, #0
 800357a:	d13d      	bne.n	80035f8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003584:	647b      	str	r3, [r7, #68]	; 0x44
 8003586:	2301      	movs	r3, #1
 8003588:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	494c      	ldr	r1, [pc, #304]	; (80036d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800359e:	400a      	ands	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ae:	f3ef 8310 	mrs	r3, PRIMASK
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
 80035b8:	2301      	movs	r3, #1
 80035ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	f383 8810 	msr	PRIMASK, r3
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	438a      	bics	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	f383 8810 	msr	PRIMASK, r3
}
 80035de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2274      	movs	r2, #116	; 0x74
 80035f0:	2100      	movs	r1, #0
 80035f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e067      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2204      	movs	r2, #4
 8003600:	4013      	ands	r3, r2
 8003602:	d050      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	401a      	ands	r2, r3
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	429a      	cmp	r2, r3
 8003616:	d146      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	613b      	str	r3, [r7, #16]
  return(result);
 8003628:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4923      	ldr	r1, [pc, #140]	; (80036d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003644:	400a      	ands	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f383 8810 	msr	PRIMASK, r3
}
 8003652:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	61fb      	str	r3, [r7, #28]
  return(result);
 800365a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	64bb      	str	r3, [r7, #72]	; 0x48
 800365e:	2301      	movs	r3, #1
 8003660:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2101      	movs	r1, #1
 8003676:	438a      	bics	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2280      	movs	r2, #128	; 0x80
 8003696:	2120      	movs	r1, #32
 8003698:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2274      	movs	r2, #116	; 0x74
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e010      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	425a      	negs	r2, r3
 80036b6:	4153      	adcs	r3, r2
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	001a      	movs	r2, r3
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d100      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80036c4:	e74b      	b.n	800355e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b014      	add	sp, #80	; 0x50
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fffffe5f 	.word	0xfffffe5f

080036d4 <__libc_init_array>:
 80036d4:	b570      	push	{r4, r5, r6, lr}
 80036d6:	2600      	movs	r6, #0
 80036d8:	4d0c      	ldr	r5, [pc, #48]	; (800370c <__libc_init_array+0x38>)
 80036da:	4c0d      	ldr	r4, [pc, #52]	; (8003710 <__libc_init_array+0x3c>)
 80036dc:	1b64      	subs	r4, r4, r5
 80036de:	10a4      	asrs	r4, r4, #2
 80036e0:	42a6      	cmp	r6, r4
 80036e2:	d109      	bne.n	80036f8 <__libc_init_array+0x24>
 80036e4:	2600      	movs	r6, #0
 80036e6:	f000 f82b 	bl	8003740 <_init>
 80036ea:	4d0a      	ldr	r5, [pc, #40]	; (8003714 <__libc_init_array+0x40>)
 80036ec:	4c0a      	ldr	r4, [pc, #40]	; (8003718 <__libc_init_array+0x44>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	42a6      	cmp	r6, r4
 80036f4:	d105      	bne.n	8003702 <__libc_init_array+0x2e>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	00b3      	lsls	r3, r6, #2
 80036fa:	58eb      	ldr	r3, [r5, r3]
 80036fc:	4798      	blx	r3
 80036fe:	3601      	adds	r6, #1
 8003700:	e7ee      	b.n	80036e0 <__libc_init_array+0xc>
 8003702:	00b3      	lsls	r3, r6, #2
 8003704:	58eb      	ldr	r3, [r5, r3]
 8003706:	4798      	blx	r3
 8003708:	3601      	adds	r6, #1
 800370a:	e7f2      	b.n	80036f2 <__libc_init_array+0x1e>
 800370c:	08003790 	.word	0x08003790
 8003710:	08003790 	.word	0x08003790
 8003714:	08003790 	.word	0x08003790
 8003718:	08003794 	.word	0x08003794

0800371c <memcpy>:
 800371c:	2300      	movs	r3, #0
 800371e:	b510      	push	{r4, lr}
 8003720:	429a      	cmp	r2, r3
 8003722:	d100      	bne.n	8003726 <memcpy+0xa>
 8003724:	bd10      	pop	{r4, pc}
 8003726:	5ccc      	ldrb	r4, [r1, r3]
 8003728:	54c4      	strb	r4, [r0, r3]
 800372a:	3301      	adds	r3, #1
 800372c:	e7f8      	b.n	8003720 <memcpy+0x4>

0800372e <memset>:
 800372e:	0003      	movs	r3, r0
 8003730:	1882      	adds	r2, r0, r2
 8003732:	4293      	cmp	r3, r2
 8003734:	d100      	bne.n	8003738 <memset+0xa>
 8003736:	4770      	bx	lr
 8003738:	7019      	strb	r1, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	e7f9      	b.n	8003732 <memset+0x4>
	...

08003740 <_init>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr

0800374c <_fini>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr
