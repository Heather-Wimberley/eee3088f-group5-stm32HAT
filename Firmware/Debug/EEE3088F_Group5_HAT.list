
EEE3088F_Group5_HAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007850  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a34  08007a34  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007a34  08007a34  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a34  08007a34  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a34  08007a34  00017a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a38  08007a38  00017a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08007a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  200000dc  08007b18  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08007b18  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed58  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297c  00000000  00000000  0002ee5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  000317d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00032478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014591  00000000  00000000  00032fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ee2  00000000  00000000  00047551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000714c1  00000000  00000000  00058433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c98f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd0  00000000  00000000  000c9944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000dc 	.word	0x200000dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080078f8 	.word	0x080078f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000e0 	.word	0x200000e0
 8000104:	080078f8 	.word	0x080078f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_f2uiz>:
 80003f4:	219e      	movs	r1, #158	; 0x9e
 80003f6:	b510      	push	{r4, lr}
 80003f8:	05c9      	lsls	r1, r1, #23
 80003fa:	1c04      	adds	r4, r0, #0
 80003fc:	f000 feb4 	bl	8001168 <__aeabi_fcmpge>
 8000400:	2800      	cmp	r0, #0
 8000402:	d103      	bne.n	800040c <__aeabi_f2uiz+0x18>
 8000404:	1c20      	adds	r0, r4, #0
 8000406:	f000 fae1 	bl	80009cc <__aeabi_f2iz>
 800040a:	bd10      	pop	{r4, pc}
 800040c:	219e      	movs	r1, #158	; 0x9e
 800040e:	1c20      	adds	r0, r4, #0
 8000410:	05c9      	lsls	r1, r1, #23
 8000412:	f000 f92d 	bl	8000670 <__aeabi_fsub>
 8000416:	f000 fad9 	bl	80009cc <__aeabi_f2iz>
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	061b      	lsls	r3, r3, #24
 800041e:	469c      	mov	ip, r3
 8000420:	4460      	add	r0, ip
 8000422:	e7f2      	b.n	800040a <__aeabi_f2uiz+0x16>

08000424 <__aeabi_fmul>:
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	464f      	mov	r7, r9
 8000428:	4646      	mov	r6, r8
 800042a:	46d6      	mov	lr, sl
 800042c:	0244      	lsls	r4, r0, #9
 800042e:	0045      	lsls	r5, r0, #1
 8000430:	b5c0      	push	{r6, r7, lr}
 8000432:	0a64      	lsrs	r4, r4, #9
 8000434:	1c0f      	adds	r7, r1, #0
 8000436:	0e2d      	lsrs	r5, r5, #24
 8000438:	0fc6      	lsrs	r6, r0, #31
 800043a:	2d00      	cmp	r5, #0
 800043c:	d100      	bne.n	8000440 <__aeabi_fmul+0x1c>
 800043e:	e08d      	b.n	800055c <__aeabi_fmul+0x138>
 8000440:	2dff      	cmp	r5, #255	; 0xff
 8000442:	d100      	bne.n	8000446 <__aeabi_fmul+0x22>
 8000444:	e092      	b.n	800056c <__aeabi_fmul+0x148>
 8000446:	2300      	movs	r3, #0
 8000448:	2080      	movs	r0, #128	; 0x80
 800044a:	4699      	mov	r9, r3
 800044c:	469a      	mov	sl, r3
 800044e:	00e4      	lsls	r4, r4, #3
 8000450:	04c0      	lsls	r0, r0, #19
 8000452:	4304      	orrs	r4, r0
 8000454:	3d7f      	subs	r5, #127	; 0x7f
 8000456:	0278      	lsls	r0, r7, #9
 8000458:	0a43      	lsrs	r3, r0, #9
 800045a:	4698      	mov	r8, r3
 800045c:	007b      	lsls	r3, r7, #1
 800045e:	0e1b      	lsrs	r3, r3, #24
 8000460:	0fff      	lsrs	r7, r7, #31
 8000462:	2b00      	cmp	r3, #0
 8000464:	d100      	bne.n	8000468 <__aeabi_fmul+0x44>
 8000466:	e070      	b.n	800054a <__aeabi_fmul+0x126>
 8000468:	2bff      	cmp	r3, #255	; 0xff
 800046a:	d100      	bne.n	800046e <__aeabi_fmul+0x4a>
 800046c:	e086      	b.n	800057c <__aeabi_fmul+0x158>
 800046e:	4642      	mov	r2, r8
 8000470:	00d0      	lsls	r0, r2, #3
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	3b7f      	subs	r3, #127	; 0x7f
 8000476:	18ed      	adds	r5, r5, r3
 8000478:	2300      	movs	r3, #0
 800047a:	04d2      	lsls	r2, r2, #19
 800047c:	4302      	orrs	r2, r0
 800047e:	4690      	mov	r8, r2
 8000480:	469c      	mov	ip, r3
 8000482:	0031      	movs	r1, r6
 8000484:	464b      	mov	r3, r9
 8000486:	4079      	eors	r1, r7
 8000488:	1c68      	adds	r0, r5, #1
 800048a:	2b0f      	cmp	r3, #15
 800048c:	d81c      	bhi.n	80004c8 <__aeabi_fmul+0xa4>
 800048e:	4a76      	ldr	r2, [pc, #472]	; (8000668 <__aeabi_fmul+0x244>)
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	58d3      	ldr	r3, [r2, r3]
 8000494:	469f      	mov	pc, r3
 8000496:	0039      	movs	r1, r7
 8000498:	4644      	mov	r4, r8
 800049a:	46e2      	mov	sl, ip
 800049c:	4653      	mov	r3, sl
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d00f      	beq.n	80004c2 <__aeabi_fmul+0x9e>
 80004a2:	2b03      	cmp	r3, #3
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fmul+0x84>
 80004a6:	e0d7      	b.n	8000658 <__aeabi_fmul+0x234>
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d137      	bne.n	800051c <__aeabi_fmul+0xf8>
 80004ac:	2000      	movs	r0, #0
 80004ae:	2400      	movs	r4, #0
 80004b0:	05c0      	lsls	r0, r0, #23
 80004b2:	4320      	orrs	r0, r4
 80004b4:	07c9      	lsls	r1, r1, #31
 80004b6:	4308      	orrs	r0, r1
 80004b8:	bce0      	pop	{r5, r6, r7}
 80004ba:	46ba      	mov	sl, r7
 80004bc:	46b1      	mov	r9, r6
 80004be:	46a8      	mov	r8, r5
 80004c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c2:	20ff      	movs	r0, #255	; 0xff
 80004c4:	2400      	movs	r4, #0
 80004c6:	e7f3      	b.n	80004b0 <__aeabi_fmul+0x8c>
 80004c8:	0c26      	lsrs	r6, r4, #16
 80004ca:	0424      	lsls	r4, r4, #16
 80004cc:	0c22      	lsrs	r2, r4, #16
 80004ce:	4644      	mov	r4, r8
 80004d0:	0424      	lsls	r4, r4, #16
 80004d2:	0c24      	lsrs	r4, r4, #16
 80004d4:	4643      	mov	r3, r8
 80004d6:	0027      	movs	r7, r4
 80004d8:	0c1b      	lsrs	r3, r3, #16
 80004da:	4357      	muls	r7, r2
 80004dc:	4374      	muls	r4, r6
 80004de:	435a      	muls	r2, r3
 80004e0:	435e      	muls	r6, r3
 80004e2:	1912      	adds	r2, r2, r4
 80004e4:	0c3b      	lsrs	r3, r7, #16
 80004e6:	189b      	adds	r3, r3, r2
 80004e8:	429c      	cmp	r4, r3
 80004ea:	d903      	bls.n	80004f4 <__aeabi_fmul+0xd0>
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	0252      	lsls	r2, r2, #9
 80004f0:	4694      	mov	ip, r2
 80004f2:	4466      	add	r6, ip
 80004f4:	043f      	lsls	r7, r7, #16
 80004f6:	041a      	lsls	r2, r3, #16
 80004f8:	0c3f      	lsrs	r7, r7, #16
 80004fa:	19d2      	adds	r2, r2, r7
 80004fc:	0194      	lsls	r4, r2, #6
 80004fe:	1e67      	subs	r7, r4, #1
 8000500:	41bc      	sbcs	r4, r7
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	0e92      	lsrs	r2, r2, #26
 8000506:	199b      	adds	r3, r3, r6
 8000508:	4314      	orrs	r4, r2
 800050a:	019b      	lsls	r3, r3, #6
 800050c:	431c      	orrs	r4, r3
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	d400      	bmi.n	8000514 <__aeabi_fmul+0xf0>
 8000512:	e09b      	b.n	800064c <__aeabi_fmul+0x228>
 8000514:	2301      	movs	r3, #1
 8000516:	0862      	lsrs	r2, r4, #1
 8000518:	401c      	ands	r4, r3
 800051a:	4314      	orrs	r4, r2
 800051c:	0002      	movs	r2, r0
 800051e:	327f      	adds	r2, #127	; 0x7f
 8000520:	2a00      	cmp	r2, #0
 8000522:	dd64      	ble.n	80005ee <__aeabi_fmul+0x1ca>
 8000524:	0763      	lsls	r3, r4, #29
 8000526:	d004      	beq.n	8000532 <__aeabi_fmul+0x10e>
 8000528:	230f      	movs	r3, #15
 800052a:	4023      	ands	r3, r4
 800052c:	2b04      	cmp	r3, #4
 800052e:	d000      	beq.n	8000532 <__aeabi_fmul+0x10e>
 8000530:	3404      	adds	r4, #4
 8000532:	0123      	lsls	r3, r4, #4
 8000534:	d503      	bpl.n	800053e <__aeabi_fmul+0x11a>
 8000536:	0002      	movs	r2, r0
 8000538:	4b4c      	ldr	r3, [pc, #304]	; (800066c <__aeabi_fmul+0x248>)
 800053a:	3280      	adds	r2, #128	; 0x80
 800053c:	401c      	ands	r4, r3
 800053e:	2afe      	cmp	r2, #254	; 0xfe
 8000540:	dcbf      	bgt.n	80004c2 <__aeabi_fmul+0x9e>
 8000542:	01a4      	lsls	r4, r4, #6
 8000544:	0a64      	lsrs	r4, r4, #9
 8000546:	b2d0      	uxtb	r0, r2
 8000548:	e7b2      	b.n	80004b0 <__aeabi_fmul+0x8c>
 800054a:	4643      	mov	r3, r8
 800054c:	2b00      	cmp	r3, #0
 800054e:	d13d      	bne.n	80005cc <__aeabi_fmul+0x1a8>
 8000550:	464a      	mov	r2, r9
 8000552:	3301      	adds	r3, #1
 8000554:	431a      	orrs	r2, r3
 8000556:	4691      	mov	r9, r2
 8000558:	469c      	mov	ip, r3
 800055a:	e792      	b.n	8000482 <__aeabi_fmul+0x5e>
 800055c:	2c00      	cmp	r4, #0
 800055e:	d129      	bne.n	80005b4 <__aeabi_fmul+0x190>
 8000560:	2304      	movs	r3, #4
 8000562:	4699      	mov	r9, r3
 8000564:	3b03      	subs	r3, #3
 8000566:	2500      	movs	r5, #0
 8000568:	469a      	mov	sl, r3
 800056a:	e774      	b.n	8000456 <__aeabi_fmul+0x32>
 800056c:	2c00      	cmp	r4, #0
 800056e:	d11b      	bne.n	80005a8 <__aeabi_fmul+0x184>
 8000570:	2308      	movs	r3, #8
 8000572:	4699      	mov	r9, r3
 8000574:	3b06      	subs	r3, #6
 8000576:	25ff      	movs	r5, #255	; 0xff
 8000578:	469a      	mov	sl, r3
 800057a:	e76c      	b.n	8000456 <__aeabi_fmul+0x32>
 800057c:	4643      	mov	r3, r8
 800057e:	35ff      	adds	r5, #255	; 0xff
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10b      	bne.n	800059c <__aeabi_fmul+0x178>
 8000584:	2302      	movs	r3, #2
 8000586:	464a      	mov	r2, r9
 8000588:	431a      	orrs	r2, r3
 800058a:	4691      	mov	r9, r2
 800058c:	469c      	mov	ip, r3
 800058e:	e778      	b.n	8000482 <__aeabi_fmul+0x5e>
 8000590:	4653      	mov	r3, sl
 8000592:	0031      	movs	r1, r6
 8000594:	2b02      	cmp	r3, #2
 8000596:	d000      	beq.n	800059a <__aeabi_fmul+0x176>
 8000598:	e783      	b.n	80004a2 <__aeabi_fmul+0x7e>
 800059a:	e792      	b.n	80004c2 <__aeabi_fmul+0x9e>
 800059c:	2303      	movs	r3, #3
 800059e:	464a      	mov	r2, r9
 80005a0:	431a      	orrs	r2, r3
 80005a2:	4691      	mov	r9, r2
 80005a4:	469c      	mov	ip, r3
 80005a6:	e76c      	b.n	8000482 <__aeabi_fmul+0x5e>
 80005a8:	230c      	movs	r3, #12
 80005aa:	4699      	mov	r9, r3
 80005ac:	3b09      	subs	r3, #9
 80005ae:	25ff      	movs	r5, #255	; 0xff
 80005b0:	469a      	mov	sl, r3
 80005b2:	e750      	b.n	8000456 <__aeabi_fmul+0x32>
 80005b4:	0020      	movs	r0, r4
 80005b6:	f000 fde1 	bl	800117c <__clzsi2>
 80005ba:	2576      	movs	r5, #118	; 0x76
 80005bc:	1f43      	subs	r3, r0, #5
 80005be:	409c      	lsls	r4, r3
 80005c0:	2300      	movs	r3, #0
 80005c2:	426d      	negs	r5, r5
 80005c4:	4699      	mov	r9, r3
 80005c6:	469a      	mov	sl, r3
 80005c8:	1a2d      	subs	r5, r5, r0
 80005ca:	e744      	b.n	8000456 <__aeabi_fmul+0x32>
 80005cc:	4640      	mov	r0, r8
 80005ce:	f000 fdd5 	bl	800117c <__clzsi2>
 80005d2:	4642      	mov	r2, r8
 80005d4:	1f43      	subs	r3, r0, #5
 80005d6:	409a      	lsls	r2, r3
 80005d8:	2300      	movs	r3, #0
 80005da:	1a2d      	subs	r5, r5, r0
 80005dc:	4690      	mov	r8, r2
 80005de:	469c      	mov	ip, r3
 80005e0:	3d76      	subs	r5, #118	; 0x76
 80005e2:	e74e      	b.n	8000482 <__aeabi_fmul+0x5e>
 80005e4:	2480      	movs	r4, #128	; 0x80
 80005e6:	2100      	movs	r1, #0
 80005e8:	20ff      	movs	r0, #255	; 0xff
 80005ea:	03e4      	lsls	r4, r4, #15
 80005ec:	e760      	b.n	80004b0 <__aeabi_fmul+0x8c>
 80005ee:	2301      	movs	r3, #1
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	2b1b      	cmp	r3, #27
 80005f4:	dd00      	ble.n	80005f8 <__aeabi_fmul+0x1d4>
 80005f6:	e759      	b.n	80004ac <__aeabi_fmul+0x88>
 80005f8:	0022      	movs	r2, r4
 80005fa:	309e      	adds	r0, #158	; 0x9e
 80005fc:	40da      	lsrs	r2, r3
 80005fe:	4084      	lsls	r4, r0
 8000600:	0013      	movs	r3, r2
 8000602:	1e62      	subs	r2, r4, #1
 8000604:	4194      	sbcs	r4, r2
 8000606:	431c      	orrs	r4, r3
 8000608:	0763      	lsls	r3, r4, #29
 800060a:	d004      	beq.n	8000616 <__aeabi_fmul+0x1f2>
 800060c:	230f      	movs	r3, #15
 800060e:	4023      	ands	r3, r4
 8000610:	2b04      	cmp	r3, #4
 8000612:	d000      	beq.n	8000616 <__aeabi_fmul+0x1f2>
 8000614:	3404      	adds	r4, #4
 8000616:	0163      	lsls	r3, r4, #5
 8000618:	d51a      	bpl.n	8000650 <__aeabi_fmul+0x22c>
 800061a:	2001      	movs	r0, #1
 800061c:	2400      	movs	r4, #0
 800061e:	e747      	b.n	80004b0 <__aeabi_fmul+0x8c>
 8000620:	2080      	movs	r0, #128	; 0x80
 8000622:	03c0      	lsls	r0, r0, #15
 8000624:	4204      	tst	r4, r0
 8000626:	d009      	beq.n	800063c <__aeabi_fmul+0x218>
 8000628:	4643      	mov	r3, r8
 800062a:	4203      	tst	r3, r0
 800062c:	d106      	bne.n	800063c <__aeabi_fmul+0x218>
 800062e:	4644      	mov	r4, r8
 8000630:	4304      	orrs	r4, r0
 8000632:	0264      	lsls	r4, r4, #9
 8000634:	0039      	movs	r1, r7
 8000636:	20ff      	movs	r0, #255	; 0xff
 8000638:	0a64      	lsrs	r4, r4, #9
 800063a:	e739      	b.n	80004b0 <__aeabi_fmul+0x8c>
 800063c:	2080      	movs	r0, #128	; 0x80
 800063e:	03c0      	lsls	r0, r0, #15
 8000640:	4304      	orrs	r4, r0
 8000642:	0264      	lsls	r4, r4, #9
 8000644:	0031      	movs	r1, r6
 8000646:	20ff      	movs	r0, #255	; 0xff
 8000648:	0a64      	lsrs	r4, r4, #9
 800064a:	e731      	b.n	80004b0 <__aeabi_fmul+0x8c>
 800064c:	0028      	movs	r0, r5
 800064e:	e765      	b.n	800051c <__aeabi_fmul+0xf8>
 8000650:	01a4      	lsls	r4, r4, #6
 8000652:	2000      	movs	r0, #0
 8000654:	0a64      	lsrs	r4, r4, #9
 8000656:	e72b      	b.n	80004b0 <__aeabi_fmul+0x8c>
 8000658:	2080      	movs	r0, #128	; 0x80
 800065a:	03c0      	lsls	r0, r0, #15
 800065c:	4304      	orrs	r4, r0
 800065e:	0264      	lsls	r4, r4, #9
 8000660:	20ff      	movs	r0, #255	; 0xff
 8000662:	0a64      	lsrs	r4, r4, #9
 8000664:	e724      	b.n	80004b0 <__aeabi_fmul+0x8c>
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	08007930 	.word	0x08007930
 800066c:	f7ffffff 	.word	0xf7ffffff

08000670 <__aeabi_fsub>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	46ce      	mov	lr, r9
 8000674:	4647      	mov	r7, r8
 8000676:	0243      	lsls	r3, r0, #9
 8000678:	0a5b      	lsrs	r3, r3, #9
 800067a:	024e      	lsls	r6, r1, #9
 800067c:	00da      	lsls	r2, r3, #3
 800067e:	4694      	mov	ip, r2
 8000680:	0a72      	lsrs	r2, r6, #9
 8000682:	4691      	mov	r9, r2
 8000684:	0045      	lsls	r5, r0, #1
 8000686:	004a      	lsls	r2, r1, #1
 8000688:	b580      	push	{r7, lr}
 800068a:	0e2d      	lsrs	r5, r5, #24
 800068c:	001f      	movs	r7, r3
 800068e:	0fc4      	lsrs	r4, r0, #31
 8000690:	0e12      	lsrs	r2, r2, #24
 8000692:	0fc9      	lsrs	r1, r1, #31
 8000694:	09b6      	lsrs	r6, r6, #6
 8000696:	2aff      	cmp	r2, #255	; 0xff
 8000698:	d05b      	beq.n	8000752 <__aeabi_fsub+0xe2>
 800069a:	2001      	movs	r0, #1
 800069c:	4041      	eors	r1, r0
 800069e:	428c      	cmp	r4, r1
 80006a0:	d039      	beq.n	8000716 <__aeabi_fsub+0xa6>
 80006a2:	1aa8      	subs	r0, r5, r2
 80006a4:	2800      	cmp	r0, #0
 80006a6:	dd5a      	ble.n	800075e <__aeabi_fsub+0xee>
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d06a      	beq.n	8000782 <__aeabi_fsub+0x112>
 80006ac:	2dff      	cmp	r5, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fsub+0x42>
 80006b0:	e0d9      	b.n	8000866 <__aeabi_fsub+0x1f6>
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	04d2      	lsls	r2, r2, #19
 80006b6:	4316      	orrs	r6, r2
 80006b8:	281b      	cmp	r0, #27
 80006ba:	dc00      	bgt.n	80006be <__aeabi_fsub+0x4e>
 80006bc:	e0e9      	b.n	8000892 <__aeabi_fsub+0x222>
 80006be:	2001      	movs	r0, #1
 80006c0:	4663      	mov	r3, ip
 80006c2:	1a18      	subs	r0, r3, r0
 80006c4:	0143      	lsls	r3, r0, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fsub+0x5a>
 80006c8:	e0b4      	b.n	8000834 <__aeabi_fsub+0x1c4>
 80006ca:	0180      	lsls	r0, r0, #6
 80006cc:	0987      	lsrs	r7, r0, #6
 80006ce:	0038      	movs	r0, r7
 80006d0:	f000 fd54 	bl	800117c <__clzsi2>
 80006d4:	3805      	subs	r0, #5
 80006d6:	4087      	lsls	r7, r0
 80006d8:	4285      	cmp	r5, r0
 80006da:	dc00      	bgt.n	80006de <__aeabi_fsub+0x6e>
 80006dc:	e0cc      	b.n	8000878 <__aeabi_fsub+0x208>
 80006de:	1a2d      	subs	r5, r5, r0
 80006e0:	48b5      	ldr	r0, [pc, #724]	; (80009b8 <__aeabi_fsub+0x348>)
 80006e2:	4038      	ands	r0, r7
 80006e4:	0743      	lsls	r3, r0, #29
 80006e6:	d004      	beq.n	80006f2 <__aeabi_fsub+0x82>
 80006e8:	230f      	movs	r3, #15
 80006ea:	4003      	ands	r3, r0
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fsub+0x82>
 80006f0:	3004      	adds	r0, #4
 80006f2:	0143      	lsls	r3, r0, #5
 80006f4:	d400      	bmi.n	80006f8 <__aeabi_fsub+0x88>
 80006f6:	e0a0      	b.n	800083a <__aeabi_fsub+0x1ca>
 80006f8:	1c6a      	adds	r2, r5, #1
 80006fa:	2dfe      	cmp	r5, #254	; 0xfe
 80006fc:	d100      	bne.n	8000700 <__aeabi_fsub+0x90>
 80006fe:	e08d      	b.n	800081c <__aeabi_fsub+0x1ac>
 8000700:	0180      	lsls	r0, r0, #6
 8000702:	0a47      	lsrs	r7, r0, #9
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	05d0      	lsls	r0, r2, #23
 8000708:	4338      	orrs	r0, r7
 800070a:	07e4      	lsls	r4, r4, #31
 800070c:	4320      	orrs	r0, r4
 800070e:	bcc0      	pop	{r6, r7}
 8000710:	46b9      	mov	r9, r7
 8000712:	46b0      	mov	r8, r6
 8000714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000716:	1aa8      	subs	r0, r5, r2
 8000718:	4680      	mov	r8, r0
 800071a:	2800      	cmp	r0, #0
 800071c:	dd45      	ble.n	80007aa <__aeabi_fsub+0x13a>
 800071e:	2a00      	cmp	r2, #0
 8000720:	d070      	beq.n	8000804 <__aeabi_fsub+0x194>
 8000722:	2dff      	cmp	r5, #255	; 0xff
 8000724:	d100      	bne.n	8000728 <__aeabi_fsub+0xb8>
 8000726:	e09e      	b.n	8000866 <__aeabi_fsub+0x1f6>
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	04db      	lsls	r3, r3, #19
 800072c:	431e      	orrs	r6, r3
 800072e:	4643      	mov	r3, r8
 8000730:	2b1b      	cmp	r3, #27
 8000732:	dc00      	bgt.n	8000736 <__aeabi_fsub+0xc6>
 8000734:	e0d2      	b.n	80008dc <__aeabi_fsub+0x26c>
 8000736:	2001      	movs	r0, #1
 8000738:	4460      	add	r0, ip
 800073a:	0143      	lsls	r3, r0, #5
 800073c:	d57a      	bpl.n	8000834 <__aeabi_fsub+0x1c4>
 800073e:	3501      	adds	r5, #1
 8000740:	2dff      	cmp	r5, #255	; 0xff
 8000742:	d06b      	beq.n	800081c <__aeabi_fsub+0x1ac>
 8000744:	2301      	movs	r3, #1
 8000746:	4a9d      	ldr	r2, [pc, #628]	; (80009bc <__aeabi_fsub+0x34c>)
 8000748:	4003      	ands	r3, r0
 800074a:	0840      	lsrs	r0, r0, #1
 800074c:	4010      	ands	r0, r2
 800074e:	4318      	orrs	r0, r3
 8000750:	e7c8      	b.n	80006e4 <__aeabi_fsub+0x74>
 8000752:	2e00      	cmp	r6, #0
 8000754:	d020      	beq.n	8000798 <__aeabi_fsub+0x128>
 8000756:	428c      	cmp	r4, r1
 8000758:	d023      	beq.n	80007a2 <__aeabi_fsub+0x132>
 800075a:	0028      	movs	r0, r5
 800075c:	38ff      	subs	r0, #255	; 0xff
 800075e:	2800      	cmp	r0, #0
 8000760:	d039      	beq.n	80007d6 <__aeabi_fsub+0x166>
 8000762:	1b57      	subs	r7, r2, r5
 8000764:	2d00      	cmp	r5, #0
 8000766:	d000      	beq.n	800076a <__aeabi_fsub+0xfa>
 8000768:	e09d      	b.n	80008a6 <__aeabi_fsub+0x236>
 800076a:	4663      	mov	r3, ip
 800076c:	2b00      	cmp	r3, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_fsub+0x102>
 8000770:	e0db      	b.n	800092a <__aeabi_fsub+0x2ba>
 8000772:	1e7b      	subs	r3, r7, #1
 8000774:	2f01      	cmp	r7, #1
 8000776:	d100      	bne.n	800077a <__aeabi_fsub+0x10a>
 8000778:	e10d      	b.n	8000996 <__aeabi_fsub+0x326>
 800077a:	2fff      	cmp	r7, #255	; 0xff
 800077c:	d071      	beq.n	8000862 <__aeabi_fsub+0x1f2>
 800077e:	001f      	movs	r7, r3
 8000780:	e098      	b.n	80008b4 <__aeabi_fsub+0x244>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fsub+0x118>
 8000786:	e0a7      	b.n	80008d8 <__aeabi_fsub+0x268>
 8000788:	1e42      	subs	r2, r0, #1
 800078a:	2801      	cmp	r0, #1
 800078c:	d100      	bne.n	8000790 <__aeabi_fsub+0x120>
 800078e:	e0e6      	b.n	800095e <__aeabi_fsub+0x2ee>
 8000790:	28ff      	cmp	r0, #255	; 0xff
 8000792:	d068      	beq.n	8000866 <__aeabi_fsub+0x1f6>
 8000794:	0010      	movs	r0, r2
 8000796:	e78f      	b.n	80006b8 <__aeabi_fsub+0x48>
 8000798:	2001      	movs	r0, #1
 800079a:	4041      	eors	r1, r0
 800079c:	42a1      	cmp	r1, r4
 800079e:	d000      	beq.n	80007a2 <__aeabi_fsub+0x132>
 80007a0:	e77f      	b.n	80006a2 <__aeabi_fsub+0x32>
 80007a2:	20ff      	movs	r0, #255	; 0xff
 80007a4:	4240      	negs	r0, r0
 80007a6:	4680      	mov	r8, r0
 80007a8:	44a8      	add	r8, r5
 80007aa:	4640      	mov	r0, r8
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d038      	beq.n	8000822 <__aeabi_fsub+0x1b2>
 80007b0:	1b51      	subs	r1, r2, r5
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fsub+0x148>
 80007b6:	e0ae      	b.n	8000916 <__aeabi_fsub+0x2a6>
 80007b8:	2aff      	cmp	r2, #255	; 0xff
 80007ba:	d100      	bne.n	80007be <__aeabi_fsub+0x14e>
 80007bc:	e0df      	b.n	800097e <__aeabi_fsub+0x30e>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	4660      	mov	r0, ip
 80007c2:	04db      	lsls	r3, r3, #19
 80007c4:	4318      	orrs	r0, r3
 80007c6:	4684      	mov	ip, r0
 80007c8:	291b      	cmp	r1, #27
 80007ca:	dc00      	bgt.n	80007ce <__aeabi_fsub+0x15e>
 80007cc:	e0d9      	b.n	8000982 <__aeabi_fsub+0x312>
 80007ce:	2001      	movs	r0, #1
 80007d0:	0015      	movs	r5, r2
 80007d2:	1980      	adds	r0, r0, r6
 80007d4:	e7b1      	b.n	800073a <__aeabi_fsub+0xca>
 80007d6:	20fe      	movs	r0, #254	; 0xfe
 80007d8:	1c6a      	adds	r2, r5, #1
 80007da:	4210      	tst	r0, r2
 80007dc:	d171      	bne.n	80008c2 <__aeabi_fsub+0x252>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fsub+0x174>
 80007e2:	e0a6      	b.n	8000932 <__aeabi_fsub+0x2c2>
 80007e4:	4663      	mov	r3, ip
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fsub+0x17c>
 80007ea:	e0d9      	b.n	80009a0 <__aeabi_fsub+0x330>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fsub+0x184>
 80007f2:	e788      	b.n	8000706 <__aeabi_fsub+0x96>
 80007f4:	1b98      	subs	r0, r3, r6
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fsub+0x18c>
 80007fa:	e0e1      	b.n	80009c0 <__aeabi_fsub+0x350>
 80007fc:	4663      	mov	r3, ip
 80007fe:	000c      	movs	r4, r1
 8000800:	1af0      	subs	r0, r6, r3
 8000802:	e76f      	b.n	80006e4 <__aeabi_fsub+0x74>
 8000804:	2e00      	cmp	r6, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fsub+0x19a>
 8000808:	e0b7      	b.n	800097a <__aeabi_fsub+0x30a>
 800080a:	0002      	movs	r2, r0
 800080c:	3a01      	subs	r2, #1
 800080e:	2801      	cmp	r0, #1
 8000810:	d100      	bne.n	8000814 <__aeabi_fsub+0x1a4>
 8000812:	e09c      	b.n	800094e <__aeabi_fsub+0x2de>
 8000814:	28ff      	cmp	r0, #255	; 0xff
 8000816:	d026      	beq.n	8000866 <__aeabi_fsub+0x1f6>
 8000818:	4690      	mov	r8, r2
 800081a:	e788      	b.n	800072e <__aeabi_fsub+0xbe>
 800081c:	22ff      	movs	r2, #255	; 0xff
 800081e:	2700      	movs	r7, #0
 8000820:	e771      	b.n	8000706 <__aeabi_fsub+0x96>
 8000822:	20fe      	movs	r0, #254	; 0xfe
 8000824:	1c6a      	adds	r2, r5, #1
 8000826:	4210      	tst	r0, r2
 8000828:	d064      	beq.n	80008f4 <__aeabi_fsub+0x284>
 800082a:	2aff      	cmp	r2, #255	; 0xff
 800082c:	d0f6      	beq.n	800081c <__aeabi_fsub+0x1ac>
 800082e:	0015      	movs	r5, r2
 8000830:	4466      	add	r6, ip
 8000832:	0870      	lsrs	r0, r6, #1
 8000834:	0743      	lsls	r3, r0, #29
 8000836:	d000      	beq.n	800083a <__aeabi_fsub+0x1ca>
 8000838:	e756      	b.n	80006e8 <__aeabi_fsub+0x78>
 800083a:	08c3      	lsrs	r3, r0, #3
 800083c:	2dff      	cmp	r5, #255	; 0xff
 800083e:	d012      	beq.n	8000866 <__aeabi_fsub+0x1f6>
 8000840:	025b      	lsls	r3, r3, #9
 8000842:	0a5f      	lsrs	r7, r3, #9
 8000844:	b2ea      	uxtb	r2, r5
 8000846:	e75e      	b.n	8000706 <__aeabi_fsub+0x96>
 8000848:	4662      	mov	r2, ip
 800084a:	2a00      	cmp	r2, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x1e0>
 800084e:	e096      	b.n	800097e <__aeabi_fsub+0x30e>
 8000850:	2e00      	cmp	r6, #0
 8000852:	d008      	beq.n	8000866 <__aeabi_fsub+0x1f6>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	03d2      	lsls	r2, r2, #15
 8000858:	4213      	tst	r3, r2
 800085a:	d004      	beq.n	8000866 <__aeabi_fsub+0x1f6>
 800085c:	4648      	mov	r0, r9
 800085e:	4210      	tst	r0, r2
 8000860:	d101      	bne.n	8000866 <__aeabi_fsub+0x1f6>
 8000862:	000c      	movs	r4, r1
 8000864:	464b      	mov	r3, r9
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0d8      	beq.n	800081c <__aeabi_fsub+0x1ac>
 800086a:	2780      	movs	r7, #128	; 0x80
 800086c:	03ff      	lsls	r7, r7, #15
 800086e:	431f      	orrs	r7, r3
 8000870:	027f      	lsls	r7, r7, #9
 8000872:	22ff      	movs	r2, #255	; 0xff
 8000874:	0a7f      	lsrs	r7, r7, #9
 8000876:	e746      	b.n	8000706 <__aeabi_fsub+0x96>
 8000878:	2320      	movs	r3, #32
 800087a:	003a      	movs	r2, r7
 800087c:	1b45      	subs	r5, r0, r5
 800087e:	0038      	movs	r0, r7
 8000880:	3501      	adds	r5, #1
 8000882:	40ea      	lsrs	r2, r5
 8000884:	1b5d      	subs	r5, r3, r5
 8000886:	40a8      	lsls	r0, r5
 8000888:	1e43      	subs	r3, r0, #1
 800088a:	4198      	sbcs	r0, r3
 800088c:	2500      	movs	r5, #0
 800088e:	4310      	orrs	r0, r2
 8000890:	e728      	b.n	80006e4 <__aeabi_fsub+0x74>
 8000892:	2320      	movs	r3, #32
 8000894:	1a1b      	subs	r3, r3, r0
 8000896:	0032      	movs	r2, r6
 8000898:	409e      	lsls	r6, r3
 800089a:	40c2      	lsrs	r2, r0
 800089c:	0030      	movs	r0, r6
 800089e:	1e43      	subs	r3, r0, #1
 80008a0:	4198      	sbcs	r0, r3
 80008a2:	4310      	orrs	r0, r2
 80008a4:	e70c      	b.n	80006c0 <__aeabi_fsub+0x50>
 80008a6:	2aff      	cmp	r2, #255	; 0xff
 80008a8:	d0db      	beq.n	8000862 <__aeabi_fsub+0x1f2>
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	4660      	mov	r0, ip
 80008ae:	04db      	lsls	r3, r3, #19
 80008b0:	4318      	orrs	r0, r3
 80008b2:	4684      	mov	ip, r0
 80008b4:	2f1b      	cmp	r7, #27
 80008b6:	dd56      	ble.n	8000966 <__aeabi_fsub+0x2f6>
 80008b8:	2001      	movs	r0, #1
 80008ba:	000c      	movs	r4, r1
 80008bc:	0015      	movs	r5, r2
 80008be:	1a30      	subs	r0, r6, r0
 80008c0:	e700      	b.n	80006c4 <__aeabi_fsub+0x54>
 80008c2:	4663      	mov	r3, ip
 80008c4:	1b9f      	subs	r7, r3, r6
 80008c6:	017b      	lsls	r3, r7, #5
 80008c8:	d43d      	bmi.n	8000946 <__aeabi_fsub+0x2d6>
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fsub+0x260>
 80008ce:	e6fe      	b.n	80006ce <__aeabi_fsub+0x5e>
 80008d0:	2400      	movs	r4, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	2700      	movs	r7, #0
 80008d6:	e716      	b.n	8000706 <__aeabi_fsub+0x96>
 80008d8:	0005      	movs	r5, r0
 80008da:	e7af      	b.n	800083c <__aeabi_fsub+0x1cc>
 80008dc:	0032      	movs	r2, r6
 80008de:	4643      	mov	r3, r8
 80008e0:	4641      	mov	r1, r8
 80008e2:	40da      	lsrs	r2, r3
 80008e4:	2320      	movs	r3, #32
 80008e6:	1a5b      	subs	r3, r3, r1
 80008e8:	409e      	lsls	r6, r3
 80008ea:	0030      	movs	r0, r6
 80008ec:	1e43      	subs	r3, r0, #1
 80008ee:	4198      	sbcs	r0, r3
 80008f0:	4310      	orrs	r0, r2
 80008f2:	e721      	b.n	8000738 <__aeabi_fsub+0xc8>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d1a7      	bne.n	8000848 <__aeabi_fsub+0x1d8>
 80008f8:	4663      	mov	r3, ip
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d059      	beq.n	80009b2 <__aeabi_fsub+0x342>
 80008fe:	2200      	movs	r2, #0
 8000900:	2e00      	cmp	r6, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fsub+0x296>
 8000904:	e6ff      	b.n	8000706 <__aeabi_fsub+0x96>
 8000906:	0030      	movs	r0, r6
 8000908:	4460      	add	r0, ip
 800090a:	0143      	lsls	r3, r0, #5
 800090c:	d592      	bpl.n	8000834 <__aeabi_fsub+0x1c4>
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <__aeabi_fsub+0x348>)
 8000910:	3501      	adds	r5, #1
 8000912:	4018      	ands	r0, r3
 8000914:	e78e      	b.n	8000834 <__aeabi_fsub+0x1c4>
 8000916:	4663      	mov	r3, ip
 8000918:	2b00      	cmp	r3, #0
 800091a:	d047      	beq.n	80009ac <__aeabi_fsub+0x33c>
 800091c:	1e4b      	subs	r3, r1, #1
 800091e:	2901      	cmp	r1, #1
 8000920:	d015      	beq.n	800094e <__aeabi_fsub+0x2de>
 8000922:	29ff      	cmp	r1, #255	; 0xff
 8000924:	d02b      	beq.n	800097e <__aeabi_fsub+0x30e>
 8000926:	0019      	movs	r1, r3
 8000928:	e74e      	b.n	80007c8 <__aeabi_fsub+0x158>
 800092a:	000c      	movs	r4, r1
 800092c:	464b      	mov	r3, r9
 800092e:	003d      	movs	r5, r7
 8000930:	e784      	b.n	800083c <__aeabi_fsub+0x1cc>
 8000932:	4662      	mov	r2, ip
 8000934:	2a00      	cmp	r2, #0
 8000936:	d18b      	bne.n	8000850 <__aeabi_fsub+0x1e0>
 8000938:	2e00      	cmp	r6, #0
 800093a:	d192      	bne.n	8000862 <__aeabi_fsub+0x1f2>
 800093c:	2780      	movs	r7, #128	; 0x80
 800093e:	2400      	movs	r4, #0
 8000940:	22ff      	movs	r2, #255	; 0xff
 8000942:	03ff      	lsls	r7, r7, #15
 8000944:	e6df      	b.n	8000706 <__aeabi_fsub+0x96>
 8000946:	4663      	mov	r3, ip
 8000948:	000c      	movs	r4, r1
 800094a:	1af7      	subs	r7, r6, r3
 800094c:	e6bf      	b.n	80006ce <__aeabi_fsub+0x5e>
 800094e:	0030      	movs	r0, r6
 8000950:	4460      	add	r0, ip
 8000952:	2501      	movs	r5, #1
 8000954:	0143      	lsls	r3, r0, #5
 8000956:	d400      	bmi.n	800095a <__aeabi_fsub+0x2ea>
 8000958:	e76c      	b.n	8000834 <__aeabi_fsub+0x1c4>
 800095a:	2502      	movs	r5, #2
 800095c:	e6f2      	b.n	8000744 <__aeabi_fsub+0xd4>
 800095e:	4663      	mov	r3, ip
 8000960:	2501      	movs	r5, #1
 8000962:	1b98      	subs	r0, r3, r6
 8000964:	e6ae      	b.n	80006c4 <__aeabi_fsub+0x54>
 8000966:	2320      	movs	r3, #32
 8000968:	4664      	mov	r4, ip
 800096a:	4660      	mov	r0, ip
 800096c:	40fc      	lsrs	r4, r7
 800096e:	1bdf      	subs	r7, r3, r7
 8000970:	40b8      	lsls	r0, r7
 8000972:	1e43      	subs	r3, r0, #1
 8000974:	4198      	sbcs	r0, r3
 8000976:	4320      	orrs	r0, r4
 8000978:	e79f      	b.n	80008ba <__aeabi_fsub+0x24a>
 800097a:	0005      	movs	r5, r0
 800097c:	e75e      	b.n	800083c <__aeabi_fsub+0x1cc>
 800097e:	464b      	mov	r3, r9
 8000980:	e771      	b.n	8000866 <__aeabi_fsub+0x1f6>
 8000982:	2320      	movs	r3, #32
 8000984:	4665      	mov	r5, ip
 8000986:	4660      	mov	r0, ip
 8000988:	40cd      	lsrs	r5, r1
 800098a:	1a59      	subs	r1, r3, r1
 800098c:	4088      	lsls	r0, r1
 800098e:	1e43      	subs	r3, r0, #1
 8000990:	4198      	sbcs	r0, r3
 8000992:	4328      	orrs	r0, r5
 8000994:	e71c      	b.n	80007d0 <__aeabi_fsub+0x160>
 8000996:	4663      	mov	r3, ip
 8000998:	000c      	movs	r4, r1
 800099a:	2501      	movs	r5, #1
 800099c:	1af0      	subs	r0, r6, r3
 800099e:	e691      	b.n	80006c4 <__aeabi_fsub+0x54>
 80009a0:	2e00      	cmp	r6, #0
 80009a2:	d095      	beq.n	80008d0 <__aeabi_fsub+0x260>
 80009a4:	000c      	movs	r4, r1
 80009a6:	464f      	mov	r7, r9
 80009a8:	2200      	movs	r2, #0
 80009aa:	e6ac      	b.n	8000706 <__aeabi_fsub+0x96>
 80009ac:	464b      	mov	r3, r9
 80009ae:	000d      	movs	r5, r1
 80009b0:	e744      	b.n	800083c <__aeabi_fsub+0x1cc>
 80009b2:	464f      	mov	r7, r9
 80009b4:	2200      	movs	r2, #0
 80009b6:	e6a6      	b.n	8000706 <__aeabi_fsub+0x96>
 80009b8:	fbffffff 	.word	0xfbffffff
 80009bc:	7dffffff 	.word	0x7dffffff
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d000      	beq.n	80009c6 <__aeabi_fsub+0x356>
 80009c4:	e736      	b.n	8000834 <__aeabi_fsub+0x1c4>
 80009c6:	2400      	movs	r4, #0
 80009c8:	2700      	movs	r7, #0
 80009ca:	e69c      	b.n	8000706 <__aeabi_fsub+0x96>

080009cc <__aeabi_f2iz>:
 80009cc:	0241      	lsls	r1, r0, #9
 80009ce:	0042      	lsls	r2, r0, #1
 80009d0:	0fc3      	lsrs	r3, r0, #31
 80009d2:	0a49      	lsrs	r1, r1, #9
 80009d4:	2000      	movs	r0, #0
 80009d6:	0e12      	lsrs	r2, r2, #24
 80009d8:	2a7e      	cmp	r2, #126	; 0x7e
 80009da:	dd03      	ble.n	80009e4 <__aeabi_f2iz+0x18>
 80009dc:	2a9d      	cmp	r2, #157	; 0x9d
 80009de:	dd02      	ble.n	80009e6 <__aeabi_f2iz+0x1a>
 80009e0:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <__aeabi_f2iz+0x3c>)
 80009e2:	1898      	adds	r0, r3, r2
 80009e4:	4770      	bx	lr
 80009e6:	2080      	movs	r0, #128	; 0x80
 80009e8:	0400      	lsls	r0, r0, #16
 80009ea:	4301      	orrs	r1, r0
 80009ec:	2a95      	cmp	r2, #149	; 0x95
 80009ee:	dc07      	bgt.n	8000a00 <__aeabi_f2iz+0x34>
 80009f0:	2096      	movs	r0, #150	; 0x96
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	40d1      	lsrs	r1, r2
 80009f6:	4248      	negs	r0, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1f3      	bne.n	80009e4 <__aeabi_f2iz+0x18>
 80009fc:	0008      	movs	r0, r1
 80009fe:	e7f1      	b.n	80009e4 <__aeabi_f2iz+0x18>
 8000a00:	3a96      	subs	r2, #150	; 0x96
 8000a02:	4091      	lsls	r1, r2
 8000a04:	e7f7      	b.n	80009f6 <__aeabi_f2iz+0x2a>
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	7fffffff 	.word	0x7fffffff

08000a0c <__aeabi_ui2f>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	1e05      	subs	r5, r0, #0
 8000a10:	d00e      	beq.n	8000a30 <__aeabi_ui2f+0x24>
 8000a12:	f000 fbb3 	bl	800117c <__clzsi2>
 8000a16:	239e      	movs	r3, #158	; 0x9e
 8000a18:	0004      	movs	r4, r0
 8000a1a:	1a1b      	subs	r3, r3, r0
 8000a1c:	2b96      	cmp	r3, #150	; 0x96
 8000a1e:	dc0c      	bgt.n	8000a3a <__aeabi_ui2f+0x2e>
 8000a20:	2808      	cmp	r0, #8
 8000a22:	dd01      	ble.n	8000a28 <__aeabi_ui2f+0x1c>
 8000a24:	3c08      	subs	r4, #8
 8000a26:	40a5      	lsls	r5, r4
 8000a28:	026d      	lsls	r5, r5, #9
 8000a2a:	0a6d      	lsrs	r5, r5, #9
 8000a2c:	b2d8      	uxtb	r0, r3
 8000a2e:	e001      	b.n	8000a34 <__aeabi_ui2f+0x28>
 8000a30:	2000      	movs	r0, #0
 8000a32:	2500      	movs	r5, #0
 8000a34:	05c0      	lsls	r0, r0, #23
 8000a36:	4328      	orrs	r0, r5
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	2b99      	cmp	r3, #153	; 0x99
 8000a3c:	dd09      	ble.n	8000a52 <__aeabi_ui2f+0x46>
 8000a3e:	0002      	movs	r2, r0
 8000a40:	0029      	movs	r1, r5
 8000a42:	321b      	adds	r2, #27
 8000a44:	4091      	lsls	r1, r2
 8000a46:	1e4a      	subs	r2, r1, #1
 8000a48:	4191      	sbcs	r1, r2
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	1a12      	subs	r2, r2, r0
 8000a4e:	40d5      	lsrs	r5, r2
 8000a50:	430d      	orrs	r5, r1
 8000a52:	2c05      	cmp	r4, #5
 8000a54:	dc12      	bgt.n	8000a7c <__aeabi_ui2f+0x70>
 8000a56:	0029      	movs	r1, r5
 8000a58:	4e0c      	ldr	r6, [pc, #48]	; (8000a8c <__aeabi_ui2f+0x80>)
 8000a5a:	4031      	ands	r1, r6
 8000a5c:	076a      	lsls	r2, r5, #29
 8000a5e:	d009      	beq.n	8000a74 <__aeabi_ui2f+0x68>
 8000a60:	200f      	movs	r0, #15
 8000a62:	4028      	ands	r0, r5
 8000a64:	2804      	cmp	r0, #4
 8000a66:	d005      	beq.n	8000a74 <__aeabi_ui2f+0x68>
 8000a68:	3104      	adds	r1, #4
 8000a6a:	014a      	lsls	r2, r1, #5
 8000a6c:	d502      	bpl.n	8000a74 <__aeabi_ui2f+0x68>
 8000a6e:	239f      	movs	r3, #159	; 0x9f
 8000a70:	4031      	ands	r1, r6
 8000a72:	1b1b      	subs	r3, r3, r4
 8000a74:	0189      	lsls	r1, r1, #6
 8000a76:	0a4d      	lsrs	r5, r1, #9
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	e7db      	b.n	8000a34 <__aeabi_ui2f+0x28>
 8000a7c:	1f62      	subs	r2, r4, #5
 8000a7e:	4095      	lsls	r5, r2
 8000a80:	0029      	movs	r1, r5
 8000a82:	4e02      	ldr	r6, [pc, #8]	; (8000a8c <__aeabi_ui2f+0x80>)
 8000a84:	4031      	ands	r1, r6
 8000a86:	076a      	lsls	r2, r5, #29
 8000a88:	d0f4      	beq.n	8000a74 <__aeabi_ui2f+0x68>
 8000a8a:	e7e9      	b.n	8000a60 <__aeabi_ui2f+0x54>
 8000a8c:	fbffffff 	.word	0xfbffffff

08000a90 <__aeabi_dmul>:
 8000a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a92:	4657      	mov	r7, sl
 8000a94:	464e      	mov	r6, r9
 8000a96:	4645      	mov	r5, r8
 8000a98:	46de      	mov	lr, fp
 8000a9a:	b5e0      	push	{r5, r6, r7, lr}
 8000a9c:	4698      	mov	r8, r3
 8000a9e:	030c      	lsls	r4, r1, #12
 8000aa0:	004b      	lsls	r3, r1, #1
 8000aa2:	0006      	movs	r6, r0
 8000aa4:	4692      	mov	sl, r2
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	0b24      	lsrs	r4, r4, #12
 8000aaa:	0d5b      	lsrs	r3, r3, #21
 8000aac:	0fcf      	lsrs	r7, r1, #31
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dmul+0x24>
 8000ab2:	e15c      	b.n	8000d6e <__aeabi_dmul+0x2de>
 8000ab4:	4ad9      	ldr	r2, [pc, #868]	; (8000e1c <__aeabi_dmul+0x38c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_dmul+0x2c>
 8000aba:	e175      	b.n	8000da8 <__aeabi_dmul+0x318>
 8000abc:	0f42      	lsrs	r2, r0, #29
 8000abe:	00e4      	lsls	r4, r4, #3
 8000ac0:	4314      	orrs	r4, r2
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	0412      	lsls	r2, r2, #16
 8000ac6:	4314      	orrs	r4, r2
 8000ac8:	4ad5      	ldr	r2, [pc, #852]	; (8000e20 <__aeabi_dmul+0x390>)
 8000aca:	00c5      	lsls	r5, r0, #3
 8000acc:	4694      	mov	ip, r2
 8000ace:	4463      	add	r3, ip
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	4699      	mov	r9, r3
 8000ad6:	469b      	mov	fp, r3
 8000ad8:	4643      	mov	r3, r8
 8000ada:	4642      	mov	r2, r8
 8000adc:	031e      	lsls	r6, r3, #12
 8000ade:	0fd2      	lsrs	r2, r2, #31
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4650      	mov	r0, sl
 8000ae4:	4690      	mov	r8, r2
 8000ae6:	0b36      	lsrs	r6, r6, #12
 8000ae8:	0d5b      	lsrs	r3, r3, #21
 8000aea:	d100      	bne.n	8000aee <__aeabi_dmul+0x5e>
 8000aec:	e120      	b.n	8000d30 <__aeabi_dmul+0x2a0>
 8000aee:	4acb      	ldr	r2, [pc, #812]	; (8000e1c <__aeabi_dmul+0x38c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dmul+0x66>
 8000af4:	e162      	b.n	8000dbc <__aeabi_dmul+0x32c>
 8000af6:	49ca      	ldr	r1, [pc, #808]	; (8000e20 <__aeabi_dmul+0x390>)
 8000af8:	0f42      	lsrs	r2, r0, #29
 8000afa:	468c      	mov	ip, r1
 8000afc:	9900      	ldr	r1, [sp, #0]
 8000afe:	4463      	add	r3, ip
 8000b00:	00f6      	lsls	r6, r6, #3
 8000b02:	468c      	mov	ip, r1
 8000b04:	4316      	orrs	r6, r2
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	449c      	add	ip, r3
 8000b0a:	0412      	lsls	r2, r2, #16
 8000b0c:	4663      	mov	r3, ip
 8000b0e:	4316      	orrs	r6, r2
 8000b10:	00c2      	lsls	r2, r0, #3
 8000b12:	2000      	movs	r0, #0
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	9900      	ldr	r1, [sp, #0]
 8000b18:	4643      	mov	r3, r8
 8000b1a:	3101      	adds	r1, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	4649      	mov	r1, r9
 8000b20:	407b      	eors	r3, r7
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	290f      	cmp	r1, #15
 8000b26:	d826      	bhi.n	8000b76 <__aeabi_dmul+0xe6>
 8000b28:	4bbe      	ldr	r3, [pc, #760]	; (8000e24 <__aeabi_dmul+0x394>)
 8000b2a:	0089      	lsls	r1, r1, #2
 8000b2c:	5859      	ldr	r1, [r3, r1]
 8000b2e:	468f      	mov	pc, r1
 8000b30:	4643      	mov	r3, r8
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	0034      	movs	r4, r6
 8000b36:	0015      	movs	r5, r2
 8000b38:	4683      	mov	fp, r0
 8000b3a:	465b      	mov	r3, fp
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d016      	beq.n	8000b6e <__aeabi_dmul+0xde>
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dmul+0xb6>
 8000b44:	e203      	b.n	8000f4e <__aeabi_dmul+0x4be>
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d000      	beq.n	8000b4c <__aeabi_dmul+0xbc>
 8000b4a:	e0cd      	b.n	8000ce8 <__aeabi_dmul+0x258>
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2400      	movs	r4, #0
 8000b50:	2500      	movs	r5, #0
 8000b52:	9b01      	ldr	r3, [sp, #4]
 8000b54:	0512      	lsls	r2, r2, #20
 8000b56:	4322      	orrs	r2, r4
 8000b58:	07db      	lsls	r3, r3, #31
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	0028      	movs	r0, r5
 8000b5e:	0011      	movs	r1, r2
 8000b60:	b007      	add	sp, #28
 8000b62:	bcf0      	pop	{r4, r5, r6, r7}
 8000b64:	46bb      	mov	fp, r7
 8000b66:	46b2      	mov	sl, r6
 8000b68:	46a9      	mov	r9, r5
 8000b6a:	46a0      	mov	r8, r4
 8000b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6e:	2400      	movs	r4, #0
 8000b70:	2500      	movs	r5, #0
 8000b72:	4aaa      	ldr	r2, [pc, #680]	; (8000e1c <__aeabi_dmul+0x38c>)
 8000b74:	e7ed      	b.n	8000b52 <__aeabi_dmul+0xc2>
 8000b76:	0c28      	lsrs	r0, r5, #16
 8000b78:	042d      	lsls	r5, r5, #16
 8000b7a:	0c2d      	lsrs	r5, r5, #16
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	0c11      	lsrs	r1, r2, #16
 8000b80:	0412      	lsls	r2, r2, #16
 8000b82:	0c12      	lsrs	r2, r2, #16
 8000b84:	4353      	muls	r3, r2
 8000b86:	4698      	mov	r8, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	002f      	movs	r7, r5
 8000b8c:	4343      	muls	r3, r0
 8000b8e:	4699      	mov	r9, r3
 8000b90:	434f      	muls	r7, r1
 8000b92:	444f      	add	r7, r9
 8000b94:	46bb      	mov	fp, r7
 8000b96:	4647      	mov	r7, r8
 8000b98:	000b      	movs	r3, r1
 8000b9a:	0c3f      	lsrs	r7, r7, #16
 8000b9c:	46ba      	mov	sl, r7
 8000b9e:	4343      	muls	r3, r0
 8000ba0:	44da      	add	sl, fp
 8000ba2:	9302      	str	r3, [sp, #8]
 8000ba4:	45d1      	cmp	r9, sl
 8000ba6:	d904      	bls.n	8000bb2 <__aeabi_dmul+0x122>
 8000ba8:	2780      	movs	r7, #128	; 0x80
 8000baa:	027f      	lsls	r7, r7, #9
 8000bac:	46b9      	mov	r9, r7
 8000bae:	444b      	add	r3, r9
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	4653      	mov	r3, sl
 8000bb4:	0c1b      	lsrs	r3, r3, #16
 8000bb6:	469b      	mov	fp, r3
 8000bb8:	4653      	mov	r3, sl
 8000bba:	041f      	lsls	r7, r3, #16
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	041b      	lsls	r3, r3, #16
 8000bc0:	0c1b      	lsrs	r3, r3, #16
 8000bc2:	4698      	mov	r8, r3
 8000bc4:	003b      	movs	r3, r7
 8000bc6:	4443      	add	r3, r8
 8000bc8:	9304      	str	r3, [sp, #16]
 8000bca:	0c33      	lsrs	r3, r6, #16
 8000bcc:	0436      	lsls	r6, r6, #16
 8000bce:	0c36      	lsrs	r6, r6, #16
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	0033      	movs	r3, r6
 8000bd4:	4343      	muls	r3, r0
 8000bd6:	4699      	mov	r9, r3
 8000bd8:	4643      	mov	r3, r8
 8000bda:	4343      	muls	r3, r0
 8000bdc:	002f      	movs	r7, r5
 8000bde:	469a      	mov	sl, r3
 8000be0:	4643      	mov	r3, r8
 8000be2:	4377      	muls	r7, r6
 8000be4:	435d      	muls	r5, r3
 8000be6:	0c38      	lsrs	r0, r7, #16
 8000be8:	444d      	add	r5, r9
 8000bea:	1945      	adds	r5, r0, r5
 8000bec:	45a9      	cmp	r9, r5
 8000bee:	d903      	bls.n	8000bf8 <__aeabi_dmul+0x168>
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	025b      	lsls	r3, r3, #9
 8000bf4:	4699      	mov	r9, r3
 8000bf6:	44ca      	add	sl, r9
 8000bf8:	043f      	lsls	r7, r7, #16
 8000bfa:	0c28      	lsrs	r0, r5, #16
 8000bfc:	0c3f      	lsrs	r7, r7, #16
 8000bfe:	042d      	lsls	r5, r5, #16
 8000c00:	19ed      	adds	r5, r5, r7
 8000c02:	0c27      	lsrs	r7, r4, #16
 8000c04:	0424      	lsls	r4, r4, #16
 8000c06:	0c24      	lsrs	r4, r4, #16
 8000c08:	0003      	movs	r3, r0
 8000c0a:	0020      	movs	r0, r4
 8000c0c:	4350      	muls	r0, r2
 8000c0e:	437a      	muls	r2, r7
 8000c10:	4691      	mov	r9, r2
 8000c12:	003a      	movs	r2, r7
 8000c14:	4453      	add	r3, sl
 8000c16:	9305      	str	r3, [sp, #20]
 8000c18:	0c03      	lsrs	r3, r0, #16
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	434a      	muls	r2, r1
 8000c1e:	4361      	muls	r1, r4
 8000c20:	4449      	add	r1, r9
 8000c22:	4451      	add	r1, sl
 8000c24:	44ab      	add	fp, r5
 8000c26:	4589      	cmp	r9, r1
 8000c28:	d903      	bls.n	8000c32 <__aeabi_dmul+0x1a2>
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	025b      	lsls	r3, r3, #9
 8000c2e:	4699      	mov	r9, r3
 8000c30:	444a      	add	r2, r9
 8000c32:	0400      	lsls	r0, r0, #16
 8000c34:	0c0b      	lsrs	r3, r1, #16
 8000c36:	0c00      	lsrs	r0, r0, #16
 8000c38:	0409      	lsls	r1, r1, #16
 8000c3a:	1809      	adds	r1, r1, r0
 8000c3c:	0020      	movs	r0, r4
 8000c3e:	4699      	mov	r9, r3
 8000c40:	4643      	mov	r3, r8
 8000c42:	4370      	muls	r0, r6
 8000c44:	435c      	muls	r4, r3
 8000c46:	437e      	muls	r6, r7
 8000c48:	435f      	muls	r7, r3
 8000c4a:	0c03      	lsrs	r3, r0, #16
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	19a4      	adds	r4, r4, r6
 8000c50:	4444      	add	r4, r8
 8000c52:	444a      	add	r2, r9
 8000c54:	9703      	str	r7, [sp, #12]
 8000c56:	42a6      	cmp	r6, r4
 8000c58:	d904      	bls.n	8000c64 <__aeabi_dmul+0x1d4>
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	025b      	lsls	r3, r3, #9
 8000c5e:	4698      	mov	r8, r3
 8000c60:	4447      	add	r7, r8
 8000c62:	9703      	str	r7, [sp, #12]
 8000c64:	0423      	lsls	r3, r4, #16
 8000c66:	9e02      	ldr	r6, [sp, #8]
 8000c68:	469a      	mov	sl, r3
 8000c6a:	9b05      	ldr	r3, [sp, #20]
 8000c6c:	445e      	add	r6, fp
 8000c6e:	4698      	mov	r8, r3
 8000c70:	42ae      	cmp	r6, r5
 8000c72:	41ad      	sbcs	r5, r5
 8000c74:	1876      	adds	r6, r6, r1
 8000c76:	428e      	cmp	r6, r1
 8000c78:	4189      	sbcs	r1, r1
 8000c7a:	0400      	lsls	r0, r0, #16
 8000c7c:	0c00      	lsrs	r0, r0, #16
 8000c7e:	4450      	add	r0, sl
 8000c80:	4440      	add	r0, r8
 8000c82:	426d      	negs	r5, r5
 8000c84:	1947      	adds	r7, r0, r5
 8000c86:	46b8      	mov	r8, r7
 8000c88:	4693      	mov	fp, r2
 8000c8a:	4249      	negs	r1, r1
 8000c8c:	4689      	mov	r9, r1
 8000c8e:	44c3      	add	fp, r8
 8000c90:	44d9      	add	r9, fp
 8000c92:	4298      	cmp	r0, r3
 8000c94:	4180      	sbcs	r0, r0
 8000c96:	45a8      	cmp	r8, r5
 8000c98:	41ad      	sbcs	r5, r5
 8000c9a:	4593      	cmp	fp, r2
 8000c9c:	4192      	sbcs	r2, r2
 8000c9e:	4589      	cmp	r9, r1
 8000ca0:	4189      	sbcs	r1, r1
 8000ca2:	426d      	negs	r5, r5
 8000ca4:	4240      	negs	r0, r0
 8000ca6:	4328      	orrs	r0, r5
 8000ca8:	0c24      	lsrs	r4, r4, #16
 8000caa:	4252      	negs	r2, r2
 8000cac:	4249      	negs	r1, r1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	9b03      	ldr	r3, [sp, #12]
 8000cb2:	1900      	adds	r0, r0, r4
 8000cb4:	1880      	adds	r0, r0, r2
 8000cb6:	18c7      	adds	r7, r0, r3
 8000cb8:	464b      	mov	r3, r9
 8000cba:	0ddc      	lsrs	r4, r3, #23
 8000cbc:	9b04      	ldr	r3, [sp, #16]
 8000cbe:	0275      	lsls	r5, r6, #9
 8000cc0:	431d      	orrs	r5, r3
 8000cc2:	1e6a      	subs	r2, r5, #1
 8000cc4:	4195      	sbcs	r5, r2
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	0df6      	lsrs	r6, r6, #23
 8000cca:	027f      	lsls	r7, r7, #9
 8000ccc:	4335      	orrs	r5, r6
 8000cce:	025a      	lsls	r2, r3, #9
 8000cd0:	433c      	orrs	r4, r7
 8000cd2:	4315      	orrs	r5, r2
 8000cd4:	01fb      	lsls	r3, r7, #7
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dmul+0x24a>
 8000cd8:	e11c      	b.n	8000f14 <__aeabi_dmul+0x484>
 8000cda:	2101      	movs	r1, #1
 8000cdc:	086a      	lsrs	r2, r5, #1
 8000cde:	400d      	ands	r5, r1
 8000ce0:	4315      	orrs	r5, r2
 8000ce2:	07e2      	lsls	r2, r4, #31
 8000ce4:	4315      	orrs	r5, r2
 8000ce6:	0864      	lsrs	r4, r4, #1
 8000ce8:	494f      	ldr	r1, [pc, #316]	; (8000e28 <__aeabi_dmul+0x398>)
 8000cea:	4461      	add	r1, ip
 8000cec:	2900      	cmp	r1, #0
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_dmul+0x262>
 8000cf0:	e0b0      	b.n	8000e54 <__aeabi_dmul+0x3c4>
 8000cf2:	076b      	lsls	r3, r5, #29
 8000cf4:	d009      	beq.n	8000d0a <__aeabi_dmul+0x27a>
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	402a      	ands	r2, r5
 8000cfa:	2a04      	cmp	r2, #4
 8000cfc:	d005      	beq.n	8000d0a <__aeabi_dmul+0x27a>
 8000cfe:	1d2a      	adds	r2, r5, #4
 8000d00:	42aa      	cmp	r2, r5
 8000d02:	41ad      	sbcs	r5, r5
 8000d04:	426d      	negs	r5, r5
 8000d06:	1964      	adds	r4, r4, r5
 8000d08:	0015      	movs	r5, r2
 8000d0a:	01e3      	lsls	r3, r4, #7
 8000d0c:	d504      	bpl.n	8000d18 <__aeabi_dmul+0x288>
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <__aeabi_dmul+0x39c>)
 8000d12:	00c9      	lsls	r1, r1, #3
 8000d14:	4014      	ands	r4, r2
 8000d16:	4461      	add	r1, ip
 8000d18:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <__aeabi_dmul+0x3a0>)
 8000d1a:	4291      	cmp	r1, r2
 8000d1c:	dd00      	ble.n	8000d20 <__aeabi_dmul+0x290>
 8000d1e:	e726      	b.n	8000b6e <__aeabi_dmul+0xde>
 8000d20:	0762      	lsls	r2, r4, #29
 8000d22:	08ed      	lsrs	r5, r5, #3
 8000d24:	0264      	lsls	r4, r4, #9
 8000d26:	0549      	lsls	r1, r1, #21
 8000d28:	4315      	orrs	r5, r2
 8000d2a:	0b24      	lsrs	r4, r4, #12
 8000d2c:	0d4a      	lsrs	r2, r1, #21
 8000d2e:	e710      	b.n	8000b52 <__aeabi_dmul+0xc2>
 8000d30:	4652      	mov	r2, sl
 8000d32:	4332      	orrs	r2, r6
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dmul+0x2a8>
 8000d36:	e07f      	b.n	8000e38 <__aeabi_dmul+0x3a8>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dmul+0x2ae>
 8000d3c:	e0dc      	b.n	8000ef8 <__aeabi_dmul+0x468>
 8000d3e:	0030      	movs	r0, r6
 8000d40:	f000 fa1c 	bl	800117c <__clzsi2>
 8000d44:	0002      	movs	r2, r0
 8000d46:	3a0b      	subs	r2, #11
 8000d48:	231d      	movs	r3, #29
 8000d4a:	0001      	movs	r1, r0
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	4652      	mov	r2, sl
 8000d50:	3908      	subs	r1, #8
 8000d52:	40da      	lsrs	r2, r3
 8000d54:	408e      	lsls	r6, r1
 8000d56:	4316      	orrs	r6, r2
 8000d58:	4652      	mov	r2, sl
 8000d5a:	408a      	lsls	r2, r1
 8000d5c:	9b00      	ldr	r3, [sp, #0]
 8000d5e:	4935      	ldr	r1, [pc, #212]	; (8000e34 <__aeabi_dmul+0x3a4>)
 8000d60:	1a18      	subs	r0, r3, r0
 8000d62:	0003      	movs	r3, r0
 8000d64:	468c      	mov	ip, r1
 8000d66:	4463      	add	r3, ip
 8000d68:	2000      	movs	r0, #0
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	e6d3      	b.n	8000b16 <__aeabi_dmul+0x86>
 8000d6e:	0025      	movs	r5, r4
 8000d70:	4305      	orrs	r5, r0
 8000d72:	d04a      	beq.n	8000e0a <__aeabi_dmul+0x37a>
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dmul+0x2ea>
 8000d78:	e0b0      	b.n	8000edc <__aeabi_dmul+0x44c>
 8000d7a:	0020      	movs	r0, r4
 8000d7c:	f000 f9fe 	bl	800117c <__clzsi2>
 8000d80:	0001      	movs	r1, r0
 8000d82:	0002      	movs	r2, r0
 8000d84:	390b      	subs	r1, #11
 8000d86:	231d      	movs	r3, #29
 8000d88:	0010      	movs	r0, r2
 8000d8a:	1a5b      	subs	r3, r3, r1
 8000d8c:	0031      	movs	r1, r6
 8000d8e:	0035      	movs	r5, r6
 8000d90:	3808      	subs	r0, #8
 8000d92:	4084      	lsls	r4, r0
 8000d94:	40d9      	lsrs	r1, r3
 8000d96:	4085      	lsls	r5, r0
 8000d98:	430c      	orrs	r4, r1
 8000d9a:	4826      	ldr	r0, [pc, #152]	; (8000e34 <__aeabi_dmul+0x3a4>)
 8000d9c:	1a83      	subs	r3, r0, r2
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2300      	movs	r3, #0
 8000da2:	4699      	mov	r9, r3
 8000da4:	469b      	mov	fp, r3
 8000da6:	e697      	b.n	8000ad8 <__aeabi_dmul+0x48>
 8000da8:	0005      	movs	r5, r0
 8000daa:	4325      	orrs	r5, r4
 8000dac:	d126      	bne.n	8000dfc <__aeabi_dmul+0x36c>
 8000dae:	2208      	movs	r2, #8
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2302      	movs	r3, #2
 8000db4:	2400      	movs	r4, #0
 8000db6:	4691      	mov	r9, r2
 8000db8:	469b      	mov	fp, r3
 8000dba:	e68d      	b.n	8000ad8 <__aeabi_dmul+0x48>
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	9b00      	ldr	r3, [sp, #0]
 8000dc0:	4332      	orrs	r2, r6
 8000dc2:	d110      	bne.n	8000de6 <__aeabi_dmul+0x356>
 8000dc4:	4915      	ldr	r1, [pc, #84]	; (8000e1c <__aeabi_dmul+0x38c>)
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	468c      	mov	ip, r1
 8000dca:	4463      	add	r3, ip
 8000dcc:	4649      	mov	r1, r9
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	4319      	orrs	r1, r3
 8000dd4:	4689      	mov	r9, r1
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	e69d      	b.n	8000b16 <__aeabi_dmul+0x86>
 8000dda:	465b      	mov	r3, fp
 8000ddc:	9701      	str	r7, [sp, #4]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d000      	beq.n	8000de4 <__aeabi_dmul+0x354>
 8000de2:	e6ad      	b.n	8000b40 <__aeabi_dmul+0xb0>
 8000de4:	e6c3      	b.n	8000b6e <__aeabi_dmul+0xde>
 8000de6:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <__aeabi_dmul+0x38c>)
 8000de8:	2003      	movs	r0, #3
 8000dea:	4694      	mov	ip, r2
 8000dec:	4463      	add	r3, ip
 8000dee:	464a      	mov	r2, r9
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2303      	movs	r3, #3
 8000df4:	431a      	orrs	r2, r3
 8000df6:	4691      	mov	r9, r2
 8000df8:	4652      	mov	r2, sl
 8000dfa:	e68c      	b.n	8000b16 <__aeabi_dmul+0x86>
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2303      	movs	r3, #3
 8000e02:	0005      	movs	r5, r0
 8000e04:	4691      	mov	r9, r2
 8000e06:	469b      	mov	fp, r3
 8000e08:	e666      	b.n	8000ad8 <__aeabi_dmul+0x48>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	4699      	mov	r9, r3
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	2400      	movs	r4, #0
 8000e16:	469b      	mov	fp, r3
 8000e18:	e65e      	b.n	8000ad8 <__aeabi_dmul+0x48>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	000007ff 	.word	0x000007ff
 8000e20:	fffffc01 	.word	0xfffffc01
 8000e24:	08007970 	.word	0x08007970
 8000e28:	000003ff 	.word	0x000003ff
 8000e2c:	feffffff 	.word	0xfeffffff
 8000e30:	000007fe 	.word	0x000007fe
 8000e34:	fffffc0d 	.word	0xfffffc0d
 8000e38:	4649      	mov	r1, r9
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	4689      	mov	r9, r1
 8000e40:	2600      	movs	r6, #0
 8000e42:	2001      	movs	r0, #1
 8000e44:	e667      	b.n	8000b16 <__aeabi_dmul+0x86>
 8000e46:	2300      	movs	r3, #0
 8000e48:	2480      	movs	r4, #128	; 0x80
 8000e4a:	2500      	movs	r5, #0
 8000e4c:	4a43      	ldr	r2, [pc, #268]	; (8000f5c <__aeabi_dmul+0x4cc>)
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	0324      	lsls	r4, r4, #12
 8000e52:	e67e      	b.n	8000b52 <__aeabi_dmul+0xc2>
 8000e54:	2001      	movs	r0, #1
 8000e56:	1a40      	subs	r0, r0, r1
 8000e58:	2838      	cmp	r0, #56	; 0x38
 8000e5a:	dd00      	ble.n	8000e5e <__aeabi_dmul+0x3ce>
 8000e5c:	e676      	b.n	8000b4c <__aeabi_dmul+0xbc>
 8000e5e:	281f      	cmp	r0, #31
 8000e60:	dd5b      	ble.n	8000f1a <__aeabi_dmul+0x48a>
 8000e62:	221f      	movs	r2, #31
 8000e64:	0023      	movs	r3, r4
 8000e66:	4252      	negs	r2, r2
 8000e68:	1a51      	subs	r1, r2, r1
 8000e6a:	40cb      	lsrs	r3, r1
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	2820      	cmp	r0, #32
 8000e70:	d003      	beq.n	8000e7a <__aeabi_dmul+0x3ea>
 8000e72:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <__aeabi_dmul+0x4d0>)
 8000e74:	4462      	add	r2, ip
 8000e76:	4094      	lsls	r4, r2
 8000e78:	4325      	orrs	r5, r4
 8000e7a:	1e6a      	subs	r2, r5, #1
 8000e7c:	4195      	sbcs	r5, r2
 8000e7e:	002a      	movs	r2, r5
 8000e80:	430a      	orrs	r2, r1
 8000e82:	2107      	movs	r1, #7
 8000e84:	000d      	movs	r5, r1
 8000e86:	2400      	movs	r4, #0
 8000e88:	4015      	ands	r5, r2
 8000e8a:	4211      	tst	r1, r2
 8000e8c:	d05b      	beq.n	8000f46 <__aeabi_dmul+0x4b6>
 8000e8e:	210f      	movs	r1, #15
 8000e90:	2400      	movs	r4, #0
 8000e92:	4011      	ands	r1, r2
 8000e94:	2904      	cmp	r1, #4
 8000e96:	d053      	beq.n	8000f40 <__aeabi_dmul+0x4b0>
 8000e98:	1d11      	adds	r1, r2, #4
 8000e9a:	4291      	cmp	r1, r2
 8000e9c:	4192      	sbcs	r2, r2
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	18a4      	adds	r4, r4, r2
 8000ea2:	000a      	movs	r2, r1
 8000ea4:	0223      	lsls	r3, r4, #8
 8000ea6:	d54b      	bpl.n	8000f40 <__aeabi_dmul+0x4b0>
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2400      	movs	r4, #0
 8000eac:	2500      	movs	r5, #0
 8000eae:	e650      	b.n	8000b52 <__aeabi_dmul+0xc2>
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	031b      	lsls	r3, r3, #12
 8000eb4:	421c      	tst	r4, r3
 8000eb6:	d009      	beq.n	8000ecc <__aeabi_dmul+0x43c>
 8000eb8:	421e      	tst	r6, r3
 8000eba:	d107      	bne.n	8000ecc <__aeabi_dmul+0x43c>
 8000ebc:	4333      	orrs	r3, r6
 8000ebe:	031c      	lsls	r4, r3, #12
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	0015      	movs	r5, r2
 8000ec4:	0b24      	lsrs	r4, r4, #12
 8000ec6:	4a25      	ldr	r2, [pc, #148]	; (8000f5c <__aeabi_dmul+0x4cc>)
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	e642      	b.n	8000b52 <__aeabi_dmul+0xc2>
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	0312      	lsls	r2, r2, #12
 8000ed0:	4314      	orrs	r4, r2
 8000ed2:	0324      	lsls	r4, r4, #12
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <__aeabi_dmul+0x4cc>)
 8000ed6:	0b24      	lsrs	r4, r4, #12
 8000ed8:	9701      	str	r7, [sp, #4]
 8000eda:	e63a      	b.n	8000b52 <__aeabi_dmul+0xc2>
 8000edc:	f000 f94e 	bl	800117c <__clzsi2>
 8000ee0:	0001      	movs	r1, r0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	3115      	adds	r1, #21
 8000ee6:	3220      	adds	r2, #32
 8000ee8:	291c      	cmp	r1, #28
 8000eea:	dc00      	bgt.n	8000eee <__aeabi_dmul+0x45e>
 8000eec:	e74b      	b.n	8000d86 <__aeabi_dmul+0x2f6>
 8000eee:	0034      	movs	r4, r6
 8000ef0:	3808      	subs	r0, #8
 8000ef2:	2500      	movs	r5, #0
 8000ef4:	4084      	lsls	r4, r0
 8000ef6:	e750      	b.n	8000d9a <__aeabi_dmul+0x30a>
 8000ef8:	f000 f940 	bl	800117c <__clzsi2>
 8000efc:	0003      	movs	r3, r0
 8000efe:	001a      	movs	r2, r3
 8000f00:	3215      	adds	r2, #21
 8000f02:	3020      	adds	r0, #32
 8000f04:	2a1c      	cmp	r2, #28
 8000f06:	dc00      	bgt.n	8000f0a <__aeabi_dmul+0x47a>
 8000f08:	e71e      	b.n	8000d48 <__aeabi_dmul+0x2b8>
 8000f0a:	4656      	mov	r6, sl
 8000f0c:	3b08      	subs	r3, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	409e      	lsls	r6, r3
 8000f12:	e723      	b.n	8000d5c <__aeabi_dmul+0x2cc>
 8000f14:	9b00      	ldr	r3, [sp, #0]
 8000f16:	469c      	mov	ip, r3
 8000f18:	e6e6      	b.n	8000ce8 <__aeabi_dmul+0x258>
 8000f1a:	4912      	ldr	r1, [pc, #72]	; (8000f64 <__aeabi_dmul+0x4d4>)
 8000f1c:	0022      	movs	r2, r4
 8000f1e:	4461      	add	r1, ip
 8000f20:	002e      	movs	r6, r5
 8000f22:	408d      	lsls	r5, r1
 8000f24:	408a      	lsls	r2, r1
 8000f26:	40c6      	lsrs	r6, r0
 8000f28:	1e69      	subs	r1, r5, #1
 8000f2a:	418d      	sbcs	r5, r1
 8000f2c:	4332      	orrs	r2, r6
 8000f2e:	432a      	orrs	r2, r5
 8000f30:	40c4      	lsrs	r4, r0
 8000f32:	0753      	lsls	r3, r2, #29
 8000f34:	d0b6      	beq.n	8000ea4 <__aeabi_dmul+0x414>
 8000f36:	210f      	movs	r1, #15
 8000f38:	4011      	ands	r1, r2
 8000f3a:	2904      	cmp	r1, #4
 8000f3c:	d1ac      	bne.n	8000e98 <__aeabi_dmul+0x408>
 8000f3e:	e7b1      	b.n	8000ea4 <__aeabi_dmul+0x414>
 8000f40:	0765      	lsls	r5, r4, #29
 8000f42:	0264      	lsls	r4, r4, #9
 8000f44:	0b24      	lsrs	r4, r4, #12
 8000f46:	08d2      	lsrs	r2, r2, #3
 8000f48:	4315      	orrs	r5, r2
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	e601      	b.n	8000b52 <__aeabi_dmul+0xc2>
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	0312      	lsls	r2, r2, #12
 8000f52:	4314      	orrs	r4, r2
 8000f54:	0324      	lsls	r4, r4, #12
 8000f56:	4a01      	ldr	r2, [pc, #4]	; (8000f5c <__aeabi_dmul+0x4cc>)
 8000f58:	0b24      	lsrs	r4, r4, #12
 8000f5a:	e5fa      	b.n	8000b52 <__aeabi_dmul+0xc2>
 8000f5c:	000007ff 	.word	0x000007ff
 8000f60:	0000043e 	.word	0x0000043e
 8000f64:	0000041e 	.word	0x0000041e

08000f68 <__aeabi_f2d>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	0043      	lsls	r3, r0, #1
 8000f6c:	0246      	lsls	r6, r0, #9
 8000f6e:	0fc4      	lsrs	r4, r0, #31
 8000f70:	20fe      	movs	r0, #254	; 0xfe
 8000f72:	0e1b      	lsrs	r3, r3, #24
 8000f74:	1c59      	adds	r1, r3, #1
 8000f76:	0a75      	lsrs	r5, r6, #9
 8000f78:	4208      	tst	r0, r1
 8000f7a:	d00c      	beq.n	8000f96 <__aeabi_f2d+0x2e>
 8000f7c:	22e0      	movs	r2, #224	; 0xe0
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4694      	mov	ip, r2
 8000f82:	076d      	lsls	r5, r5, #29
 8000f84:	0b36      	lsrs	r6, r6, #12
 8000f86:	4463      	add	r3, ip
 8000f88:	051b      	lsls	r3, r3, #20
 8000f8a:	4333      	orrs	r3, r6
 8000f8c:	07e4      	lsls	r4, r4, #31
 8000f8e:	4323      	orrs	r3, r4
 8000f90:	0028      	movs	r0, r5
 8000f92:	0019      	movs	r1, r3
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d114      	bne.n	8000fc4 <__aeabi_f2d+0x5c>
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d01b      	beq.n	8000fd6 <__aeabi_f2d+0x6e>
 8000f9e:	0028      	movs	r0, r5
 8000fa0:	f000 f8ec 	bl	800117c <__clzsi2>
 8000fa4:	280a      	cmp	r0, #10
 8000fa6:	dc1c      	bgt.n	8000fe2 <__aeabi_f2d+0x7a>
 8000fa8:	230b      	movs	r3, #11
 8000faa:	002e      	movs	r6, r5
 8000fac:	1a1b      	subs	r3, r3, r0
 8000fae:	40de      	lsrs	r6, r3
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	3315      	adds	r3, #21
 8000fb4:	409d      	lsls	r5, r3
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <__aeabi_f2d+0x88>)
 8000fb8:	0336      	lsls	r6, r6, #12
 8000fba:	1a12      	subs	r2, r2, r0
 8000fbc:	0552      	lsls	r2, r2, #21
 8000fbe:	0b36      	lsrs	r6, r6, #12
 8000fc0:	0d53      	lsrs	r3, r2, #21
 8000fc2:	e7e1      	b.n	8000f88 <__aeabi_f2d+0x20>
 8000fc4:	2d00      	cmp	r5, #0
 8000fc6:	d009      	beq.n	8000fdc <__aeabi_f2d+0x74>
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0b36      	lsrs	r6, r6, #12
 8000fcc:	0312      	lsls	r2, r2, #12
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <__aeabi_f2d+0x8c>)
 8000fd0:	076d      	lsls	r5, r5, #29
 8000fd2:	4316      	orrs	r6, r2
 8000fd4:	e7d8      	b.n	8000f88 <__aeabi_f2d+0x20>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2600      	movs	r6, #0
 8000fda:	e7d5      	b.n	8000f88 <__aeabi_f2d+0x20>
 8000fdc:	2600      	movs	r6, #0
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <__aeabi_f2d+0x8c>)
 8000fe0:	e7d2      	b.n	8000f88 <__aeabi_f2d+0x20>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	3b0b      	subs	r3, #11
 8000fe6:	409d      	lsls	r5, r3
 8000fe8:	002e      	movs	r6, r5
 8000fea:	2500      	movs	r5, #0
 8000fec:	e7e3      	b.n	8000fb6 <__aeabi_f2d+0x4e>
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	00000389 	.word	0x00000389
 8000ff4:	000007ff 	.word	0x000007ff

08000ff8 <__aeabi_d2f>:
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	004b      	lsls	r3, r1, #1
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	0d5b      	lsrs	r3, r3, #21
 8001000:	030c      	lsls	r4, r1, #12
 8001002:	4e3d      	ldr	r6, [pc, #244]	; (80010f8 <__aeabi_d2f+0x100>)
 8001004:	0a64      	lsrs	r4, r4, #9
 8001006:	0f40      	lsrs	r0, r0, #29
 8001008:	1c5f      	adds	r7, r3, #1
 800100a:	0fc9      	lsrs	r1, r1, #31
 800100c:	4304      	orrs	r4, r0
 800100e:	00d5      	lsls	r5, r2, #3
 8001010:	4237      	tst	r7, r6
 8001012:	d00a      	beq.n	800102a <__aeabi_d2f+0x32>
 8001014:	4839      	ldr	r0, [pc, #228]	; (80010fc <__aeabi_d2f+0x104>)
 8001016:	181e      	adds	r6, r3, r0
 8001018:	2efe      	cmp	r6, #254	; 0xfe
 800101a:	dd16      	ble.n	800104a <__aeabi_d2f+0x52>
 800101c:	20ff      	movs	r0, #255	; 0xff
 800101e:	2400      	movs	r4, #0
 8001020:	05c0      	lsls	r0, r0, #23
 8001022:	4320      	orrs	r0, r4
 8001024:	07c9      	lsls	r1, r1, #31
 8001026:	4308      	orrs	r0, r1
 8001028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <__aeabi_d2f+0x44>
 800102e:	432c      	orrs	r4, r5
 8001030:	d026      	beq.n	8001080 <__aeabi_d2f+0x88>
 8001032:	2205      	movs	r2, #5
 8001034:	0192      	lsls	r2, r2, #6
 8001036:	0a54      	lsrs	r4, r2, #9
 8001038:	b2d8      	uxtb	r0, r3
 800103a:	e7f1      	b.n	8001020 <__aeabi_d2f+0x28>
 800103c:	4325      	orrs	r5, r4
 800103e:	d0ed      	beq.n	800101c <__aeabi_d2f+0x24>
 8001040:	2080      	movs	r0, #128	; 0x80
 8001042:	03c0      	lsls	r0, r0, #15
 8001044:	4304      	orrs	r4, r0
 8001046:	20ff      	movs	r0, #255	; 0xff
 8001048:	e7ea      	b.n	8001020 <__aeabi_d2f+0x28>
 800104a:	2e00      	cmp	r6, #0
 800104c:	dd1b      	ble.n	8001086 <__aeabi_d2f+0x8e>
 800104e:	0192      	lsls	r2, r2, #6
 8001050:	1e53      	subs	r3, r2, #1
 8001052:	419a      	sbcs	r2, r3
 8001054:	00e4      	lsls	r4, r4, #3
 8001056:	0f6d      	lsrs	r5, r5, #29
 8001058:	4322      	orrs	r2, r4
 800105a:	432a      	orrs	r2, r5
 800105c:	0753      	lsls	r3, r2, #29
 800105e:	d048      	beq.n	80010f2 <__aeabi_d2f+0xfa>
 8001060:	230f      	movs	r3, #15
 8001062:	4013      	ands	r3, r2
 8001064:	2b04      	cmp	r3, #4
 8001066:	d000      	beq.n	800106a <__aeabi_d2f+0x72>
 8001068:	3204      	adds	r2, #4
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	04db      	lsls	r3, r3, #19
 800106e:	4013      	ands	r3, r2
 8001070:	d03f      	beq.n	80010f2 <__aeabi_d2f+0xfa>
 8001072:	1c70      	adds	r0, r6, #1
 8001074:	2efe      	cmp	r6, #254	; 0xfe
 8001076:	d0d1      	beq.n	800101c <__aeabi_d2f+0x24>
 8001078:	0192      	lsls	r2, r2, #6
 800107a:	0a54      	lsrs	r4, r2, #9
 800107c:	b2c0      	uxtb	r0, r0
 800107e:	e7cf      	b.n	8001020 <__aeabi_d2f+0x28>
 8001080:	2000      	movs	r0, #0
 8001082:	2400      	movs	r4, #0
 8001084:	e7cc      	b.n	8001020 <__aeabi_d2f+0x28>
 8001086:	0032      	movs	r2, r6
 8001088:	3217      	adds	r2, #23
 800108a:	db22      	blt.n	80010d2 <__aeabi_d2f+0xda>
 800108c:	2080      	movs	r0, #128	; 0x80
 800108e:	0400      	lsls	r0, r0, #16
 8001090:	4320      	orrs	r0, r4
 8001092:	241e      	movs	r4, #30
 8001094:	1ba4      	subs	r4, r4, r6
 8001096:	2c1f      	cmp	r4, #31
 8001098:	dd1d      	ble.n	80010d6 <__aeabi_d2f+0xde>
 800109a:	2202      	movs	r2, #2
 800109c:	4252      	negs	r2, r2
 800109e:	1b96      	subs	r6, r2, r6
 80010a0:	0002      	movs	r2, r0
 80010a2:	40f2      	lsrs	r2, r6
 80010a4:	0016      	movs	r6, r2
 80010a6:	2c20      	cmp	r4, #32
 80010a8:	d004      	beq.n	80010b4 <__aeabi_d2f+0xbc>
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <__aeabi_d2f+0x108>)
 80010ac:	4694      	mov	ip, r2
 80010ae:	4463      	add	r3, ip
 80010b0:	4098      	lsls	r0, r3
 80010b2:	4305      	orrs	r5, r0
 80010b4:	002a      	movs	r2, r5
 80010b6:	1e53      	subs	r3, r2, #1
 80010b8:	419a      	sbcs	r2, r3
 80010ba:	4332      	orrs	r2, r6
 80010bc:	2600      	movs	r6, #0
 80010be:	0753      	lsls	r3, r2, #29
 80010c0:	d1ce      	bne.n	8001060 <__aeabi_d2f+0x68>
 80010c2:	2480      	movs	r4, #128	; 0x80
 80010c4:	0013      	movs	r3, r2
 80010c6:	04e4      	lsls	r4, r4, #19
 80010c8:	2001      	movs	r0, #1
 80010ca:	4023      	ands	r3, r4
 80010cc:	4222      	tst	r2, r4
 80010ce:	d1d3      	bne.n	8001078 <__aeabi_d2f+0x80>
 80010d0:	e7b0      	b.n	8001034 <__aeabi_d2f+0x3c>
 80010d2:	2300      	movs	r3, #0
 80010d4:	e7ad      	b.n	8001032 <__aeabi_d2f+0x3a>
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <__aeabi_d2f+0x10c>)
 80010d8:	4694      	mov	ip, r2
 80010da:	002a      	movs	r2, r5
 80010dc:	40e2      	lsrs	r2, r4
 80010de:	0014      	movs	r4, r2
 80010e0:	002a      	movs	r2, r5
 80010e2:	4463      	add	r3, ip
 80010e4:	409a      	lsls	r2, r3
 80010e6:	4098      	lsls	r0, r3
 80010e8:	1e55      	subs	r5, r2, #1
 80010ea:	41aa      	sbcs	r2, r5
 80010ec:	4302      	orrs	r2, r0
 80010ee:	4322      	orrs	r2, r4
 80010f0:	e7e4      	b.n	80010bc <__aeabi_d2f+0xc4>
 80010f2:	0033      	movs	r3, r6
 80010f4:	e79e      	b.n	8001034 <__aeabi_d2f+0x3c>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	000007fe 	.word	0x000007fe
 80010fc:	fffffc80 	.word	0xfffffc80
 8001100:	fffffca2 	.word	0xfffffca2
 8001104:	fffffc82 	.word	0xfffffc82

08001108 <__aeabi_cfrcmple>:
 8001108:	4684      	mov	ip, r0
 800110a:	0008      	movs	r0, r1
 800110c:	4661      	mov	r1, ip
 800110e:	e7ff      	b.n	8001110 <__aeabi_cfcmpeq>

08001110 <__aeabi_cfcmpeq>:
 8001110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001112:	f000 f8bd 	bl	8001290 <__lesf2>
 8001116:	2800      	cmp	r0, #0
 8001118:	d401      	bmi.n	800111e <__aeabi_cfcmpeq+0xe>
 800111a:	2100      	movs	r1, #0
 800111c:	42c8      	cmn	r0, r1
 800111e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001120 <__aeabi_fcmpeq>:
 8001120:	b510      	push	{r4, lr}
 8001122:	f000 f849 	bl	80011b8 <__eqsf2>
 8001126:	4240      	negs	r0, r0
 8001128:	3001      	adds	r0, #1
 800112a:	bd10      	pop	{r4, pc}

0800112c <__aeabi_fcmplt>:
 800112c:	b510      	push	{r4, lr}
 800112e:	f000 f8af 	bl	8001290 <__lesf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	db01      	blt.n	800113a <__aeabi_fcmplt+0xe>
 8001136:	2000      	movs	r0, #0
 8001138:	bd10      	pop	{r4, pc}
 800113a:	2001      	movs	r0, #1
 800113c:	bd10      	pop	{r4, pc}
 800113e:	46c0      	nop			; (mov r8, r8)

08001140 <__aeabi_fcmple>:
 8001140:	b510      	push	{r4, lr}
 8001142:	f000 f8a5 	bl	8001290 <__lesf2>
 8001146:	2800      	cmp	r0, #0
 8001148:	dd01      	ble.n	800114e <__aeabi_fcmple+0xe>
 800114a:	2000      	movs	r0, #0
 800114c:	bd10      	pop	{r4, pc}
 800114e:	2001      	movs	r0, #1
 8001150:	bd10      	pop	{r4, pc}
 8001152:	46c0      	nop			; (mov r8, r8)

08001154 <__aeabi_fcmpgt>:
 8001154:	b510      	push	{r4, lr}
 8001156:	f000 f855 	bl	8001204 <__gesf2>
 800115a:	2800      	cmp	r0, #0
 800115c:	dc01      	bgt.n	8001162 <__aeabi_fcmpgt+0xe>
 800115e:	2000      	movs	r0, #0
 8001160:	bd10      	pop	{r4, pc}
 8001162:	2001      	movs	r0, #1
 8001164:	bd10      	pop	{r4, pc}
 8001166:	46c0      	nop			; (mov r8, r8)

08001168 <__aeabi_fcmpge>:
 8001168:	b510      	push	{r4, lr}
 800116a:	f000 f84b 	bl	8001204 <__gesf2>
 800116e:	2800      	cmp	r0, #0
 8001170:	da01      	bge.n	8001176 <__aeabi_fcmpge+0xe>
 8001172:	2000      	movs	r0, #0
 8001174:	bd10      	pop	{r4, pc}
 8001176:	2001      	movs	r0, #1
 8001178:	bd10      	pop	{r4, pc}
 800117a:	46c0      	nop			; (mov r8, r8)

0800117c <__clzsi2>:
 800117c:	211c      	movs	r1, #28
 800117e:	2301      	movs	r3, #1
 8001180:	041b      	lsls	r3, r3, #16
 8001182:	4298      	cmp	r0, r3
 8001184:	d301      	bcc.n	800118a <__clzsi2+0xe>
 8001186:	0c00      	lsrs	r0, r0, #16
 8001188:	3910      	subs	r1, #16
 800118a:	0a1b      	lsrs	r3, r3, #8
 800118c:	4298      	cmp	r0, r3
 800118e:	d301      	bcc.n	8001194 <__clzsi2+0x18>
 8001190:	0a00      	lsrs	r0, r0, #8
 8001192:	3908      	subs	r1, #8
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	4298      	cmp	r0, r3
 8001198:	d301      	bcc.n	800119e <__clzsi2+0x22>
 800119a:	0900      	lsrs	r0, r0, #4
 800119c:	3904      	subs	r1, #4
 800119e:	a202      	add	r2, pc, #8	; (adr r2, 80011a8 <__clzsi2+0x2c>)
 80011a0:	5c10      	ldrb	r0, [r2, r0]
 80011a2:	1840      	adds	r0, r0, r1
 80011a4:	4770      	bx	lr
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	02020304 	.word	0x02020304
 80011ac:	01010101 	.word	0x01010101
	...

080011b8 <__eqsf2>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	0042      	lsls	r2, r0, #1
 80011bc:	0245      	lsls	r5, r0, #9
 80011be:	024e      	lsls	r6, r1, #9
 80011c0:	004c      	lsls	r4, r1, #1
 80011c2:	0fc3      	lsrs	r3, r0, #31
 80011c4:	0a6d      	lsrs	r5, r5, #9
 80011c6:	2001      	movs	r0, #1
 80011c8:	0e12      	lsrs	r2, r2, #24
 80011ca:	0a76      	lsrs	r6, r6, #9
 80011cc:	0e24      	lsrs	r4, r4, #24
 80011ce:	0fc9      	lsrs	r1, r1, #31
 80011d0:	2aff      	cmp	r2, #255	; 0xff
 80011d2:	d006      	beq.n	80011e2 <__eqsf2+0x2a>
 80011d4:	2cff      	cmp	r4, #255	; 0xff
 80011d6:	d003      	beq.n	80011e0 <__eqsf2+0x28>
 80011d8:	42a2      	cmp	r2, r4
 80011da:	d101      	bne.n	80011e0 <__eqsf2+0x28>
 80011dc:	42b5      	cmp	r5, r6
 80011de:	d006      	beq.n	80011ee <__eqsf2+0x36>
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
 80011e2:	2d00      	cmp	r5, #0
 80011e4:	d1fc      	bne.n	80011e0 <__eqsf2+0x28>
 80011e6:	2cff      	cmp	r4, #255	; 0xff
 80011e8:	d1fa      	bne.n	80011e0 <__eqsf2+0x28>
 80011ea:	2e00      	cmp	r6, #0
 80011ec:	d1f8      	bne.n	80011e0 <__eqsf2+0x28>
 80011ee:	428b      	cmp	r3, r1
 80011f0:	d006      	beq.n	8001200 <__eqsf2+0x48>
 80011f2:	2001      	movs	r0, #1
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	d1f3      	bne.n	80011e0 <__eqsf2+0x28>
 80011f8:	0028      	movs	r0, r5
 80011fa:	1e43      	subs	r3, r0, #1
 80011fc:	4198      	sbcs	r0, r3
 80011fe:	e7ef      	b.n	80011e0 <__eqsf2+0x28>
 8001200:	2000      	movs	r0, #0
 8001202:	e7ed      	b.n	80011e0 <__eqsf2+0x28>

08001204 <__gesf2>:
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	0042      	lsls	r2, r0, #1
 8001208:	0245      	lsls	r5, r0, #9
 800120a:	024e      	lsls	r6, r1, #9
 800120c:	004c      	lsls	r4, r1, #1
 800120e:	0fc3      	lsrs	r3, r0, #31
 8001210:	0a6d      	lsrs	r5, r5, #9
 8001212:	0e12      	lsrs	r2, r2, #24
 8001214:	0a76      	lsrs	r6, r6, #9
 8001216:	0e24      	lsrs	r4, r4, #24
 8001218:	0fc8      	lsrs	r0, r1, #31
 800121a:	2aff      	cmp	r2, #255	; 0xff
 800121c:	d01b      	beq.n	8001256 <__gesf2+0x52>
 800121e:	2cff      	cmp	r4, #255	; 0xff
 8001220:	d00e      	beq.n	8001240 <__gesf2+0x3c>
 8001222:	2a00      	cmp	r2, #0
 8001224:	d11b      	bne.n	800125e <__gesf2+0x5a>
 8001226:	2c00      	cmp	r4, #0
 8001228:	d101      	bne.n	800122e <__gesf2+0x2a>
 800122a:	2e00      	cmp	r6, #0
 800122c:	d01c      	beq.n	8001268 <__gesf2+0x64>
 800122e:	2d00      	cmp	r5, #0
 8001230:	d00c      	beq.n	800124c <__gesf2+0x48>
 8001232:	4283      	cmp	r3, r0
 8001234:	d01c      	beq.n	8001270 <__gesf2+0x6c>
 8001236:	2102      	movs	r1, #2
 8001238:	1e58      	subs	r0, r3, #1
 800123a:	4008      	ands	r0, r1
 800123c:	3801      	subs	r0, #1
 800123e:	bd70      	pop	{r4, r5, r6, pc}
 8001240:	2e00      	cmp	r6, #0
 8001242:	d122      	bne.n	800128a <__gesf2+0x86>
 8001244:	2a00      	cmp	r2, #0
 8001246:	d1f4      	bne.n	8001232 <__gesf2+0x2e>
 8001248:	2d00      	cmp	r5, #0
 800124a:	d1f2      	bne.n	8001232 <__gesf2+0x2e>
 800124c:	2800      	cmp	r0, #0
 800124e:	d1f6      	bne.n	800123e <__gesf2+0x3a>
 8001250:	2001      	movs	r0, #1
 8001252:	4240      	negs	r0, r0
 8001254:	e7f3      	b.n	800123e <__gesf2+0x3a>
 8001256:	2d00      	cmp	r5, #0
 8001258:	d117      	bne.n	800128a <__gesf2+0x86>
 800125a:	2cff      	cmp	r4, #255	; 0xff
 800125c:	d0f0      	beq.n	8001240 <__gesf2+0x3c>
 800125e:	2c00      	cmp	r4, #0
 8001260:	d1e7      	bne.n	8001232 <__gesf2+0x2e>
 8001262:	2e00      	cmp	r6, #0
 8001264:	d1e5      	bne.n	8001232 <__gesf2+0x2e>
 8001266:	e7e6      	b.n	8001236 <__gesf2+0x32>
 8001268:	2000      	movs	r0, #0
 800126a:	2d00      	cmp	r5, #0
 800126c:	d0e7      	beq.n	800123e <__gesf2+0x3a>
 800126e:	e7e2      	b.n	8001236 <__gesf2+0x32>
 8001270:	42a2      	cmp	r2, r4
 8001272:	dc05      	bgt.n	8001280 <__gesf2+0x7c>
 8001274:	dbea      	blt.n	800124c <__gesf2+0x48>
 8001276:	42b5      	cmp	r5, r6
 8001278:	d802      	bhi.n	8001280 <__gesf2+0x7c>
 800127a:	d3e7      	bcc.n	800124c <__gesf2+0x48>
 800127c:	2000      	movs	r0, #0
 800127e:	e7de      	b.n	800123e <__gesf2+0x3a>
 8001280:	4243      	negs	r3, r0
 8001282:	4158      	adcs	r0, r3
 8001284:	0040      	lsls	r0, r0, #1
 8001286:	3801      	subs	r0, #1
 8001288:	e7d9      	b.n	800123e <__gesf2+0x3a>
 800128a:	2002      	movs	r0, #2
 800128c:	4240      	negs	r0, r0
 800128e:	e7d6      	b.n	800123e <__gesf2+0x3a>

08001290 <__lesf2>:
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	0042      	lsls	r2, r0, #1
 8001294:	0245      	lsls	r5, r0, #9
 8001296:	024e      	lsls	r6, r1, #9
 8001298:	004c      	lsls	r4, r1, #1
 800129a:	0fc3      	lsrs	r3, r0, #31
 800129c:	0a6d      	lsrs	r5, r5, #9
 800129e:	0e12      	lsrs	r2, r2, #24
 80012a0:	0a76      	lsrs	r6, r6, #9
 80012a2:	0e24      	lsrs	r4, r4, #24
 80012a4:	0fc8      	lsrs	r0, r1, #31
 80012a6:	2aff      	cmp	r2, #255	; 0xff
 80012a8:	d00b      	beq.n	80012c2 <__lesf2+0x32>
 80012aa:	2cff      	cmp	r4, #255	; 0xff
 80012ac:	d00d      	beq.n	80012ca <__lesf2+0x3a>
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d11f      	bne.n	80012f2 <__lesf2+0x62>
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d116      	bne.n	80012e4 <__lesf2+0x54>
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	d114      	bne.n	80012e4 <__lesf2+0x54>
 80012ba:	2000      	movs	r0, #0
 80012bc:	2d00      	cmp	r5, #0
 80012be:	d010      	beq.n	80012e2 <__lesf2+0x52>
 80012c0:	e009      	b.n	80012d6 <__lesf2+0x46>
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	d10c      	bne.n	80012e0 <__lesf2+0x50>
 80012c6:	2cff      	cmp	r4, #255	; 0xff
 80012c8:	d113      	bne.n	80012f2 <__lesf2+0x62>
 80012ca:	2e00      	cmp	r6, #0
 80012cc:	d108      	bne.n	80012e0 <__lesf2+0x50>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d008      	beq.n	80012e4 <__lesf2+0x54>
 80012d2:	4283      	cmp	r3, r0
 80012d4:	d012      	beq.n	80012fc <__lesf2+0x6c>
 80012d6:	2102      	movs	r1, #2
 80012d8:	1e58      	subs	r0, r3, #1
 80012da:	4008      	ands	r0, r1
 80012dc:	3801      	subs	r0, #1
 80012de:	e000      	b.n	80012e2 <__lesf2+0x52>
 80012e0:	2002      	movs	r0, #2
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	2d00      	cmp	r5, #0
 80012e6:	d1f4      	bne.n	80012d2 <__lesf2+0x42>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d1fa      	bne.n	80012e2 <__lesf2+0x52>
 80012ec:	2001      	movs	r0, #1
 80012ee:	4240      	negs	r0, r0
 80012f0:	e7f7      	b.n	80012e2 <__lesf2+0x52>
 80012f2:	2c00      	cmp	r4, #0
 80012f4:	d1ed      	bne.n	80012d2 <__lesf2+0x42>
 80012f6:	2e00      	cmp	r6, #0
 80012f8:	d1eb      	bne.n	80012d2 <__lesf2+0x42>
 80012fa:	e7ec      	b.n	80012d6 <__lesf2+0x46>
 80012fc:	42a2      	cmp	r2, r4
 80012fe:	dc05      	bgt.n	800130c <__lesf2+0x7c>
 8001300:	dbf2      	blt.n	80012e8 <__lesf2+0x58>
 8001302:	42b5      	cmp	r5, r6
 8001304:	d802      	bhi.n	800130c <__lesf2+0x7c>
 8001306:	d3ef      	bcc.n	80012e8 <__lesf2+0x58>
 8001308:	2000      	movs	r0, #0
 800130a:	e7ea      	b.n	80012e2 <__lesf2+0x52>
 800130c:	4243      	negs	r3, r0
 800130e:	4158      	adcs	r0, r3
 8001310:	0040      	lsls	r0, r0, #1
 8001312:	3801      	subs	r0, #1
 8001314:	e7e5      	b.n	80012e2 <__lesf2+0x52>
 8001316:	46c0      	nop			; (mov r8, r8)

08001318 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	0002      	movs	r2, r0
 8001320:	1dbb      	adds	r3, r7, #6
 8001322:	801a      	strh	r2, [r3, #0]
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	1c0a      	adds	r2, r1, #0
 8001328:	801a      	strh	r2, [r3, #0]
	if ((size+offset)<PAGE_SIZE) return size;
 800132a:	1dbb      	adds	r3, r7, #6
 800132c:	881a      	ldrh	r2, [r3, #0]
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	18d3      	adds	r3, r2, r3
 8001334:	2b3f      	cmp	r3, #63	; 0x3f
 8001336:	dc02      	bgt.n	800133e <bytestowrite+0x26>
 8001338:	1dbb      	adds	r3, r7, #6
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	e004      	b.n	8001348 <bytestowrite+0x30>
	else return PAGE_SIZE-offset;
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	2240      	movs	r2, #64	; 0x40
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	b29b      	uxth	r3, r3
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001352:	b08f      	sub	sp, #60	; 0x3c
 8001354:	af04      	add	r7, sp, #16
 8001356:	0004      	movs	r4, r0
 8001358:	0008      	movs	r0, r1
 800135a:	60ba      	str	r2, [r7, #8]
 800135c:	0019      	movs	r1, r3
 800135e:	250e      	movs	r5, #14
 8001360:	197b      	adds	r3, r7, r5
 8001362:	1c22      	adds	r2, r4, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	240c      	movs	r4, #12
 8001368:	193b      	adds	r3, r7, r4
 800136a:	1c02      	adds	r2, r0, #0
 800136c:	801a      	strh	r2, [r3, #0]
 800136e:	1dbb      	adds	r3, r7, #6
 8001370:	1c0a      	adds	r2, r1, #0
 8001372:	801a      	strh	r2, [r3, #0]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8001374:	2306      	movs	r3, #6
 8001376:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8001378:	2326      	movs	r3, #38	; 0x26
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	197a      	adds	r2, r7, r5
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	193b      	adds	r3, r7, r4
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	18d3      	adds	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	da00      	bge.n	8001392 <EEPROM_Write+0x42>
 8001390:	333f      	adds	r3, #63	; 0x3f
 8001392:	119b      	asrs	r3, r3, #6
 8001394:	b299      	uxth	r1, r3
 8001396:	201a      	movs	r0, #26
 8001398:	183b      	adds	r3, r7, r0
 800139a:	220e      	movs	r2, #14
 800139c:	18ba      	adds	r2, r7, r2
 800139e:	8812      	ldrh	r2, [r2, #0]
 80013a0:	188a      	adds	r2, r1, r2
 80013a2:	801a      	strh	r2, [r3, #0]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80013a4:	183a      	adds	r2, r7, r0
 80013a6:	2326      	movs	r3, #38	; 0x26
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	2318      	movs	r3, #24
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	3201      	adds	r2, #1
 80013b8:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 80013ba:	2324      	movs	r3, #36	; 0x24
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	2200      	movs	r2, #0
 80013c0:	801a      	strh	r2, [r3, #0]

	// write the data
	for (int i=0; i<numofpages; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	e04d      	b.n	8001464 <EEPROM_Write+0x114>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80013c8:	2626      	movs	r6, #38	; 0x26
 80013ca:	19bb      	adds	r3, r7, r6
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	409a      	lsls	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	210c      	movs	r1, #12
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2000      	movs	r0, #0
 80013dc:	5e1b      	ldrsh	r3, [r3, r0]
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	2316      	movs	r3, #22
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80013e8:	2514      	movs	r5, #20
 80013ea:	197c      	adds	r4, r7, r5
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	881a      	ldrh	r2, [r3, #0]
 80013f0:	1dbb      	adds	r3, r7, #6
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	0011      	movs	r1, r2
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff ff8e 	bl	8001318 <bytestowrite>
 80013fc:	0003      	movs	r3, r0
 80013fe:	8023      	strh	r3, [r4, #0]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8001400:	2424      	movs	r4, #36	; 0x24
 8001402:	193b      	adds	r3, r7, r4
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	18d3      	adds	r3, r2, r3
 800140a:	2216      	movs	r2, #22
 800140c:	18ba      	adds	r2, r7, r2
 800140e:	8811      	ldrh	r1, [r2, #0]
 8001410:	481a      	ldr	r0, [pc, #104]	; (800147c <EEPROM_Write+0x12c>)
 8001412:	22fa      	movs	r2, #250	; 0xfa
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	9202      	str	r2, [sp, #8]
 8001418:	197a      	adds	r2, r7, r5
 800141a:	8812      	ldrh	r2, [r2, #0]
 800141c:	9201      	str	r2, [sp, #4]
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2302      	movs	r3, #2
 8001422:	000a      	movs	r2, r1
 8001424:	21a0      	movs	r1, #160	; 0xa0
 8001426:	f004 fafb 	bl	8005a20 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 800142a:	19bb      	adds	r3, r7, r6
 800142c:	19ba      	adds	r2, r7, r6
 800142e:	8812      	ldrh	r2, [r2, #0]
 8001430:	3201      	adds	r2, #1
 8001432:	801a      	strh	r2, [r3, #0]
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8001434:	210c      	movs	r1, #12
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2200      	movs	r2, #0
 800143a:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;  // reduce the size of the bytes
 800143c:	1dbb      	adds	r3, r7, #6
 800143e:	1db9      	adds	r1, r7, #6
 8001440:	197a      	adds	r2, r7, r5
 8001442:	8809      	ldrh	r1, [r1, #0]
 8001444:	8812      	ldrh	r2, [r2, #0]
 8001446:	1a8a      	subs	r2, r1, r2
 8001448:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;  // update the position for the data buffer
 800144a:	193b      	adds	r3, r7, r4
 800144c:	1939      	adds	r1, r7, r4
 800144e:	197a      	adds	r2, r7, r5
 8001450:	8809      	ldrh	r1, [r1, #0]
 8001452:	8812      	ldrh	r2, [r2, #0]
 8001454:	188a      	adds	r2, r1, r2
 8001456:	801a      	strh	r2, [r3, #0]

		HAL_Delay (5);  // Write cycle delay (5ms)
 8001458:	2005      	movs	r0, #5
 800145a:	f003 f91d 	bl	8004698 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	3301      	adds	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
 8001464:	2318      	movs	r3, #24
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	6a3a      	ldr	r2, [r7, #32]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbab      	blt.n	80013c8 <EEPROM_Write+0x78>
	}
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b00b      	add	sp, #44	; 0x2c
 8001478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	20000138 	.word	0x20000138

08001480 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	b08f      	sub	sp, #60	; 0x3c
 8001484:	af04      	add	r7, sp, #16
 8001486:	0004      	movs	r4, r0
 8001488:	0008      	movs	r0, r1
 800148a:	60ba      	str	r2, [r7, #8]
 800148c:	0019      	movs	r1, r3
 800148e:	250e      	movs	r5, #14
 8001490:	197b      	adds	r3, r7, r5
 8001492:	1c22      	adds	r2, r4, #0
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	240c      	movs	r4, #12
 8001498:	193b      	adds	r3, r7, r4
 800149a:	1c02      	adds	r2, r0, #0
 800149c:	801a      	strh	r2, [r3, #0]
 800149e:	1dbb      	adds	r3, r7, #6
 80014a0:	1c0a      	adds	r2, r1, #0
 80014a2:	801a      	strh	r2, [r3, #0]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80014a4:	2306      	movs	r3, #6
 80014a6:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80014a8:	2326      	movs	r3, #38	; 0x26
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	197a      	adds	r2, r7, r5
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80014b2:	1dbb      	adds	r3, r7, #6
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da00      	bge.n	80014c2 <EEPROM_Read+0x42>
 80014c0:	333f      	adds	r3, #63	; 0x3f
 80014c2:	119b      	asrs	r3, r3, #6
 80014c4:	b299      	uxth	r1, r3
 80014c6:	201a      	movs	r0, #26
 80014c8:	183b      	adds	r3, r7, r0
 80014ca:	220e      	movs	r2, #14
 80014cc:	18ba      	adds	r2, r7, r2
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	188a      	adds	r2, r1, r2
 80014d2:	801a      	strh	r2, [r3, #0]

	uint16_t numofpages = (endPage-startPage) + 1;
 80014d4:	183a      	adds	r2, r7, r0
 80014d6:	2326      	movs	r3, #38	; 0x26
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	8812      	ldrh	r2, [r2, #0]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	2318      	movs	r3, #24
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	3201      	adds	r2, #1
 80014e8:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 80014ea:	2324      	movs	r3, #36	; 0x24
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<numofpages; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
 80014f6:	e04a      	b.n	800158e <EEPROM_Read+0x10e>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80014f8:	2626      	movs	r6, #38	; 0x26
 80014fa:	19bb      	adds	r3, r7, r6
 80014fc:	881a      	ldrh	r2, [r3, #0]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	409a      	lsls	r2, r3
 8001502:	0013      	movs	r3, r2
 8001504:	b21a      	sxth	r2, r3
 8001506:	210c      	movs	r1, #12
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2000      	movs	r0, #0
 800150c:	5e1b      	ldrsh	r3, [r3, r0]
 800150e:	4313      	orrs	r3, r2
 8001510:	b21a      	sxth	r2, r3
 8001512:	2316      	movs	r3, #22
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8001518:	2514      	movs	r5, #20
 800151a:	197c      	adds	r4, r7, r5
 800151c:	187b      	adds	r3, r7, r1
 800151e:	881a      	ldrh	r2, [r3, #0]
 8001520:	1dbb      	adds	r3, r7, #6
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	0011      	movs	r1, r2
 8001526:	0018      	movs	r0, r3
 8001528:	f7ff fef6 	bl	8001318 <bytestowrite>
 800152c:	0003      	movs	r3, r0
 800152e:	8023      	strh	r3, [r4, #0]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8001530:	2424      	movs	r4, #36	; 0x24
 8001532:	193b      	adds	r3, r7, r4
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	2216      	movs	r2, #22
 800153c:	18ba      	adds	r2, r7, r2
 800153e:	8811      	ldrh	r1, [r2, #0]
 8001540:	4818      	ldr	r0, [pc, #96]	; (80015a4 <EEPROM_Read+0x124>)
 8001542:	22fa      	movs	r2, #250	; 0xfa
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	9202      	str	r2, [sp, #8]
 8001548:	197a      	adds	r2, r7, r5
 800154a:	8812      	ldrh	r2, [r2, #0]
 800154c:	9201      	str	r2, [sp, #4]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2302      	movs	r3, #2
 8001552:	000a      	movs	r2, r1
 8001554:	21a0      	movs	r1, #160	; 0xa0
 8001556:	f004 fb91 	bl	8005c7c <HAL_I2C_Mem_Read>
		startPage += 1;
 800155a:	19bb      	adds	r3, r7, r6
 800155c:	19ba      	adds	r2, r7, r6
 800155e:	8812      	ldrh	r2, [r2, #0]
 8001560:	3201      	adds	r2, #1
 8001562:	801a      	strh	r2, [r3, #0]
		offset=0;
 8001564:	210c      	movs	r1, #12
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 800156c:	1dbb      	adds	r3, r7, #6
 800156e:	1db9      	adds	r1, r7, #6
 8001570:	197a      	adds	r2, r7, r5
 8001572:	8809      	ldrh	r1, [r1, #0]
 8001574:	8812      	ldrh	r2, [r2, #0]
 8001576:	1a8a      	subs	r2, r1, r2
 8001578:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;
 800157a:	193b      	adds	r3, r7, r4
 800157c:	1939      	adds	r1, r7, r4
 800157e:	197a      	adds	r2, r7, r5
 8001580:	8809      	ldrh	r1, [r1, #0]
 8001582:	8812      	ldrh	r2, [r2, #0]
 8001584:	188a      	adds	r2, r1, r2
 8001586:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numofpages; i++)
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	3301      	adds	r3, #1
 800158c:	623b      	str	r3, [r7, #32]
 800158e:	2318      	movs	r3, #24
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	6a3a      	ldr	r2, [r7, #32]
 8001596:	429a      	cmp	r2, r3
 8001598:	dbae      	blt.n	80014f8 <EEPROM_Read+0x78>
	}
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b00b      	add	sp, #44	; 0x2c
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a4:	20000138 	.word	0x20000138

080015a8 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b098      	sub	sp, #96	; 0x60
 80015ac:	af04      	add	r7, sp, #16
 80015ae:	0002      	movs	r2, r0
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	801a      	strh	r2, [r3, #0]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 80015b4:	2306      	movs	r3, #6
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 80015b8:	1dbb      	adds	r3, r7, #6
 80015ba:	881a      	ldrh	r2, [r3, #0]
 80015bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015be:	409a      	lsls	r2, r3
 80015c0:	244a      	movs	r4, #74	; 0x4a
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	801a      	strh	r2, [r3, #0]

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80015c6:	2508      	movs	r5, #8
 80015c8:	197b      	adds	r3, r7, r5
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	21ff      	movs	r1, #255	; 0xff
 80015ce:	0018      	movs	r0, r3
 80015d0:	f006 f989 	bl	80078e6 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 80015d4:	193b      	adds	r3, r7, r4
 80015d6:	881a      	ldrh	r2, [r3, #0]
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <EEPROM_PageErase+0x58>)
 80015da:	23fa      	movs	r3, #250	; 0xfa
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	197b      	adds	r3, r7, r5
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2302      	movs	r3, #2
 80015ea:	21a0      	movs	r1, #160	; 0xa0
 80015ec:	f004 fa18 	bl	8005a20 <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay
 80015f0:	2005      	movs	r0, #5
 80015f2:	f003 f851 	bl	8004698 <HAL_Delay>
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b014      	add	sp, #80	; 0x50
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	20000138 	.word	0x20000138

08001604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	4c0c      	ldr	r4, [pc, #48]	; (8001638 <main+0x34>)
 8001608:	44a5      	add	sp, r4
 800160a:	af00      	add	r7, sp, #0

	Initialise();
 800160c:	f000 fa36 	bl	8001a7c <Initialise>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t proximity, temp;
	  uint8_t dataRead[32678];
	  get_sensor_data(&proximity, &temp);
 8001610:	4c0a      	ldr	r4, [pc, #40]	; (800163c <main+0x38>)
 8001612:	193a      	adds	r2, r7, r4
 8001614:	4d0a      	ldr	r5, [pc, #40]	; (8001640 <main+0x3c>)
 8001616:	197b      	adds	r3, r7, r5
 8001618:	0011      	movs	r1, r2
 800161a:	0018      	movs	r0, r3
 800161c:	f000 fa5c 	bl	8001ad8 <get_sensor_data>
	  store_one_set(&temp, &proximity);
 8001620:	197a      	adds	r2, r7, r5
 8001622:	193b      	adds	r3, r7, r4
 8001624:	0011      	movs	r1, r2
 8001626:	0018      	movs	r0, r3
 8001628:	f000 fabc 	bl	8001ba4 <store_one_set>
	  read_all_data(&dataRead);
 800162c:	003b      	movs	r3, r7
 800162e:	0018      	movs	r0, r3
 8001630:	f000 fa72 	bl	8001b18 <read_all_data>
  {
 8001634:	e7ec      	b.n	8001610 <main+0xc>
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	ffff8050 	.word	0xffff8050
 800163c:	00007fa8 	.word	0x00007fa8
 8001640:	00007fac 	.word	0x00007fac

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b097      	sub	sp, #92	; 0x5c
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	2428      	movs	r4, #40	; 0x28
 800164c:	193b      	adds	r3, r7, r4
 800164e:	0018      	movs	r0, r3
 8001650:	2330      	movs	r3, #48	; 0x30
 8001652:	001a      	movs	r2, r3
 8001654:	2100      	movs	r1, #0
 8001656:	f006 f946 	bl	80078e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165a:	2318      	movs	r3, #24
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	0018      	movs	r0, r3
 8001660:	2310      	movs	r3, #16
 8001662:	001a      	movs	r2, r3
 8001664:	2100      	movs	r1, #0
 8001666:	f006 f93e 	bl	80078e6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	0018      	movs	r0, r3
 800166e:	2314      	movs	r3, #20
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f006 f937 	bl	80078e6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001678:	0021      	movs	r1, r4
 800167a:	187b      	adds	r3, r7, r1
 800167c:	221a      	movs	r2, #26
 800167e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2201      	movs	r2, #1
 8001684:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2201      	movs	r2, #1
 800168a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168c:	187b      	adds	r3, r7, r1
 800168e:	2210      	movs	r2, #16
 8001690:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001692:	187b      	adds	r3, r7, r1
 8001694:	2210      	movs	r2, #16
 8001696:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2201      	movs	r2, #1
 800169c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2202      	movs	r2, #2
 80016a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	22a0      	movs	r2, #160	; 0xa0
 80016ae:	0392      	lsls	r2, r2, #14
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	0018      	movs	r0, r3
 80016bc:	f005 f882 	bl	80067c4 <HAL_RCC_OscConfig>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80016c4:	f000 fadc 	bl	8001c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	2118      	movs	r1, #24
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2202      	movs	r2, #2
 80016d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2101      	movs	r1, #1
 80016e6:	0018      	movs	r0, r3
 80016e8:	f005 fb86 	bl	8006df8 <HAL_RCC_ClockConfig>
 80016ec:	1e03      	subs	r3, r0, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80016f0:	f000 fac6 	bl	8001c80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SystemClock_Config+0xdc>)
 80016f8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	0018      	movs	r0, r3
 800170c:	f005 fca6 	bl	800705c <HAL_RCCEx_PeriphCLKConfig>
 8001710:	1e03      	subs	r3, r0, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001714:	f000 fab4 	bl	8001c80 <Error_Handler>
  }
}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b017      	add	sp, #92	; 0x5c
 800171e:	bd90      	pop	{r4, r7, pc}
 8001720:	00010020 	.word	0x00010020

08001724 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	0018      	movs	r0, r3
 800172e:	230c      	movs	r3, #12
 8001730:	001a      	movs	r2, r3
 8001732:	2100      	movs	r1, #0
 8001734:	f006 f8d7 	bl	80078e6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <MX_ADC_Init+0xb0>)
 800173a:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <MX_ADC_Init+0xb4>)
 800173c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <MX_ADC_Init+0xb0>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001752:	2201      	movs	r2, #1
 8001754:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001758:	2204      	movs	r2, #4
 800175a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_ADC_Init+0xb0>)
 800175e:	2200      	movs	r2, #0
 8001760:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001764:	2200      	movs	r2, #0
 8001766:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_ADC_Init+0xb0>)
 800176a:	2200      	movs	r2, #0
 800176c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001770:	2200      	movs	r2, #0
 8001772:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001776:	22c2      	movs	r2, #194	; 0xc2
 8001778:	32ff      	adds	r2, #255	; 0xff
 800177a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_ADC_Init+0xb0>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001784:	2224      	movs	r2, #36	; 0x24
 8001786:	2100      	movs	r1, #0
 8001788:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_ADC_Init+0xb0>)
 800178c:	2201      	movs	r2, #1
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <MX_ADC_Init+0xb0>)
 8001792:	0018      	movs	r0, r3
 8001794:	f002 ffa4 	bl	80046e0 <HAL_ADC_Init>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800179c:	f000 fa70 	bl	8001c80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2209      	movs	r2, #9
 80017a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0152      	lsls	r2, r2, #5
 80017ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	0552      	lsls	r2, r2, #21
 80017b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017b6:	1d3a      	adds	r2, r7, #4
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_ADC_Init+0xb0>)
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f003 f9c7 	bl	8004b50 <HAL_ADC_ConfigChannel>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80017c6:	f000 fa5b 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b004      	add	sp, #16
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	200000f8 	.word	0x200000f8
 80017d8:	40012400 	.word	0x40012400

080017dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_I2C1_Init+0x74>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <MX_I2C1_Init+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_I2C1_Init+0x74>)
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <MX_I2C1_Init+0x7c>)
 80017ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_I2C1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_I2C1_Init+0x74>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_I2C1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_I2C1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_I2C1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_I2C1_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_I2C1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_I2C1_Init+0x74>)
 8001818:	0018      	movs	r0, r3
 800181a:	f003 fe5b 	bl	80054d4 <HAL_I2C_Init>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d001      	beq.n	8001826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001822:	f000 fa2d 	bl	8001c80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <MX_I2C1_Init+0x74>)
 8001828:	2100      	movs	r1, #0
 800182a:	0018      	movs	r0, r3
 800182c:	f004 ff32 	bl	8006694 <HAL_I2CEx_ConfigAnalogFilter>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001834:	f000 fa24 	bl	8001c80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <MX_I2C1_Init+0x74>)
 800183a:	2100      	movs	r1, #0
 800183c:	0018      	movs	r0, r3
 800183e:	f004 ff75 	bl	800672c <HAL_I2CEx_ConfigDigitalFilter>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d001      	beq.n	800184a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001846:	f000 fa1b 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000138 	.word	0x20000138
 8001854:	40005400 	.word	0x40005400
 8001858:	2000090e 	.word	0x2000090e

0800185c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	0018      	movs	r0, r3
 8001866:	2314      	movs	r3, #20
 8001868:	001a      	movs	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	f006 f83b 	bl	80078e6 <memset>
  RTC_DateTypeDef sDate = {0};
 8001870:	003b      	movs	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_RTC_Init+0xbc>)
 8001878:	4a28      	ldr	r2, [pc, #160]	; (800191c <MX_RTC_Init+0xc0>)
 800187a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <MX_RTC_Init+0xbc>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_RTC_Init+0xbc>)
 8001884:	227f      	movs	r2, #127	; 0x7f
 8001886:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <MX_RTC_Init+0xbc>)
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_RTC_Init+0xbc>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <MX_RTC_Init+0xbc>)
 8001896:	2200      	movs	r2, #0
 8001898:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_RTC_Init+0xbc>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_RTC_Init+0xbc>)
 80018a2:	0018      	movs	r0, r3
 80018a4:	f005 fcb8 	bl	8007218 <HAL_RTC_Init>
 80018a8:	1e03      	subs	r3, r0, #0
 80018aa:	d001      	beq.n	80018b0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80018ac:	f000 f9e8 	bl	8001c80 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2216      	movs	r2, #22
 80018b4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x30;
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2230      	movs	r2, #48	; 0x30
 80018ba:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018ce:	1d39      	adds	r1, r7, #4
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_RTC_Init+0xbc>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	0018      	movs	r0, r3
 80018d6:	f005 fd33 	bl	8007340 <HAL_RTC_SetTime>
 80018da:	1e03      	subs	r3, r0, #0
 80018dc:	d001      	beq.n	80018e2 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80018de:	f000 f9cf 	bl	8001c80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80018e2:	003b      	movs	r3, r7
 80018e4:	2204      	movs	r2, #4
 80018e6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 80018e8:	003b      	movs	r3, r7
 80018ea:	2205      	movs	r2, #5
 80018ec:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x19;
 80018ee:	003b      	movs	r3, r7
 80018f0:	2219      	movs	r2, #25
 80018f2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x22;
 80018f4:	003b      	movs	r3, r7
 80018f6:	2222      	movs	r2, #34	; 0x22
 80018f8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018fa:	0039      	movs	r1, r7
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_RTC_Init+0xbc>)
 80018fe:	2201      	movs	r2, #1
 8001900:	0018      	movs	r0, r3
 8001902:	f005 fe37 	bl	8007574 <HAL_RTC_SetDate>
 8001906:	1e03      	subs	r3, r0, #0
 8001908:	d001      	beq.n	800190e <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800190a:	f000 f9b9 	bl	8001c80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b006      	add	sp, #24
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	20000184 	.word	0x20000184
 800191c:	40002800 	.word	0x40002800

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	240c      	movs	r4, #12
 8001928:	193b      	adds	r3, r7, r4
 800192a:	0018      	movs	r0, r3
 800192c:	2314      	movs	r3, #20
 800192e:	001a      	movs	r2, r3
 8001930:	2100      	movs	r1, #0
 8001932:	f005 ffd8 	bl	80078e6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <MX_GPIO_Init+0x150>)
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <MX_GPIO_Init+0x150>)
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	0289      	lsls	r1, r1, #10
 8001940:	430a      	orrs	r2, r1
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <MX_GPIO_Init+0x150>)
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	029b      	lsls	r3, r3, #10
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <MX_GPIO_Init+0x150>)
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <MX_GPIO_Init+0x150>)
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	02c9      	lsls	r1, r1, #11
 800195c:	430a      	orrs	r2, r1
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <MX_GPIO_Init+0x150>)
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	02db      	lsls	r3, r3, #11
 8001968:	4013      	ands	r3, r2
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <MX_GPIO_Init+0x150>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <MX_GPIO_Init+0x150>)
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	0309      	lsls	r1, r1, #12
 8001978:	430a      	orrs	r2, r1
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <MX_GPIO_Init+0x150>)
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	031b      	lsls	r3, r3, #12
 8001984:	4013      	ands	r3, r2
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Temp_Active_Pin|Proximity_Active_Pin, GPIO_PIN_RESET);
 800198a:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <MX_GPIO_Init+0x154>)
 800198c:	2200      	movs	r2, #0
 800198e:	2111      	movs	r1, #17
 8001990:	0018      	movs	r0, r3
 8001992:	f003 fd65 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001996:	23c0      	movs	r3, #192	; 0xc0
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4837      	ldr	r0, [pc, #220]	; (8001a78 <MX_GPIO_Init+0x158>)
 800199c:	2200      	movs	r2, #0
 800199e:	0019      	movs	r1, r3
 80019a0:	f003 fd5e 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019a4:	193b      	adds	r3, r7, r4
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	2290      	movs	r2, #144	; 0x90
 80019ae:	0352      	lsls	r2, r2, #13
 80019b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019b8:	193a      	adds	r2, r7, r4
 80019ba:	2390      	movs	r3, #144	; 0x90
 80019bc:	05db      	lsls	r3, r3, #23
 80019be:	0011      	movs	r1, r2
 80019c0:	0018      	movs	r0, r3
 80019c2:	f003 fbdd 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_on_Pin */
  GPIO_InitStruct.Pin = USB_on_Pin;
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	2210      	movs	r2, #16
 80019ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019cc:	193b      	adds	r3, r7, r4
 80019ce:	2288      	movs	r2, #136	; 0x88
 80019d0:	0352      	lsls	r2, r2, #13
 80019d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_on_GPIO_Port, &GPIO_InitStruct);
 80019da:	193a      	adds	r2, r7, r4
 80019dc:	2390      	movs	r3, #144	; 0x90
 80019de:	05db      	lsls	r3, r3, #23
 80019e0:	0011      	movs	r1, r2
 80019e2:	0018      	movs	r0, r3
 80019e4:	f003 fbcc 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pins : Temp_Active_Pin Proximity_Active_Pin */
  GPIO_InitStruct.Pin = Temp_Active_Pin|Proximity_Active_Pin;
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	2211      	movs	r2, #17
 80019ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	2201      	movs	r2, #1
 80019f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <MX_GPIO_Init+0x154>)
 8001a04:	0019      	movs	r1, r3
 8001a06:	0010      	movs	r0, r2
 8001a08:	f003 fbba 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001a0c:	0021      	movs	r1, r4
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	22c0      	movs	r2, #192	; 0xc0
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	000c      	movs	r4, r1
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <MX_GPIO_Init+0x158>)
 8001a2e:	0019      	movs	r1, r3
 8001a30:	0010      	movs	r0, r2
 8001a32:	f003 fba5 	bl	8005180 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Interrupt_Pin */
  GPIO_InitStruct.Pin = Proximity_Interrupt_Pin;
 8001a36:	0021      	movs	r1, r4
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Proximity_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <MX_GPIO_Init+0x154>)
 8001a4e:	0019      	movs	r1, r3
 8001a50:	0010      	movs	r0, r2
 8001a52:	f003 fb95 	bl	8005180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2101      	movs	r1, #1
 8001a5a:	2007      	movs	r0, #7
 8001a5c:	f003 fb5e 	bl	800511c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001a60:	2007      	movs	r0, #7
 8001a62:	f003 fb70 	bl	8005146 <HAL_NVIC_EnableIRQ>

}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b009      	add	sp, #36	; 0x24
 8001a6c:	bd90      	pop	{r4, r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000400 	.word	0x48000400
 8001a78:	48000800 	.word	0x48000800

08001a7c <Initialise>:

/* USER CODE BEGIN 4 */
void Initialise(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
	  HAL_Init();
 8001a82:	f002 fda5 	bl	80045d0 <HAL_Init>

	  SystemClock_Config();
 8001a86:	f7ff fddd 	bl	8001644 <SystemClock_Config>
	  MX_GPIO_Init();
 8001a8a:	f7ff ff49 	bl	8001920 <MX_GPIO_Init>
	  MX_I2C1_Init();
 8001a8e:	f7ff fea5 	bl	80017dc <MX_I2C1_Init>
	  MX_RTC_Init();
 8001a92:	f7ff fee3 	bl	800185c <MX_RTC_Init>
	  MX_ADC_Init();
 8001a96:	f7ff fe45 	bl	8001724 <MX_ADC_Init>
	  Sensors_Start(&hadc, &hi2c1);
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <Initialise+0x54>)
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <Initialise+0x58>)
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 fa6f 	bl	8001f84 <Sensors_Start>

	  for (int i = 0; i<512;i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	e007      	b.n	8001abc <Initialise+0x40>
	  {
		  EEPROM_PageErase(i);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff fd79 	bl	80015a8 <EEPROM_PageErase>
	  for (int i = 0; i<512;i++)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbf2      	blt.n	8001aac <Initialise+0x30>
	  }
}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000138 	.word	0x20000138
 8001ad4:	200000f8 	.word	0x200000f8

08001ad8 <get_sensor_data>:

void get_sensor_data(uint32_t *proximity,uint32_t *temp)
{
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	 struct SensorData data;
	 SensorErrorType result = Sensors_GetMeasurement(&data, 1);
 8001ae2:	2317      	movs	r3, #23
 8001ae4:	18fc      	adds	r4, r7, r3
 8001ae6:	250c      	movs	r5, #12
 8001ae8:	197b      	adds	r3, r7, r5
 8001aea:	2101      	movs	r1, #1
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fa71 	bl	8001fd4 <Sensors_GetMeasurement>
 8001af2:	0003      	movs	r3, r0
 8001af4:	7023      	strb	r3, [r4, #0]
	 *proximity = data.prox;
 8001af6:	197b      	adds	r3, r7, r5
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	001a      	movs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	601a      	str	r2, [r3, #0]
	 *temp = data.temp;
 8001b00:	197b      	adds	r3, r7, r5
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	1c18      	adds	r0, r3, #0
 8001b06:	f7fe fc75 	bl	80003f4 <__aeabi_f2uiz>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	601a      	str	r2, [r3, #0]

}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b006      	add	sp, #24
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}

08001b18 <read_all_data>:

void read_all_data (uint8_t (*dataRead)[32678])
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	EEPROM_Read(1, 0, *dataRead, 32768);
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	2100      	movs	r1, #0
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff fca9 	bl	8001480 <EEPROM_Read>
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <get_time_to_store>:
	}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
}

void get_time_to_store(uint8_t (*time)[3],uint8_t (*date)[3])
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	 RTC_DateTypeDef gDate;
	 RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001b42:	2408      	movs	r4, #8
 8001b44:	1939      	adds	r1, r7, r4
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <get_time_to_store+0x68>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f005 fcb4 	bl	80074b8 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001b50:	251c      	movs	r5, #28
 8001b52:	1979      	adds	r1, r7, r5
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <get_time_to_store+0x68>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f005 fdb1 	bl	80076c0 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	 *time[0] = gTime.Hours;
 8001b5e:	0021      	movs	r1, r4
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	701a      	strb	r2, [r3, #0]
	 *time[1] = gTime.Minutes;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3303      	adds	r3, #3
 8001b6c:	187a      	adds	r2, r7, r1
 8001b6e:	7852      	ldrb	r2, [r2, #1]
 8001b70:	701a      	strb	r2, [r3, #0]
	 *time[2] = gTime.Seconds;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3306      	adds	r3, #6
 8001b76:	187a      	adds	r2, r7, r1
 8001b78:	7892      	ldrb	r2, [r2, #2]
 8001b7a:	701a      	strb	r2, [r3, #0]
	/* Display date Format: dd-mm-yy */
	 *date[0] = gDate.Date;
 8001b7c:	197b      	adds	r3, r7, r5
 8001b7e:	789a      	ldrb	r2, [r3, #2]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	701a      	strb	r2, [r3, #0]
	 *date[1] = gDate.Month;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	3303      	adds	r3, #3
 8001b88:	197a      	adds	r2, r7, r5
 8001b8a:	7852      	ldrb	r2, [r2, #1]
 8001b8c:	701a      	strb	r2, [r3, #0]
	 *date[2] = gDate.Year;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3306      	adds	r3, #6
 8001b92:	197a      	adds	r2, r7, r5
 8001b94:	78d2      	ldrb	r2, [r2, #3]
 8001b96:	701a      	strb	r2, [r3, #0]
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b008      	add	sp, #32
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba0:	20000184 	.word	0x20000184

08001ba4 <store_one_set>:

void store_one_set(uint32_t *temp, uint32_t *proximity)
{
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba6:	b08b      	sub	sp, #44	; 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
	uint8_t time[3], date[3];
	get_time_to_store(&time, &date);
 8001bae:	2518      	movs	r5, #24
 8001bb0:	197a      	adds	r2, r7, r5
 8001bb2:	261c      	movs	r6, #28
 8001bb4:	19bb      	adds	r3, r7, r6
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff ffbd 	bl	8001b38 <get_time_to_store>
	if(ID<1024)
	{
		uint8_t datas[16];
		datas[0] = ID;
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <store_one_set+0xd4>)
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	2408      	movs	r4, #8
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	701a      	strb	r2, [r3, #0]
		memcpy(datas + 1, &temp, sizeof(uint32_t));
 8001bc8:	193b      	adds	r3, r7, r4
 8001bca:	3301      	adds	r3, #1
 8001bcc:	1d39      	adds	r1, r7, #4
 8001bce:	2204      	movs	r2, #4
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f005 fe7f 	bl	80078d4 <memcpy>
		memcpy(datas + 5, &proximity, sizeof(uint32_t));
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	3305      	adds	r3, #5
 8001bda:	0039      	movs	r1, r7
 8001bdc:	2204      	movs	r2, #4
 8001bde:	0018      	movs	r0, r3
 8001be0:	f005 fe78 	bl	80078d4 <memcpy>
		memcpy(datas + 9, time, 3 * sizeof(uint8_t));
 8001be4:	193b      	adds	r3, r7, r4
 8001be6:	3309      	adds	r3, #9
 8001be8:	19ba      	adds	r2, r7, r6
 8001bea:	0018      	movs	r0, r3
 8001bec:	0011      	movs	r1, r2
 8001bee:	2303      	movs	r3, #3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	f005 fe6f 	bl	80078d4 <memcpy>
		memcpy(datas + 12, date, 3 * sizeof(uint8_t));
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	197a      	adds	r2, r7, r5
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	0011      	movs	r1, r2
 8001c00:	2303      	movs	r3, #3
 8001c02:	001a      	movs	r2, r3
 8001c04:	f005 fe66 	bl	80078d4 <memcpy>
		uint8_t pages = (ID-1)/4+1;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <store_one_set+0xd4>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da00      	bge.n	8001c14 <store_one_set+0x70>
 8001c12:	3303      	adds	r3, #3
 8001c14:	109b      	asrs	r3, r3, #2
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	2327      	movs	r3, #39	; 0x27
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	3201      	adds	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
		uint16_t sizes = 16;
 8001c20:	2324      	movs	r3, #36	; 0x24
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2210      	movs	r2, #16
 8001c26:	801a      	strh	r2, [r3, #0]
		uint16_t offsets = (ID-1)%4*16;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <store_one_set+0xd4>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <store_one_set+0xd8>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	d504      	bpl.n	8001c3e <store_one_set+0x9a>
 8001c34:	3b01      	subs	r3, #1
 8001c36:	2204      	movs	r2, #4
 8001c38:	4252      	negs	r2, r2
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2122      	movs	r1, #34	; 0x22
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	801a      	strh	r2, [r3, #0]

		EEPROM_Write (pages, offsets , datas ,sizes);
 8001c48:	2327      	movs	r3, #39	; 0x27
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b298      	uxth	r0, r3
 8001c50:	2324      	movs	r3, #36	; 0x24
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	881c      	ldrh	r4, [r3, #0]
 8001c56:	2308      	movs	r3, #8
 8001c58:	18fa      	adds	r2, r7, r3
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	8819      	ldrh	r1, [r3, #0]
 8001c5e:	0023      	movs	r3, r4
 8001c60:	f7ff fb76 	bl	8001350 <EEPROM_Write>
		ID++;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <store_one_set+0xd4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <store_one_set+0xd4>)
 8001c6e:	701a      	strb	r2, [r3, #0]
	}
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b00b      	add	sp, #44	; 0x2c
 8001c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	80000003 	.word	0x80000003

08001c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c84:	b672      	cpsid	i
}
 8001c86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <Error_Handler+0x8>
	...

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_MspInit+0x44>)
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_MspInit+0x44>)
 8001c98:	2101      	movs	r1, #1
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	619a      	str	r2, [r3, #24]
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_MspInit+0x44>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0549      	lsls	r1, r1, #21
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	61da      	str	r2, [r3, #28]
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	055b      	lsls	r3, r3, #21
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b08b      	sub	sp, #44	; 0x2c
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	2414      	movs	r4, #20
 8001cde:	193b      	adds	r3, r7, r4
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	2314      	movs	r3, #20
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f005 fdfd 	bl	80078e6 <memset>
  if(hadc->Instance==ADC1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_ADC_MspInit+0x80>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d12a      	bne.n	8001d4c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_ADC_MspInit+0x84>)
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_ADC_MspInit+0x84>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0089      	lsls	r1, r1, #2
 8001d00:	430a      	orrs	r2, r1
 8001d02:	619a      	str	r2, [r3, #24]
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_ADC_MspInit+0x84>)
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_ADC_MspInit+0x84>)
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_ADC_MspInit+0x84>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	02c9      	lsls	r1, r1, #11
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_ADC_MspInit+0x84>)
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	02db      	lsls	r3, r3, #11
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Temp_Data_Pin;
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	2202      	movs	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	2203      	movs	r2, #3
 8001d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	193b      	adds	r3, r7, r4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Temp_Data_GPIO_Port, &GPIO_InitStruct);
 8001d40:	193b      	adds	r3, r7, r4
 8001d42:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <HAL_ADC_MspInit+0x88>)
 8001d44:	0019      	movs	r1, r3
 8001d46:	0010      	movs	r0, r2
 8001d48:	f003 fa1a 	bl	8005180 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b00b      	add	sp, #44	; 0x2c
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	40012400 	.word	0x40012400
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	48000400 	.word	0x48000400

08001d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	2414      	movs	r4, #20
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	2314      	movs	r3, #20
 8001d70:	001a      	movs	r2, r3
 8001d72:	2100      	movs	r1, #0
 8001d74:	f005 fdb7 	bl	80078e6 <memset>
  if(hi2c->Instance==I2C1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_I2C_MspInit+0x90>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d132      	bne.n	8001de8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_I2C_MspInit+0x94>)
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_I2C_MspInit+0x94>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	02c9      	lsls	r1, r1, #11
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_I2C_MspInit+0x94>)
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	02db      	lsls	r3, r3, #11
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	22c0      	movs	r2, #192	; 0xc0
 8001da2:	0052      	lsls	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da6:	0021      	movs	r1, r4
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	2212      	movs	r2, #18
 8001dac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	2203      	movs	r2, #3
 8001db8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <HAL_I2C_MspInit+0x98>)
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	f003 f9da 	bl	8005180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_I2C_MspInit+0x94>)
 8001dce:	69da      	ldr	r2, [r3, #28]
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_I2C_MspInit+0x94>)
 8001dd2:	2180      	movs	r1, #128	; 0x80
 8001dd4:	0389      	lsls	r1, r1, #14
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	61da      	str	r2, [r3, #28]
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_I2C_MspInit+0x94>)
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	039b      	lsls	r3, r3, #14
 8001de2:	4013      	ands	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b00b      	add	sp, #44	; 0x2c
 8001dee:	bd90      	pop	{r4, r7, pc}
 8001df0:	40005400 	.word	0x40005400
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48000400 	.word	0x48000400

08001dfc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_RTC_MspInit+0x28>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d106      	bne.n	8001e1c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RTC_MspInit+0x2c>)
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RTC_MspInit+0x2c>)
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0209      	lsls	r1, r1, #8
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40002800 	.word	0x40002800
 8001e28:	40021000 	.word	0x40021000

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <NMI_Handler+0x4>

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e50:	f002 fc06 	bl	8004660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_on_Pin);
 8001e5e:	2010      	movs	r0, #16
 8001e60:	f003 fb1c 	bl	800549c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	0002      	movs	r2, r0
 8001e74:	1dbb      	adds	r3, r7, #6
 8001e76:	801a      	strh	r2, [r3, #0]
    if ( GPIO_Pin == USB_on_Pin)
 8001e78:	1dbb      	adds	r3, r7, #6
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d106      	bne.n	8001e8e <HAL_GPIO_EXTI_Callback+0x22>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	0019      	movs	r1, r3
 8001e8a:	f003 fae9 	bl	8005460 <HAL_GPIO_WritePin>
    }
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	48000800 	.word	0x48000800

08001e9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <ProximitySensor_Start>:

#include "../inc/prox.h"

VL6180Dev_t vl6180Handler = (PROX_I2C_ADDRESS & 0x7f) << 1;

SensorErrorType ProximitySensor_Start(I2C_HandleTypeDef* i2cHandler) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	// For now, the handler is equal to the i2c address of the chip
	// Workaround for not having the i2c handler for hal in vl6180 code
	RegisterI2CHandler(i2cHandler);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f002 faf4 	bl	80044a0 <RegisterI2CHandler>
	//We need to switch on the GPIO pin to change the state of the machine
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <ProximitySensor_Start+0x78>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f003 face 	bl	8005460 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f002 fbe7 	bl	8004698 <HAL_Delay>
	VL6180_WaitDeviceBooted(vl6180Handler);
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <ProximitySensor_Start+0x7c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f935 	bl	800213e <VL6180_WaitDeviceBooted>
	// Init Chip
	int status;
	status = VL6180_InitData(vl6180Handler);
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <ProximitySensor_Start+0x7c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f000 f94d 	bl	8002178 <VL6180_InitData>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	60fb      	str	r3, [r7, #12]
	if (status ==  CALIBRATION_WARNING) {
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <ProximitySensor_Start+0x44>
		// Error Handling here
		return PROX_CALIBRATION_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e015      	b.n	8001f18 <ProximitySensor_Start+0x70>
	}
	status = VL6180_Prepare(vl6180Handler);
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <ProximitySensor_Start+0x7c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 f9fa 	bl	80022ea <VL6180_Prepare>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	60fb      	str	r3, [r7, #12]
	if ( status != 0){
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <ProximitySensor_Start+0x5c>
		return PROX_INIT_ERROR;
 8001f00:	2302      	movs	r3, #2
 8001f02:	e009      	b.n	8001f18 <ProximitySensor_Start+0x70>




	// Need to wait according to data sheet
	HAL_Delay(0.4);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f002 fbc7 	bl	8004698 <HAL_Delay>

	//Device should be ready for commands now
	VL6180_UpscaleSetScaling(vl6180Handler, 1);
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <ProximitySensor_Start+0x7c>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2101      	movs	r1, #1
 8001f10:	0018      	movs	r0, r3
 8001f12:	f000 fdb9 	bl	8002a88 <VL6180_UpscaleSetScaling>
	//TODO Explore offset and cross talk calibration
	return OK;
 8001f16:	2300      	movs	r3, #0

}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b004      	add	sp, #16
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	48000400 	.word	0x48000400
 8001f24:	20000008 	.word	0x20000008

08001f28 <ProximitySensor_GetSingleShotMeasurement>:
	//Assert param is already in this function
	GetI2CHandler();
}


SensorErrorType ProximitySensor_GetSingleShotMeasurement(int32_t* result) {
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b08d      	sub	sp, #52	; 0x34
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	VL6180_RangeData_t Range;
	VL6180_RangePollMeasurement(vl6180Handler, &Range);
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <ProximitySensor_GetSingleShotMeasurement+0x2c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2408      	movs	r4, #8
 8001f36:	193a      	adds	r2, r7, r4
 8001f38:	0011      	movs	r1, r2
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 fa14 	bl	8002368 <VL6180_RangePollMeasurement>
		//Error Handler
		//return PROX_MEASURE_ERROR;
	}

	// Range measurement available in Range.mm
	(*result) = Range.range_mm;
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	601a      	str	r2, [r3, #0]
	return OK;
 8001f48:	2300      	movs	r3, #0

}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b00d      	add	sp, #52	; 0x34
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000008 	.word	0x20000008

08001f58 <ProximitySensor_IsReady>:
	VL6180_ClearAllInterrupt(vl6180Handler);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	return OK;
}

SensorErrorType ProximitySensor_IsReady(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	I2C_HandleTypeDef* handler = GetI2CHandler();
 8001f5e:	f002 faad 	bl	80044bc <GetI2CHandler>
 8001f62:	0003      	movs	r3, r0
 8001f64:	607b      	str	r3, [r7, #4]

	if (HAL_I2C_IsDeviceReady(handler, (0x29 & 0x7f) << 1, 3, 1) != 0){
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	2152      	movs	r1, #82	; 0x52
 8001f6e:	f003 ffb9 	bl	8005ee4 <HAL_I2C_IsDeviceReady>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d001      	beq.n	8001f7a <ProximitySensor_IsReady+0x22>
		return PROX_NOT_RESPONDING;
 8001f76:	2304      	movs	r3, #4
 8001f78:	e000      	b.n	8001f7c <ProximitySensor_IsReady+0x24>
	}
	return OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <Sensors_Start>:
 */

#include "../inc/sensors.h"


SensorErrorType Sensors_Start(ADC_HandleTypeDef *hadc, I2C_HandleTypeDef* i2cHandler){
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	SensorErrorType result = ProximitySensor_Start(i2cHandler);
 8001f8e:	250f      	movs	r5, #15
 8001f90:	197c      	adds	r4, r7, r5
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff ff87 	bl	8001ea8 <ProximitySensor_Start>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	7023      	strb	r3, [r4, #0]
	if (result != OK){
 8001f9e:	197b      	adds	r3, r7, r5
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <Sensors_Start+0x28>
		return result;
 8001fa6:	197b      	adds	r3, r7, r5
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	e00f      	b.n	8001fcc <Sensors_Start+0x48>
	}
	result = TempSensor_Start(hadc);
 8001fac:	250f      	movs	r5, #15
 8001fae:	197c      	adds	r4, r7, r5
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f84a 	bl	800204c <TempSensor_Start>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	7023      	strb	r3, [r4, #0]
	if (result != OK){
 8001fbc:	197b      	adds	r3, r7, r5
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <Sensors_Start+0x46>
			return result;
 8001fc4:	197b      	adds	r3, r7, r5
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	e000      	b.n	8001fcc <Sensors_Start+0x48>
	}
	return OK;
 8001fca:	2300      	movs	r3, #0

}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b004      	add	sp, #16
 8001fd2:	bdb0      	pop	{r4, r5, r7, pc}

08001fd4 <Sensors_GetMeasurement>:
}

// THis will get all measurements and store it in a pointer to sensor data struct
// User is responsible for creating this struct
// Will return 1 if there is an error
SensorErrorType Sensors_GetMeasurement(struct SensorData *out, int maxTime){
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	if (TempSensor_HasStarted() != 1){
 8001fde:	f000 f89d 	bl	800211c <TempSensor_HasStarted>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d001      	beq.n	8001fec <Sensors_GetMeasurement+0x18>
		return 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e02b      	b.n	8002044 <Sensors_GetMeasurement+0x70>
	}
	if (ProximitySensor_IsReady() != OK){
 8001fec:	f7ff ffb4 	bl	8001f58 <ProximitySensor_IsReady>
 8001ff0:	1e03      	subs	r3, r0, #0
 8001ff2:	d001      	beq.n	8001ff8 <Sensors_GetMeasurement+0x24>
		return 1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e025      	b.n	8002044 <Sensors_GetMeasurement+0x70>
	}
	float temp = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
    SensorErrorType result = TempSensor_GetMeasurement(1, &temp);
 8001ffc:	2517      	movs	r5, #23
 8001ffe:	197c      	adds	r4, r7, r5
 8002000:	2310      	movs	r3, #16
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	0019      	movs	r1, r3
 8002006:	2001      	movs	r0, #1
 8002008:	f000 f840 	bl	800208c <TempSensor_GetMeasurement>
 800200c:	0003      	movs	r3, r0
 800200e:	7023      	strb	r3, [r4, #0]
    if (result != OK){
 8002010:	197b      	adds	r3, r7, r5
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <Sensors_GetMeasurement+0x4a>
    	return result;
 8002018:	197b      	adds	r3, r7, r5
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	e012      	b.n	8002044 <Sensors_GetMeasurement+0x70>
    }
    int32_t prox = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]


	out->temp = temp;
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	601a      	str	r2, [r3, #0]
	result = ProximitySensor_GetSingleShotMeasurement(&prox);
 8002028:	2517      	movs	r5, #23
 800202a:	197c      	adds	r4, r7, r5
 800202c:	230c      	movs	r3, #12
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ff79 	bl	8001f28 <ProximitySensor_GetSingleShotMeasurement>
 8002036:	0003      	movs	r3, r0
 8002038:	7023      	strb	r3, [r4, #0]
	out->prox = prox;
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	605a      	str	r2, [r3, #4]
	return result;
 8002040:	197b      	adds	r3, r7, r5
 8002042:	781b      	ldrb	r3, [r3, #0]
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b006      	add	sp, #24
 800204a:	bdb0      	pop	{r4, r5, r7, pc}

0800204c <TempSensor_Start>:
ADC_HandleTypeDef *ADCState;
char SensorState = 0;

//Starts the temperature sensor
// hadc is the handle pointer to the global adc handler
SensorErrorType TempSensor_Start(ADC_HandleTypeDef *hadc){
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	//Switch on the GPIO Pin controlling the sensor
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <TempSensor_Start+0x34>)
 8002056:	2201      	movs	r2, #1
 8002058:	2101      	movs	r1, #1
 800205a:	0018      	movs	r0, r3
 800205c:	f003 fa00 	bl	8005460 <HAL_GPIO_WritePin>



	//Set up the ADC
	HAL_ADCEx_Calibration_Start(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0018      	movs	r0, r3
 8002064:	f002 ff06 	bl	8004e74 <HAL_ADCEx_Calibration_Start>
	ADCState = hadc;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <TempSensor_Start+0x38>)
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
	SensorState = 1;
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <TempSensor_Start+0x3c>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
	return OK;
 8002074:	2300      	movs	r3, #0


}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	48000400 	.word	0x48000400
 8002084:	200001a4 	.word	0x200001a4
 8002088:	200001a8 	.word	0x200001a8

0800208c <TempSensor_GetMeasurement>:

// Get the current measurement from the temperature sensor
// result is a pointer to a double which will hold the result
// maxTime is the maximum amount of time you can wait before a result needs to be returned
// Can be dictated by the sampling rate
SensorErrorType TempSensor_GetMeasurement(int maxTime, float* result) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
	assert_param(TempSensor_HasStarted());
	HAL_ADC_Start(ADCState);
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <TempSensor_GetMeasurement+0x7c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0018      	movs	r0, r3
 800209c:	f002 fc60 	bl	8004960 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(ADCState, maxTime);
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <TempSensor_GetMeasurement+0x7c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	0011      	movs	r1, r2
 80020a8:	0018      	movs	r0, r3
 80020aa:	f002 fcad 	bl	8004a08 <HAL_ADC_PollForConversion>

	float data = HAL_ADC_GetValue(ADCState);
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <TempSensor_GetMeasurement+0x7c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f002 fd40 	bl	8004b38 <HAL_ADC_GetValue>
 80020b8:	0003      	movs	r3, r0
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7fe fca6 	bl	8000a0c <__aeabi_ui2f>
 80020c0:	1c03      	adds	r3, r0, #0
 80020c2:	60fb      	str	r3, [r7, #12]
	float voltage = data * (3.3/4096);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7fe ff4f 	bl	8000f68 <__aeabi_f2d>
 80020ca:	4a10      	ldr	r2, [pc, #64]	; (800210c <TempSensor_GetMeasurement+0x80>)
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <TempSensor_GetMeasurement+0x84>)
 80020ce:	f7fe fcdf 	bl	8000a90 <__aeabi_dmul>
 80020d2:	0002      	movs	r2, r0
 80020d4:	000b      	movs	r3, r1
 80020d6:	0010      	movs	r0, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	f7fe ff8d 	bl	8000ff8 <__aeabi_d2f>
 80020de:	1c03      	adds	r3, r0, #0
 80020e0:	60bb      	str	r3, [r7, #8]
	// reusing result variable to store voltage
	// voltage is the result multiplied by the voltage value of 1 level of the ADC

	// change the voltage result to temperature according to MCP9700 datasheet

	(*result) = (75*voltage) - 50;
 80020e2:	490c      	ldr	r1, [pc, #48]	; (8002114 <TempSensor_GetMeasurement+0x88>)
 80020e4:	68b8      	ldr	r0, [r7, #8]
 80020e6:	f7fe f99d 	bl	8000424 <__aeabi_fmul>
 80020ea:	1c03      	adds	r3, r0, #0
 80020ec:	490a      	ldr	r1, [pc, #40]	; (8002118 <TempSensor_GetMeasurement+0x8c>)
 80020ee:	1c18      	adds	r0, r3, #0
 80020f0:	f7fe fabe 	bl	8000670 <__aeabi_fsub>
 80020f4:	1c03      	adds	r3, r0, #0
 80020f6:	1c1a      	adds	r2, r3, #0
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	601a      	str	r2, [r3, #0]
	return OK;
 80020fc:	2300      	movs	r3, #0

}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	200001a4 	.word	0x200001a4
 800210c:	66666666 	.word	0x66666666
 8002110:	3f4a6666 	.word	0x3f4a6666
 8002114:	42960000 	.word	0x42960000
 8002118:	42480000 	.word	0x42480000

0800211c <TempSensor_HasStarted>:

char TempSensor_HasStarted(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	EnsureHandleValid();
 8002120:	f000 f808 	bl	8002134 <EnsureHandleValid>
	return SensorState;
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <TempSensor_HasStarted+0x14>)
 8002126:	781b      	ldrb	r3, [r3, #0]
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	200001a8 	.word	0x200001a8

08002134 <EnsureHandleValid>:

void EnsureHandleValid(void){
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	assert_param(ADCState != NULL);
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <VL6180_WaitDeviceBooted>:

static int VL6180_RangeStaticInit(VL6180Dev_t dev);
static int  VL6180_UpscaleStaticInit(VL6180Dev_t dev);

int VL6180_WaitDeviceBooted(VL6180Dev_t dev)
{
 800213e:	b590      	push	{r4, r7, lr}
 8002140:	b085      	sub	sp, #20
 8002142:	af00      	add	r7, sp, #0
 8002144:	0002      	movs	r2, r0
 8002146:	1dfb      	adds	r3, r7, #7
 8002148:	701a      	strb	r2, [r3, #0]
	uint8_t FreshOutReset;
	int status;
	LOG_FUNCTION_START("");
	do {
		status = VL6180_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 800214a:	240b      	movs	r4, #11
 800214c:	193a      	adds	r2, r7, r4
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2116      	movs	r1, #22
 8002154:	0018      	movs	r0, r3
 8002156:	f002 f8a1 	bl	800429c <VL6180_RdByte>
 800215a:	0003      	movs	r3, r0
 800215c:	60fb      	str	r3, [r7, #12]
	} while (FreshOutReset != 1 && status == 0);
 800215e:	193b      	adds	r3, r7, r4
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d002      	beq.n	800216c <VL6180_WaitDeviceBooted+0x2e>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <VL6180_WaitDeviceBooted+0xc>
	LOG_FUNCTION_END(status);
	return status;
 800216c:	68fb      	ldr	r3, [r7, #12]
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b005      	add	sp, #20
 8002174:	bd90      	pop	{r4, r7, pc}
	...

08002178 <VL6180_InitData>:

int VL6180_InitData(VL6180Dev_t dev)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	0002      	movs	r2, r0
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	701a      	strb	r2, [r3, #0]
	uint16_t u16;
	uint32_t XTalkCompRate_KCps;

	LOG_FUNCTION_START("");

	VL6180DevDataSet(dev, EceFactorM, DEF_ECE_FACTOR_M);
 8002184:	4b45      	ldr	r3, [pc, #276]	; (800229c <VL6180_InitData+0x124>)
 8002186:	2255      	movs	r2, #85	; 0x55
 8002188:	811a      	strh	r2, [r3, #8]
	VL6180DevDataSet(dev, EceFactorD, DEF_ECE_FACTOR_D);
 800218a:	4b44      	ldr	r3, [pc, #272]	; (800229c <VL6180_InitData+0x124>)
 800218c:	2264      	movs	r2, #100	; 0x64
 800218e:	815a      	strh	r2, [r3, #10]

	VL6180DevDataSet(dev, RangeIgnore.Enabled, 0);
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <VL6180_InitData+0x124>)
 8002192:	2200      	movs	r2, #0
 8002194:	741a      	strb	r2, [r3, #16]

#ifdef VL6180_HAVE_UPSCALE_DATA
	VL6180DevDataSet(dev, UpscaleFactor,  DEF_UPSCALE);
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <VL6180_InitData+0x124>)
 8002198:	2203      	movs	r2, #3
 800219a:	749a      	strb	r2, [r3, #18]
#endif

#ifdef VL6180_HAVE_WRAP_AROUND_DATA
	VL6180DevDataSet(dev, WrapAroundFilterActive, (VL6180_WRAP_AROUND_FILTER_SUPPORT > 0));
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <VL6180_InitData+0x124>)
 800219e:	2201      	movs	r2, #1
 80021a0:	74da      	strb	r2, [r3, #19]
	VL6180DevDataSet(dev, DMaxEnable, DEF_DMAX_ENABLE);
 80021a2:	4b3e      	ldr	r3, [pc, #248]	; (800229c <VL6180_InitData+0x124>)
 80021a4:	22c4      	movs	r2, #196	; 0xc4
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]
#endif

	_DMax_OneTimeInit(dev);
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f001 fdd8 	bl	8003d64 <_DMax_OneTimeInit>
	do {

		/* backup offset initial value from nvm these must be done prior any over call that use offset */
		status = VL6180_RdByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, (uint8_t *)&offset);
 80021b4:	2413      	movs	r4, #19
 80021b6:	193a      	adds	r2, r7, r4
 80021b8:	1dfb      	adds	r3, r7, #7
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2124      	movs	r1, #36	; 0x24
 80021be:	0018      	movs	r0, r3
 80021c0:	f002 f86c 	bl	800429c <VL6180_RdByte>
 80021c4:	0003      	movs	r3, r0
 80021c6:	61fb      	str	r3, [r7, #28]
		if (status) {
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d157      	bne.n	800227e <VL6180_InitData+0x106>
			VL6180_ErrLog("SYSRANGE_PART_TO_PART_RANGE_OFFSET rd fail");
			break;
		}
		VL6180DevDataSet(dev, Part2PartOffsetNVM, offset);
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	2100      	movs	r1, #0
 80021d2:	5659      	ldrsb	r1, [r3, r1]
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <VL6180_InitData+0x124>)
 80021d6:	22c5      	movs	r2, #197	; 0xc5
 80021d8:	5499      	strb	r1, [r3, r2]

		status = VL6180_RdDWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &CalValue);
 80021da:	230c      	movs	r3, #12
 80021dc:	18fa      	adds	r2, r7, r3
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2126      	movs	r1, #38	; 0x26
 80021e4:	0018      	movs	r0, r3
 80021e6:	f002 f8d8 	bl	800439a <VL6180_RdDWord>
 80021ea:	0003      	movs	r3, r0
 80021ec:	61fb      	str	r3, [r7, #28]
		if (status) {
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d146      	bne.n	8002282 <VL6180_InitData+0x10a>
			VL6180_ErrLog("Part2PartAmbNVM rd fail");
			break;
		}
		if ((CalValue&0xFFFF0000) == 0) {
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	d101      	bne.n	8002200 <VL6180_InitData+0x88>
			CalValue = 0x00CE03F8;
 80021fc:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <VL6180_InitData+0x128>)
 80021fe:	60fb      	str	r3, [r7, #12]
		}
		VL6180DevDataSet(dev, Part2PartAmbNVM, CalValue);
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <VL6180_InitData+0x124>)
 8002204:	601a      	str	r2, [r3, #0]

		status = VL6180_RdWord(dev, SYSRANGE_CROSSTALK_COMPENSATION_RATE , &u16);
 8002206:	240a      	movs	r4, #10
 8002208:	193a      	adds	r2, r7, r4
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	211e      	movs	r1, #30
 8002210:	0018      	movs	r0, r3
 8002212:	f002 f87e 	bl	8004312 <VL6180_RdWord>
 8002216:	0003      	movs	r3, r0
 8002218:	61fb      	str	r3, [r7, #28]
		if (status) {
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d132      	bne.n	8002286 <VL6180_InitData+0x10e>
			VL6180_ErrLog("SYSRANGE_CROSSTALK_COMPENSATION_RATE rd fail ");
			break;
		}
		XTalkCompRate_KCps = Fix7_2_KCPs(u16);
 8002220:	193b      	adds	r3, r7, r4
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	001a      	movs	r2, r3
 8002226:	0013      	movs	r3, r2
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	189b      	adds	r3, r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	09db      	lsrs	r3, r3, #7
 8002234:	61bb      	str	r3, [r7, #24]
		VL6180DevDataSet(dev, XTalkCompRate_KCps, XTalkCompRate_KCps);
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <VL6180_InitData+0x124>)
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	605a      	str	r2, [r3, #4]

		dmax_status = _DMax_InitData(dev);
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	0018      	movs	r0, r3
 8002242:	f001 fdf5 	bl	8003e30 <_DMax_InitData>
 8002246:	0003      	movs	r3, r0
 8002248:	617b      	str	r3, [r7, #20]
		if (dmax_status < 0) {
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db1c      	blt.n	800228a <VL6180_InitData+0x112>
			VL6180_ErrLog("DMax init failure");
			break;
		}

		/* Read or wait for fresh out of reset  */
		status = VL6180_RdByte(dev, SYSTEM_FRESH_OUT_OF_RESET, &FreshOutReset);
 8002250:	2412      	movs	r4, #18
 8002252:	193a      	adds	r2, r7, r4
 8002254:	1dfb      	adds	r3, r7, #7
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2116      	movs	r1, #22
 800225a:	0018      	movs	r0, r3
 800225c:	f002 f81e 	bl	800429c <VL6180_RdByte>
 8002260:	0003      	movs	r3, r0
 8002262:	61fb      	str	r3, [r7, #28]
		if (status) {
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d111      	bne.n	800228e <VL6180_InitData+0x116>
			VL6180_ErrLog("SYSTEM_FRESH_OUT_OF_RESET rd fail");
			break;
		}
		if (FreshOutReset != 1 || dmax_status)
 800226a:	193b      	adds	r3, r7, r4
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <VL6180_InitData+0x100>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <VL6180_InitData+0x118>
			status = CALIBRATION_WARNING;
 8002278:	2301      	movs	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	e008      	b.n	8002290 <VL6180_InitData+0x118>
			break;
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	e006      	b.n	8002290 <VL6180_InitData+0x118>
			break;
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	e004      	b.n	8002290 <VL6180_InitData+0x118>
			break;
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	e002      	b.n	8002290 <VL6180_InitData+0x118>
			break;
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	e000      	b.n	8002290 <VL6180_InitData+0x118>
			break;
 800228e:	46c0      	nop			; (mov r8, r8)

	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8002290:	69fb      	ldr	r3, [r7, #28]
}
 8002292:	0018      	movs	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	b009      	add	sp, #36	; 0x24
 8002298:	bd90      	pop	{r4, r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	2000000c 	.word	0x2000000c
 80022a0:	00ce03f8 	.word	0x00ce03f8

080022a4 <VL6180_StaticInit>:
}



int VL6180_StaticInit(VL6180Dev_t dev)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	0002      	movs	r2, r0
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	701a      	strb	r2, [r3, #0]
	int status = 0, init_status;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
	/* TODO doc When using configurable scaling but using 1x as start condition
	 * load tunning upscale  or not ??? */
	if (_GetUpscale(dev) == 1 && !(VL6180_UPSCALE_SUPPORT < 0))
		init_status = VL6180_RangeStaticInit(dev);
	else
		init_status = VL6180_UpscaleStaticInit(dev);
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 fc91 	bl	8002be0 <VL6180_UpscaleStaticInit>
 80022be:	0003      	movs	r3, r0
 80022c0:	60bb      	str	r3, [r7, #8]

	if (init_status < 0) {
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db08      	blt.n	80022da <VL6180_StaticInit+0x36>
	}

	if (status < 0) {
		VL6180_ErrLog("StaticInit fail");
	}
	if (!status && init_status) {
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <VL6180_StaticInit+0x3a>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <VL6180_StaticInit+0x3a>
		status = init_status;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e002      	b.n	80022e0 <VL6180_StaticInit+0x3c>
		goto error;
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	e000      	b.n	80022e0 <VL6180_StaticInit+0x3c>
	}
error:
 80022de:	46c0      	nop			; (mov r8, r8)
	LOG_FUNCTION_END(status);
	return status;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b004      	add	sp, #16
 80022e8:	bd80      	pop	{r7, pc}

080022ea <VL6180_Prepare>:
	return status;

}

int VL6180_Prepare(VL6180Dev_t dev)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	0002      	movs	r2, r0
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	701a      	strb	r2, [r3, #0]
	int status;
	LOG_FUNCTION_START("");

	do {
		status = VL6180_StaticInit(dev);
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7ff ffd2 	bl	80022a4 <VL6180_StaticInit>
 8002300:	0003      	movs	r3, r0
 8002302:	60fb      	str	r3, [r7, #12]
		if (status < 0)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db24      	blt.n	8002354 <VL6180_Prepare+0x6a>
			break;

		/* set range InterruptMode to new sample */
		status = VL6180_RangeConfigInterrupt(dev, CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY);
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2104      	movs	r1, #4
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fc8d 	bl	8002c30 <VL6180_RangeConfigInterrupt>
 8002316:	0003      	movs	r3, r0
 8002318:	60fb      	str	r3, [r7, #12]
		if (status)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11b      	bne.n	8002358 <VL6180_Prepare+0x6e>
			break;

		/* set default threshold */
		status = VL6180_RangeSetRawThresholds(dev, 10, 200);
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	22c8      	movs	r2, #200	; 0xc8
 8002326:	210a      	movs	r1, #10
 8002328:	0018      	movs	r0, r3
 800232a:	f000 fa01 	bl	8002730 <VL6180_RangeSetRawThresholds>
 800232e:	0003      	movs	r3, r0
 8002330:	60fb      	str	r3, [r7, #12]
		if (status) {
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <VL6180_Prepare+0x72>
			VL6180_ErrLog("VL6180_RangeSetRawThresholds fail");
			break;
		}
	#if VL6180_WRAP_AROUND_FILTER_SUPPORT
		_filter_Init(dev);
 8002338:	1dfb      	adds	r3, r7, #7
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	0018      	movs	r0, r3
 800233e:	f000 fdcf 	bl	8002ee0 <_filter_Init>
	#endif
		/* make sure to reset any left previous condition that can hangs first poll */
		status = VL6180_ClearAllInterrupt(dev);
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2105      	movs	r1, #5
 8002348:	0018      	movs	r0, r3
 800234a:	f000 fa39 	bl	80027c0 <VL6180_ClearInterrupt>
 800234e:	0003      	movs	r3, r0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e004      	b.n	800235e <VL6180_Prepare+0x74>
			break;
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	e002      	b.n	800235e <VL6180_Prepare+0x74>
			break;
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	e000      	b.n	800235e <VL6180_Prepare+0x74>
			break;
 800235c:	46c0      	nop			; (mov r8, r8)
	} while (0);
	LOG_FUNCTION_END(status);

	return status;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}

08002368 <VL6180_RangePollMeasurement>:


int VL6180_RangePollMeasurement(VL6180Dev_t dev, VL6180_RangeData_t *pRangeData)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	0002      	movs	r2, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	701a      	strb	r2, [r3, #0]
		VL6180_ErrLog("VL6180_RangeClearInterrupt fail");
		goto done;
	}
	#endif
	/* //![single_shot_snipet] */
	status = VL6180_RangeSetSystemMode(dev, MODE_START_STOP | MODE_SINGLESHOT);
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	0018      	movs	r0, r3
 800237e:	f000 fcce 	bl	8002d1e <VL6180_RangeSetSystemMode>
 8002382:	0003      	movs	r3, r0
 8002384:	617b      	str	r3, [r7, #20]
	if (status) {
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d13e      	bne.n	800240a <VL6180_RangePollMeasurement+0xa2>
	}


	/* poll for new sample ready */
	while (1) {
		status = VL6180_RangeGetInterruptStatus(dev, &IntStatus.val);
 800238c:	240c      	movs	r4, #12
 800238e:	193a      	adds	r2, r7, r4
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	0011      	movs	r1, r2
 8002396:	0018      	movs	r0, r3
 8002398:	f000 f9f5 	bl	8002786 <VL6180_RangeGetInterruptStatus>
 800239c:	0003      	movs	r3, r0
 800239e:	617b      	str	r3, [r7, #20]
		if (status) {
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d113      	bne.n	80023ce <VL6180_RangePollMeasurement+0x66>
			break;
		}
		if (IntStatus.status.Range == RES_INT_STAT_GPIO_NEW_SAMPLE_READY || IntStatus.status.Error != 0) {
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2207      	movs	r2, #7
 80023ac:	4013      	ands	r3, r2
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d00d      	beq.n	80023d0 <VL6180_RangePollMeasurement+0x68>
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2218      	movs	r2, #24
 80023ba:	4013      	ands	r3, r2
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <VL6180_RangePollMeasurement+0x68>
			break;
		}

		VL6180_PollDelay(dev);
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f002 f8ca 	bl	8004560 <VL6180_PollDelay>
		status = VL6180_RangeGetInterruptStatus(dev, &IntStatus.val);
 80023cc:	e7de      	b.n	800238c <VL6180_RangePollMeasurement+0x24>
			break;
 80023ce:	46c0      	nop			; (mov r8, r8)
	}
	/* //![single_shot_snipet] */

	if (!status) {
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <VL6180_RangePollMeasurement+0x80>
		status = VL6180_RangeGetMeasurement(dev, pRangeData);
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	0011      	movs	r1, r2
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 f8f6 	bl	80025d0 <VL6180_RangeGetMeasurement>
 80023e4:	0003      	movs	r3, r0
 80023e6:	617b      	str	r3, [r7, #20]
	}

	/*  clear range interrupt source */
	ClrStatus = VL6180_RangeClearInterrupt(dev);
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2101      	movs	r1, #1
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f9e6 	bl	80027c0 <VL6180_ClearInterrupt>
 80023f4:	0003      	movs	r3, r0
 80023f6:	613b      	str	r3, [r7, #16]
	if (ClrStatus) {
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <VL6180_RangePollMeasurement+0xa6>
		VL6180_ErrLog("VL6180_RangeClearInterrupt fail");
		/*  leave initial status if already in error  */
		if (!status) {
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d104      	bne.n	800240e <VL6180_RangePollMeasurement+0xa6>
			status = ClrStatus;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e002      	b.n	8002410 <VL6180_RangePollMeasurement+0xa8>
		goto done;
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	e000      	b.n	8002410 <VL6180_RangePollMeasurement+0xa8>
		}
	}
done:
 800240e:	46c0      	nop			; (mov r8, r8)
	LOG_FUNCTION_END(status);
	return status;
 8002410:	697b      	ldr	r3, [r7, #20]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b007      	add	sp, #28
 8002418:	bd90      	pop	{r4, r7, pc}
	...

0800241c <VL6180_GetCachedDWord>:


#if VL6180_CACHED_REG

int VL6180_GetCachedDWord(VL6180Dev_t dev, uint16_t  index, uint32_t *pValue)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	603a      	str	r2, [r7, #0]
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	1c02      	adds	r2, r0, #0
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	1c0a      	adds	r2, r1, #0
 800242e:	801a      	strh	r2, [r3, #0]
	int status;
	uint32_t Value;
	if (VL6180DevDataGet(dev, CacheFilled) != 0 &&
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <VL6180_GetCachedDWord+0x90>)
 8002432:	2278      	movs	r2, #120	; 0x78
 8002434:	5c9b      	ldrb	r3, [r3, r2]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d028      	beq.n	800248c <VL6180_GetCachedDWord+0x70>
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	2b4c      	cmp	r3, #76	; 0x4c
 8002440:	d924      	bls.n	800248c <VL6180_GetCachedDWord+0x70>
		index >= VL6180_FIRST_CACHED_INDEX  &&
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	2b81      	cmp	r3, #129	; 0x81
 8002448:	d820      	bhi.n	800248c <VL6180_GetCachedDWord+0x70>
		index <= (VL6180_LAST_CACHED_INDEX - 3)) {
		uint8_t *pBytes = &VL6180DevDataGet(dev, CachedRegs[index - VL6180_FIRST_CACHED_INDEX]);
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	3b4d      	subs	r3, #77	; 0x4d
 8002450:	3378      	adds	r3, #120	; 0x78
 8002452:	001a      	movs	r2, r3
 8002454:	4b15      	ldr	r3, [pc, #84]	; (80024ac <VL6180_GetCachedDWord+0x90>)
 8002456:	18d3      	adds	r3, r2, r3
 8002458:	3301      	adds	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
		Value = ((uint32_t)pBytes[0] << 24) |
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	061a      	lsls	r2, r3, #24
				((uint32_t)pBytes[1] << 16) |
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	3301      	adds	r3, #1
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	041b      	lsls	r3, r3, #16
		Value = ((uint32_t)pBytes[0] << 24) |
 800246a:	431a      	orrs	r2, r3
				((uint32_t)pBytes[2] << 8) |
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	3302      	adds	r3, #2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	021b      	lsls	r3, r3, #8
				((uint32_t)pBytes[1] << 16) |
 8002474:	4313      	orrs	r3, r2
				(uint32_t)pBytes[3];
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	3203      	adds	r2, #3
 800247a:	7812      	ldrb	r2, [r2, #0]
		Value = ((uint32_t)pBytes[0] << 24) |
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
		*pValue = Value;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	601a      	str	r2, [r3, #0]
		status = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
		index <= (VL6180_LAST_CACHED_INDEX - 3)) {
 800248a:	e009      	b.n	80024a0 <VL6180_GetCachedDWord+0x84>
	} else {
		status =  VL6180_RdDWord(dev, index, pValue);
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	8819      	ldrh	r1, [r3, #0]
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	0018      	movs	r0, r3
 8002498:	f001 ff7f 	bl	800439a <VL6180_RdDWord>
 800249c:	0003      	movs	r3, r0
 800249e:	617b      	str	r3, [r7, #20]
	}
	return status;
 80024a0:	697b      	ldr	r3, [r7, #20]
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b006      	add	sp, #24
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	2000000c 	.word	0x2000000c

080024b0 <VL6180_GetCachedWord>:

int VL6180_GetCachedWord(VL6180Dev_t dev, uint16_t  index, uint16_t *pValue)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	603a      	str	r2, [r7, #0]
 80024b8:	1dfb      	adds	r3, r7, #7
 80024ba:	1c02      	adds	r2, r0, #0
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	1c0a      	adds	r2, r1, #0
 80024c2:	801a      	strh	r2, [r3, #0]
	int status;
	uint32_t Value;
	if (VL6180DevDataGet(dev, CacheFilled) != 0 &&
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <VL6180_GetCachedWord+0x7c>)
 80024c6:	2278      	movs	r2, #120	; 0x78
 80024c8:	5c9b      	ldrb	r3, [r3, r2]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01f      	beq.n	800250e <VL6180_GetCachedWord+0x5e>
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2b4c      	cmp	r3, #76	; 0x4c
 80024d4:	d91b      	bls.n	800250e <VL6180_GetCachedWord+0x5e>
		index >= VL6180_FIRST_CACHED_INDEX  &&
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	2b83      	cmp	r3, #131	; 0x83
 80024dc:	d817      	bhi.n	800250e <VL6180_GetCachedWord+0x5e>
		index <= (VL6180_LAST_CACHED_INDEX - 1)) {
		uint8_t *pBytes = &VL6180DevDataGet(dev, CachedRegs[index - VL6180_FIRST_CACHED_INDEX]);
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	3b4d      	subs	r3, #77	; 0x4d
 80024e4:	3378      	adds	r3, #120	; 0x78
 80024e6:	001a      	movs	r2, r3
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <VL6180_GetCachedWord+0x7c>)
 80024ea:	18d3      	adds	r3, r2, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
		Value = ((uint32_t)pBytes[0] << 8) | (uint32_t)pBytes[1];
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	3201      	adds	r2, #1
 80024fa:	7812      	ldrb	r2, [r2, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
		*pValue = Value;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	b29a      	uxth	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	801a      	strh	r2, [r3, #0]
		status = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
		index <= (VL6180_LAST_CACHED_INDEX - 1)) {
 800250c:	e009      	b.n	8002522 <VL6180_GetCachedWord+0x72>
	} else {
		status =  VL6180_RdWord(dev, index, pValue);
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	8819      	ldrh	r1, [r3, #0]
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	0018      	movs	r0, r3
 800251a:	f001 fefa 	bl	8004312 <VL6180_RdWord>
 800251e:	0003      	movs	r3, r0
 8002520:	617b      	str	r3, [r7, #20]
	}
	return status;
 8002522:	697b      	ldr	r3, [r7, #20]
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b006      	add	sp, #24
 800252a:	bd80      	pop	{r7, pc}
 800252c:	2000000c 	.word	0x2000000c

08002530 <VL6180_GetCachedByte>:

int VL6180_GetCachedByte(VL6180Dev_t dev, uint16_t  index, uint8_t *pValue)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	603a      	str	r2, [r7, #0]
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	1c02      	adds	r2, r0, #0
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	1c0a      	adds	r2, r1, #0
 8002542:	801a      	strh	r2, [r3, #0]
	//	index <= VL6180_LAST_CACHED_INDEX) {
	//	Value = VL6180DevDataGet(dev, CachedRegs[index - VL6180_FIRST_CACHED_INDEX]);
	//	*pValue = Value;
	//	status = 0;
	//} else {
		status =  VL6180_RdByte(dev, index, pValue);
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	8819      	ldrh	r1, [r3, #0]
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	0018      	movs	r0, r3
 8002550:	f001 fea4 	bl	800429c <VL6180_RdByte>
 8002554:	0003      	movs	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]
	//}
	return status;
 8002558:	68fb      	ldr	r3, [r7, #12]
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b004      	add	sp, #16
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <_CachedRegs_Fetch>:


int _CachedRegs_Fetch(VL6180Dev_t dev)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	0002      	movs	r2, r0
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	701a      	strb	r2, [r3, #0]
	int status;
	uint8_t *Buffer;
	if (VL6180DevDataGet(dev, CacheFilled) == 0) {
 8002570:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <_CachedRegs_Fetch+0x44>)
 8002572:	2278      	movs	r2, #120	; 0x78
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10f      	bne.n	800259a <_CachedRegs_Fetch+0x36>
		VL6180DevDataSet(dev, CacheFilled, 1);
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <_CachedRegs_Fetch+0x44>)
 800257c:	2278      	movs	r2, #120	; 0x78
 800257e:	2101      	movs	r1, #1
 8002580:	5499      	strb	r1, [r3, r2]
		Buffer = &VL6180DevDataGet(dev, CachedRegs[0]);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <_CachedRegs_Fetch+0x48>)
 8002584:	60bb      	str	r3, [r7, #8]
		status = VL6180_RdMulti(dev, VL6180_FIRST_CACHED_INDEX, Buffer, VL6180_CACHED_REG_CNT);
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	1dfb      	adds	r3, r7, #7
 800258a:	7818      	ldrb	r0, [r3, #0]
 800258c:	2338      	movs	r3, #56	; 0x38
 800258e:	214d      	movs	r1, #77	; 0x4d
 8002590:	f001 ff4d 	bl	800442e <VL6180_RdMulti>
 8002594:	0003      	movs	r3, r0
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e001      	b.n	800259e <_CachedRegs_Fetch+0x3a>
	} else {
		status = 0 ;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
	}
	return status;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b004      	add	sp, #16
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000000c 	.word	0x2000000c
 80025ac:	20000085 	.word	0x20000085

080025b0 <_CachedRegs_Flush>:

void _CachedRegs_Flush(VL6180Dev_t dev)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	0002      	movs	r2, r0
 80025b8:	1dfb      	adds	r3, r7, #7
 80025ba:	701a      	strb	r2, [r3, #0]
	VL6180DevDataSet(dev, CacheFilled, 0);
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <_CachedRegs_Flush+0x1c>)
 80025be:	2278      	movs	r2, #120	; 0x78
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <VL6180_RangeGetMeasurement>:
#endif /* VL6180_CACHED_REG */



int VL6180_RangeGetMeasurement(VL6180Dev_t dev, VL6180_RangeData_t *pRangeData)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	0002      	movs	r2, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	701a      	strb	r2, [r3, #0]
	uint16_t RawRate;
	uint8_t RawStatus;

	LOG_FUNCTION_START("");

	status = _CachedRegs_Fetch(dev);
 80025de:	1dfb      	adds	r3, r7, #7
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff ffbe 	bl	8002564 <_CachedRegs_Fetch>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60fb      	str	r3, [r7, #12]
	if (status) {
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d167      	bne.n	80026c2 <VL6180_RangeGetMeasurement+0xf2>
		VL6180_ErrLog("Cache register read fail");
		goto error;
	}
	status = VL6180_RangeGetResult(dev, &pRangeData->range_mm);
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	1dfb      	adds	r3, r7, #7
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	0011      	movs	r1, r2
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 f872 	bl	80026e4 <VL6180_RangeGetResult>
 8002600:	0003      	movs	r3, r0
 8002602:	60fb      	str	r3, [r7, #12]
	if (!status) {
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d15d      	bne.n	80026c6 <VL6180_RangeGetMeasurement+0xf6>
		status = VL6180_GetCachedWord(dev, RESULT_RANGE_SIGNAL_RATE, &RawRate);
 800260a:	240a      	movs	r4, #10
 800260c:	193a      	adds	r2, r7, r4
 800260e:	1dfb      	adds	r3, r7, #7
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2166      	movs	r1, #102	; 0x66
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff ff4b 	bl	80024b0 <VL6180_GetCachedWord>
 800261a:	0003      	movs	r3, r0
 800261c:	60fb      	str	r3, [r7, #12]
		if (!status) {
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d153      	bne.n	80026cc <VL6180_RangeGetMeasurement+0xfc>
			pRangeData->signalRate_mcps = VL6180_9to7Conv(RawRate);
 8002624:	193b      	adds	r3, r7, r4
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	001a      	movs	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	605a      	str	r2, [r3, #4]
			status = VL6180_GetCachedByte(dev, RESULT_RANGE_STATUS, &RawStatus);
 800262e:	2409      	movs	r4, #9
 8002630:	193a      	adds	r2, r7, r4
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	214d      	movs	r1, #77	; 0x4d
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff ff79 	bl	8002530 <VL6180_GetCachedByte>
 800263e:	0003      	movs	r3, r0
 8002640:	60fb      	str	r3, [r7, #12]
			if (!status) {
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <VL6180_RangeGetMeasurement+0x86>
				pRangeData->errorStatus = RawStatus >> 4;
 8002648:	193b      	adds	r3, r7, r4
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	b2db      	uxtb	r3, r3
 8002650:	001a      	movs	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	609a      	str	r2, [r3, #8]
			} else {
				VL6180_ErrLog("Rd RESULT_RANGE_STATUS fail");
			}
	#if VL6180_WRAP_AROUND_FILTER_SUPPORT || VL6180_HAVE_DMAX_RANGING
			status = _GetRateResult(dev, pRangeData);
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	0011      	movs	r1, r2
 800265e:	0018      	movs	r0, r3
 8002660:	f001 fab4 	bl	8003bcc <_GetRateResult>
 8002664:	0003      	movs	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]
			if (status)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d12d      	bne.n	80026ca <VL6180_RangeGetMeasurement+0xfa>
				goto error;
	#endif
	#if VL6180_WRAP_AROUND_FILTER_SUPPORT
			/* if enabled run filter */
			if (_IsWrapArroundActive(dev)) {
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <VL6180_RangeGetMeasurement+0x110>)
 8002670:	7cdb      	ldrb	r3, [r3, #19]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d018      	beq.n	80026a8 <VL6180_RangeGetMeasurement+0xd8>
				status = _filter_GetResult(dev, pRangeData);
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	1dfb      	adds	r3, r7, #7
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f001 fa48 	bl	8003b14 <_filter_GetResult>
 8002684:	0003      	movs	r3, r0
 8002686:	60fb      	str	r3, [r7, #12]
				if (!status) {
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10c      	bne.n	80026a8 <VL6180_RangeGetMeasurement+0xd8>
					/* patch the range status and measure if it is filtered */
					if(pRangeData->FilteredData.filterError != NoError) {
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <VL6180_RangeGetMeasurement+0xd8>
						pRangeData->errorStatus = pRangeData->FilteredData.filterError;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	609a      	str	r2, [r3, #8]
						pRangeData->range_mm = pRangeData->FilteredData.range_mm;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	8c1b      	ldrh	r3, [r3, #32]
 80026a2:	001a      	movs	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	601a      	str	r2, [r3, #0]
				}
			}
	#endif

	#if VL6180_HAVE_DMAX_RANGING
			if (_IsDMaxActive(dev)) {
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <VL6180_RangeGetMeasurement+0x110>)
 80026aa:	22c4      	movs	r2, #196	; 0xc4
 80026ac:	5c9b      	ldrb	r3, [r3, r2]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <VL6180_RangeGetMeasurement+0xfc>
				_DMax_Compute(dev, pRangeData);
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	0011      	movs	r1, r2
 80026ba:	0018      	movs	r0, r3
 80026bc:	f001 fca0 	bl	8004000 <_DMax_Compute>
 80026c0:	e004      	b.n	80026cc <VL6180_RangeGetMeasurement+0xfc>
		goto error;
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	e002      	b.n	80026cc <VL6180_RangeGetMeasurement+0xfc>
		    VL6180_ErrLog("Rd RESULT_RANGE_SIGNAL_RATE fail");
		}
	} else {
		VL6180_ErrLog("VL6180_GetRangeResult fail");
	}
error:
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	e000      	b.n	80026cc <VL6180_RangeGetMeasurement+0xfc>
				goto error;
 80026ca:	46c0      	nop			; (mov r8, r8)
	_CachedRegs_Flush(dev);
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7ff ff6d 	bl	80025b0 <_CachedRegs_Flush>
	LOG_FUNCTION_END_FMT(status, "%d %d %d", (int)pRangeData->range_mm, (int)pRangeData->signalRate_mcps,  (int)pRangeData->errorStatus) ;
	return status;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b005      	add	sp, #20
 80026de:	bd90      	pop	{r4, r7, pc}
 80026e0:	2000000c 	.word	0x2000000c

080026e4 <VL6180_RangeGetResult>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180_RangeGetResult(VL6180Dev_t dev, int32_t *pRange_mm)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	0002      	movs	r2, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	1dfb      	adds	r3, r7, #7
 80026f0:	701a      	strb	r2, [r3, #0]
	uint8_t RawRange;
	int32_t Upscale;

	LOG_FUNCTION_START("%p", pRange_mm);

	status = VL6180_GetCachedByte(dev, RESULT_RANGE_VAL, &RawRange);
 80026f2:	240f      	movs	r4, #15
 80026f4:	193a      	adds	r2, r7, r4
 80026f6:	1dfb      	adds	r3, r7, #7
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2162      	movs	r1, #98	; 0x62
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ff17 	bl	8002530 <VL6180_GetCachedByte>
 8002702:	0003      	movs	r3, r0
 8002704:	617b      	str	r3, [r7, #20]
	if (!status) {
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <VL6180_RangeGetResult+0x3c>
		Upscale = _GetUpscale(dev);
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <VL6180_RangeGetResult+0x48>)
 800270e:	7c9b      	ldrb	r3, [r3, #18]
 8002710:	613b      	str	r3, [r7, #16]
		*pRange_mm = Upscale * (int32_t)RawRange;
 8002712:	193b      	adds	r3, r7, r4
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	001a      	movs	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	435a      	muls	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	601a      	str	r2, [r3, #0]
	}
	LOG_FUNCTION_END_FMT(status, "%d", (int)*pRange_mm);
	return status;
 8002720:	697b      	ldr	r3, [r7, #20]
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b007      	add	sp, #28
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	2000000c 	.word	0x2000000c

08002730 <VL6180_RangeSetRawThresholds>:

int VL6180_RangeSetRawThresholds(VL6180Dev_t dev, uint8_t low, uint8_t high)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	0004      	movs	r4, r0
 8002738:	0008      	movs	r0, r1
 800273a:	0011      	movs	r1, r2
 800273c:	1dfb      	adds	r3, r7, #7
 800273e:	1c22      	adds	r2, r4, #0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	1dbb      	adds	r3, r7, #6
 8002744:	1c02      	adds	r2, r0, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	1d7b      	adds	r3, r7, #5
 800274a:	1c0a      	adds	r2, r1, #0
 800274c:	701a      	strb	r2, [r3, #0]
	int status;
	LOG_FUNCTION_START("%d %d", (int) low, (int)high);
	/* TODO we can optimize here grouping high/low in a word but that's cpu endianness dependent */
	status = VL6180_WrByte(dev, SYSRANGE_THRESH_HIGH, high);
 800274e:	1d7b      	adds	r3, r7, #5
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2119      	movs	r1, #25
 8002758:	0018      	movs	r0, r3
 800275a:	f001 fc9b 	bl	8004094 <VL6180_WrByte>
 800275e:	0003      	movs	r3, r0
 8002760:	60fb      	str	r3, [r7, #12]
	if (!status) {
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <VL6180_RangeSetRawThresholds+0x4c>
		status = VL6180_WrByte(dev, SYSRANGE_THRESH_LOW, low);
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	211a      	movs	r1, #26
 8002772:	0018      	movs	r0, r3
 8002774:	f001 fc8e 	bl	8004094 <VL6180_WrByte>
 8002778:	0003      	movs	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]
	}

	LOG_FUNCTION_END(status);
	return status;
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b005      	add	sp, #20
 8002784:	bd90      	pop	{r4, r7, pc}

08002786 <VL6180_RangeGetInterruptStatus>:
	return status;
}


int VL6180_RangeGetInterruptStatus(VL6180Dev_t dev, uint8_t *pIntStatus)
{
 8002786:	b590      	push	{r4, r7, lr}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	0002      	movs	r2, r0
 800278e:	6039      	str	r1, [r7, #0]
 8002790:	1dfb      	adds	r3, r7, #7
 8002792:	701a      	strb	r2, [r3, #0]
	int status;
	uint8_t IntStatus;
	LOG_FUNCTION_START("%p", pIntStatus);
	/* FIXME we are grouping "error" with over status the user must check implicitly for it
	 * not just new sample or over status , that will nevr show up in case of error*/
	status = VL6180_GetCachedByte(dev, RESULT_INTERRUPT_STATUS_GPIO, &IntStatus);
 8002794:	240b      	movs	r4, #11
 8002796:	193a      	adds	r2, r7, r4
 8002798:	1dfb      	adds	r3, r7, #7
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	214f      	movs	r1, #79	; 0x4f
 800279e:	0018      	movs	r0, r3
 80027a0:	f7ff fec6 	bl	8002530 <VL6180_GetCachedByte>
 80027a4:	0003      	movs	r3, r0
 80027a6:	60fb      	str	r3, [r7, #12]
	*pIntStatus = IntStatus & 0xC7;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2238      	movs	r2, #56	; 0x38
 80027ae:	4393      	bics	r3, r2
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END_FMT(status, "%d", (int)*pIntStatus);
	return status;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b005      	add	sp, #20
 80027be:	bd90      	pop	{r4, r7, pc}

080027c0 <VL6180_ClearInterrupt>:
	LOG_FUNCTION_END_FMT(status, "%d", (int)*IntStatus);
	return status;
}

int VL6180_ClearInterrupt(VL6180Dev_t dev, uint8_t IntClear)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	0002      	movs	r2, r0
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	1dbb      	adds	r3, r7, #6
 80027ce:	1c0a      	adds	r2, r1, #0
 80027d0:	701a      	strb	r2, [r3, #0]
	int status;
	LOG_FUNCTION_START("%d", (int)IntClear);
	if (IntClear <= 7) {
 80027d2:	1dbb      	adds	r3, r7, #6
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b07      	cmp	r3, #7
 80027d8:	d80a      	bhi.n	80027f0 <VL6180_ClearInterrupt+0x30>
		status = VL6180_WrByte(dev, SYSTEM_INTERRUPT_CLEAR, IntClear);
 80027da:	1dbb      	adds	r3, r7, #6
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	1dfb      	adds	r3, r7, #7
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2115      	movs	r1, #21
 80027e4:	0018      	movs	r0, r3
 80027e6:	f001 fc55 	bl	8004094 <VL6180_WrByte>
 80027ea:	0003      	movs	r3, r0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	e002      	b.n	80027f6 <VL6180_ClearInterrupt+0x36>
	} else {
		status = INVALID_PARAMS;
 80027f0:	2302      	movs	r3, #2
 80027f2:	425b      	negs	r3, r3
 80027f4:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_UpscaleInitPatch0>:
}

#if VL6180_UPSCALE_SUPPORT != 1

static int _UpscaleInitPatch0(VL6180Dev_t dev)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	0002      	movs	r2, r0
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	701a      	strb	r2, [r3, #0]
	int status;
	uint32_t CalValue = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
	CalValue = VL6180DevDataGet(dev, Part2PartAmbNVM);
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <_UpscaleInitPatch0+0x34>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
	status = VL6180_WrDWord(dev, 0xDA, CalValue);
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	21da      	movs	r1, #218	; 0xda
 800281e:	0018      	movs	r0, r3
 8002820:	f001 fca5 	bl	800416e <VL6180_WrDWord>
 8002824:	0003      	movs	r3, r0
 8002826:	60bb      	str	r3, [r7, #8]
	return status;
 8002828:	68bb      	ldr	r3, [r7, #8]
}
 800282a:	0018      	movs	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	2000000c 	.word	0x2000000c

08002838 <VL6180_UpscaleRegInit>:

/* only include up-scaling register setting when up-scale support is configured in */
int VL6180_UpscaleRegInit(VL6180Dev_t dev)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	0002      	movs	r2, r0
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	701a      	strb	r2, [r3, #0]
	/*  apply REGISTER_TUNING_ER02_100614_CustomerView.txt */
	VL6180_WrByte(dev, 0x0207, 0x01);
 8002844:	498f      	ldr	r1, [pc, #572]	; (8002a84 <VL6180_UpscaleRegInit+0x24c>)
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	0018      	movs	r0, r3
 800284e:	f001 fc21 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0208, 0x01);
 8002852:	2382      	movs	r3, #130	; 0x82
 8002854:	0099      	lsls	r1, r3, #2
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2201      	movs	r2, #1
 800285c:	0018      	movs	r0, r3
 800285e:	f001 fc19 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0096, 0x00);
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	2196      	movs	r1, #150	; 0x96
 800286a:	0018      	movs	r0, r3
 800286c:	f001 fc12 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0097, 0x54);
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2254      	movs	r2, #84	; 0x54
 8002876:	2197      	movs	r1, #151	; 0x97
 8002878:	0018      	movs	r0, r3
 800287a:	f001 fc0b 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00e3, 0x01);
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	21e3      	movs	r1, #227	; 0xe3
 8002886:	0018      	movs	r0, r3
 8002888:	f001 fc04 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00e4, 0x03);
 800288c:	1dfb      	adds	r3, r7, #7
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2203      	movs	r2, #3
 8002892:	21e4      	movs	r1, #228	; 0xe4
 8002894:	0018      	movs	r0, r3
 8002896:	f001 fbfd 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00e5, 0x02);
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2202      	movs	r2, #2
 80028a0:	21e5      	movs	r1, #229	; 0xe5
 80028a2:	0018      	movs	r0, r3
 80028a4:	f001 fbf6 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00e6, 0x01);
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	21e6      	movs	r1, #230	; 0xe6
 80028b0:	0018      	movs	r0, r3
 80028b2:	f001 fbef 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00e7, 0x03);
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2203      	movs	r2, #3
 80028bc:	21e7      	movs	r1, #231	; 0xe7
 80028be:	0018      	movs	r0, r3
 80028c0:	f001 fbe8 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00f5, 0x02);
 80028c4:	1dfb      	adds	r3, r7, #7
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2202      	movs	r2, #2
 80028ca:	21f5      	movs	r1, #245	; 0xf5
 80028cc:	0018      	movs	r0, r3
 80028ce:	f001 fbe1 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00d9, 0x05);
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2205      	movs	r2, #5
 80028d8:	21d9      	movs	r1, #217	; 0xd9
 80028da:	0018      	movs	r0, r3
 80028dc:	f001 fbda 	bl	8004094 <VL6180_WrByte>

	_UpscaleInitPatch0(dev);
 80028e0:	1dfb      	adds	r3, r7, #7
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff ff8b 	bl	8002800 <_UpscaleInitPatch0>

	VL6180_WrByte(dev, 0x009f, 0x00);
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	219f      	movs	r1, #159	; 0x9f
 80028f2:	0018      	movs	r0, r3
 80028f4:	f001 fbce 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00a3, 0x28);
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2228      	movs	r2, #40	; 0x28
 80028fe:	21a3      	movs	r1, #163	; 0xa3
 8002900:	0018      	movs	r0, r3
 8002902:	f001 fbc7 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00b7, 0x00);
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	21b7      	movs	r1, #183	; 0xb7
 800290e:	0018      	movs	r0, r3
 8002910:	f001 fbc0 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00bb, 0x28);
 8002914:	1dfb      	adds	r3, r7, #7
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2228      	movs	r2, #40	; 0x28
 800291a:	21bb      	movs	r1, #187	; 0xbb
 800291c:	0018      	movs	r0, r3
 800291e:	f001 fbb9 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00b2, 0x09);
 8002922:	1dfb      	adds	r3, r7, #7
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2209      	movs	r2, #9
 8002928:	21b2      	movs	r1, #178	; 0xb2
 800292a:	0018      	movs	r0, r3
 800292c:	f001 fbb2 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00ca, 0x09);
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2209      	movs	r2, #9
 8002936:	21ca      	movs	r1, #202	; 0xca
 8002938:	0018      	movs	r0, r3
 800293a:	f001 fbab 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0198, 0x01);
 800293e:	23cc      	movs	r3, #204	; 0xcc
 8002940:	0059      	lsls	r1, r3, #1
 8002942:	1dfb      	adds	r3, r7, #7
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	0018      	movs	r0, r3
 800294a:	f001 fba3 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x01b0, 0x17);
 800294e:	23d8      	movs	r3, #216	; 0xd8
 8002950:	0059      	lsls	r1, r3, #1
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2217      	movs	r2, #23
 8002958:	0018      	movs	r0, r3
 800295a:	f001 fb9b 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x01ad, 0x00);
 800295e:	23ae      	movs	r3, #174	; 0xae
 8002960:	33ff      	adds	r3, #255	; 0xff
 8002962:	0019      	movs	r1, r3
 8002964:	1dfb      	adds	r3, r7, #7
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	0018      	movs	r0, r3
 800296c:	f001 fb92 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x00ff, 0x05);
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2205      	movs	r2, #5
 8002976:	21ff      	movs	r1, #255	; 0xff
 8002978:	0018      	movs	r0, r3
 800297a:	f001 fb8b 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0100, 0x05);
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	0059      	lsls	r1, r3, #1
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2205      	movs	r2, #5
 8002988:	0018      	movs	r0, r3
 800298a:	f001 fb83 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0199, 0x05);
 800298e:	239a      	movs	r3, #154	; 0x9a
 8002990:	33ff      	adds	r3, #255	; 0xff
 8002992:	0019      	movs	r1, r3
 8002994:	1dfb      	adds	r3, r7, #7
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2205      	movs	r2, #5
 800299a:	0018      	movs	r0, r3
 800299c:	f001 fb7a 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x01a6, 0x1b);
 80029a0:	23d3      	movs	r3, #211	; 0xd3
 80029a2:	0059      	lsls	r1, r3, #1
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	221b      	movs	r2, #27
 80029aa:	0018      	movs	r0, r3
 80029ac:	f001 fb72 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x01ac, 0x3e);
 80029b0:	23d6      	movs	r3, #214	; 0xd6
 80029b2:	0059      	lsls	r1, r3, #1
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	223e      	movs	r2, #62	; 0x3e
 80029ba:	0018      	movs	r0, r3
 80029bc:	f001 fb6a 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x01a7, 0x1f);
 80029c0:	23a8      	movs	r3, #168	; 0xa8
 80029c2:	33ff      	adds	r3, #255	; 0xff
 80029c4:	0019      	movs	r1, r3
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	221f      	movs	r2, #31
 80029cc:	0018      	movs	r0, r3
 80029ce:	f001 fb61 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0030, 0x00);
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2130      	movs	r1, #48	; 0x30
 80029da:	0018      	movs	r0, r3
 80029dc:	f001 fb5a 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0011, 0x10);
 80029e0:	1dfb      	adds	r3, r7, #7
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	2111      	movs	r1, #17
 80029e8:	0018      	movs	r0, r3
 80029ea:	f001 fb53 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x010a, 0x30);
 80029ee:	2385      	movs	r3, #133	; 0x85
 80029f0:	0059      	lsls	r1, r3, #1
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2230      	movs	r2, #48	; 0x30
 80029f8:	0018      	movs	r0, r3
 80029fa:	f001 fb4b 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x003f, 0x46);
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2246      	movs	r2, #70	; 0x46
 8002a04:	213f      	movs	r1, #63	; 0x3f
 8002a06:	0018      	movs	r0, r3
 8002a08:	f001 fb44 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0031, 0xFF);
 8002a0c:	1dfb      	adds	r3, r7, #7
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	2131      	movs	r1, #49	; 0x31
 8002a14:	0018      	movs	r0, r3
 8002a16:	f001 fb3d 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0040, 0x63);
 8002a1a:	1dfb      	adds	r3, r7, #7
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2263      	movs	r2, #99	; 0x63
 8002a20:	2140      	movs	r1, #64	; 0x40
 8002a22:	0018      	movs	r0, r3
 8002a24:	f001 fb36 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x002e, 0x01);
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	212e      	movs	r1, #46	; 0x2e
 8002a30:	0018      	movs	r0, r3
 8002a32:	f001 fb2f 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x002c, 0xff);
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	22ff      	movs	r2, #255	; 0xff
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f001 fb28 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x001b, 0x09);
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2209      	movs	r2, #9
 8002a4a:	211b      	movs	r1, #27
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f001 fb21 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x003e, 0x31);
 8002a52:	1dfb      	adds	r3, r7, #7
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2231      	movs	r2, #49	; 0x31
 8002a58:	213e      	movs	r1, #62	; 0x3e
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f001 fb1a 	bl	8004094 <VL6180_WrByte>
	VL6180_WrByte(dev, 0x0014, 0x24);
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2224      	movs	r2, #36	; 0x24
 8002a66:	2114      	movs	r1, #20
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f001 fb13 	bl	8004094 <VL6180_WrByte>
#if VL6180_EXTENDED_RANGE
	VL6180_RangeSetMaxConvergenceTime(dev, 63);
#else
	VL6180_RangeSetMaxConvergenceTime(dev, 50);
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2132      	movs	r1, #50	; 0x32
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f920 	bl	8002cba <VL6180_RangeSetMaxConvergenceTime>
#endif
	return 0;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	00000207 	.word	0x00000207

08002a88 <VL6180_UpscaleSetScaling>:
#else
#define VL6180_UpscaleRegInit(...) -1
#endif

int VL6180_UpscaleSetScaling(VL6180Dev_t dev, uint8_t scaling)
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	0002      	movs	r2, r0
 8002a90:	1dfb      	adds	r3, r7, #7
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	1dbb      	adds	r3, r7, #6
 8002a96:	1c0a      	adds	r2, r1, #0
 8002a98:	701a      	strb	r2, [r3, #0]
	/* we are in fixed config so only allow configured factor */
	#define min_scaling VL6180_UPSCALE_SUPPORT
	#define max_scaling VL6180_UPSCALE_SUPPORT
#endif

	if (scaling >= min_scaling  && scaling <= max_scaling) {
 8002a9a:	1dbb      	adds	r3, r7, #6
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d100      	bne.n	8002aa4 <VL6180_UpscaleSetScaling+0x1c>
 8002aa2:	e08e      	b.n	8002bc2 <VL6180_UpscaleSetScaling+0x13a>
 8002aa4:	1dbb      	adds	r3, r7, #6
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d900      	bls.n	8002aae <VL6180_UpscaleSetScaling+0x26>
 8002aac:	e089      	b.n	8002bc2 <VL6180_UpscaleSetScaling+0x13a>

		Scaler = ScalerLookUP[scaling - 1];
 8002aae:	1dbb      	adds	r3, r7, #6
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	1e59      	subs	r1, r3, #1
 8002ab4:	2010      	movs	r0, #16
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	4a47      	ldr	r2, [pc, #284]	; (8002bd8 <VL6180_UpscaleSetScaling+0x150>)
 8002aba:	0049      	lsls	r1, r1, #1
 8002abc:	5a8a      	ldrh	r2, [r1, r2]
 8002abe:	801a      	strh	r2, [r3, #0]
		status = VL6180_WrWord(dev, RANGE_SCALER, Scaler);
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2196      	movs	r1, #150	; 0x96
 8002aca:	0018      	movs	r0, r3
 8002acc:	f001 fb14 	bl	80040f8 <VL6180_WrWord>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	617b      	str	r3, [r7, #20]
		_SetUpscale(dev, scaling);
 8002ad4:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <VL6180_UpscaleSetScaling+0x154>)
 8002ad6:	1dba      	adds	r2, r7, #6
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	749a      	strb	r2, [r3, #18]

		/* Apply scaling on  part-2-part offset */
		Offset = VL6180DevDataGet(dev, Part2PartOffsetNVM) / scaling;
 8002adc:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <VL6180_UpscaleSetScaling+0x154>)
 8002ade:	22c5      	movs	r2, #197	; 0xc5
 8002ae0:	569b      	ldrsb	r3, [r3, r2]
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	1dbb      	adds	r3, r7, #6
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	0019      	movs	r1, r3
 8002aea:	0010      	movs	r0, r2
 8002aec:	f7fd fb96 	bl	800021c <__divsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	001a      	movs	r2, r3
 8002af4:	210f      	movs	r1, #15
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	701a      	strb	r2, [r3, #0]
		status = VL6180_WrByte(dev, SYSRANGE_PART_TO_PART_RANGE_OFFSET, Offset);
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	1dfb      	adds	r3, r7, #7
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2124      	movs	r1, #36	; 0x24
 8002b04:	0018      	movs	r0, r3
 8002b06:	f001 fac5 	bl	8004094 <VL6180_WrByte>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	617b      	str	r3, [r7, #20]

		/* Apply scaling on CrossTalkValidHeight */
		if (status == 0) {
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <VL6180_UpscaleSetScaling+0xac>
			status = VL6180_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
									DEF_CROSS_TALK_VALID_HEIGHT_VALUE /  scaling);
 8002b14:	1dbb      	adds	r3, r7, #6
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	0019      	movs	r1, r3
 8002b1a:	2014      	movs	r0, #20
 8002b1c:	f7fd fb7e 	bl	800021c <__divsi3>
 8002b20:	0003      	movs	r3, r0
			status = VL6180_WrByte(dev, SYSRANGE_CROSSTALK_VALID_HEIGHT,
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2121      	movs	r1, #33	; 0x21
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f001 fab2 	bl	8004094 <VL6180_WrByte>
 8002b30:	0003      	movs	r3, r0
 8002b32:	617b      	str	r3, [r7, #20]
		}
		/* Apply scaling on RangeIgnore ValidHeight if enabled */
		if ( status == 0) {
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d127      	bne.n	8002b8a <VL6180_UpscaleSetScaling+0x102>
			if (  VL6180DevDataGet(dev, RangeIgnore.Enabled) !=0 ) {
 8002b3a:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <VL6180_UpscaleSetScaling+0x154>)
 8002b3c:	7c1b      	ldrb	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d023      	beq.n	8002b8a <VL6180_UpscaleSetScaling+0x102>
				ValidHeight = VL6180DevDataGet(dev, RangeIgnore.ValidHeight);
 8002b42:	2412      	movs	r4, #18
 8002b44:	193b      	adds	r3, r7, r4
 8002b46:	4a25      	ldr	r2, [pc, #148]	; (8002bdc <VL6180_UpscaleSetScaling+0x154>)
 8002b48:	8992      	ldrh	r2, [r2, #12]
 8002b4a:	801a      	strh	r2, [r3, #0]
				ValidHeight  /= _GetUpscale(dev);
 8002b4c:	193b      	adds	r3, r7, r4
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <VL6180_UpscaleSetScaling+0x154>)
 8002b52:	7c9b      	ldrb	r3, [r3, #18]
 8002b54:	0019      	movs	r1, r3
 8002b56:	0010      	movs	r0, r2
 8002b58:	f7fd fb60 	bl	800021c <__divsi3>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	001a      	movs	r2, r3
 8002b60:	193b      	adds	r3, r7, r4
 8002b62:	801a      	strh	r2, [r3, #0]
				if( ValidHeight > 255 )
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	2bff      	cmp	r3, #255	; 0xff
 8002b6a:	d902      	bls.n	8002b72 <VL6180_UpscaleSetScaling+0xea>
					ValidHeight = 255;
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	22ff      	movs	r2, #255	; 0xff
 8002b70:	801a      	strh	r2, [r3, #0]

				status = VL6180_WrByte(dev, SYSRANGE_RANGE_IGNORE_VALID_HEIGHT,
 8002b72:	2312      	movs	r3, #18
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2125      	movs	r1, #37	; 0x25
 8002b80:	0018      	movs	r0, r3
 8002b82:	f001 fa87 	bl	8004094 <VL6180_WrByte>
 8002b86:	0003      	movs	r3, r0
 8002b88:	617b      	str	r3, [r7, #20]
							(uint8_t)(ValidHeight & 0xFF) );
			}
		}

#if !VL6180_EXTENDED_RANGE
		if (status == 0) {
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10e      	bne.n	8002bae <VL6180_UpscaleSetScaling+0x126>
			status = VL6180_RangeSetEceState(dev, scaling == 1); /* enable ece only at 1x scaling */
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	425a      	negs	r2, r3
 8002b98:	4153      	adcs	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	1dfb      	adds	r3, r7, #7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	0011      	movs	r1, r2
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f000 f864 	bl	8002c72 <VL6180_RangeSetEceState>
 8002baa:	0003      	movs	r3, r0
 8002bac:	617b      	str	r3, [r7, #20]
		}
		if (status == 0 && !VL6180_EXTENDED_RANGE && scaling != 1) {
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <VL6180_UpscaleSetScaling+0x142>
 8002bb4:	1dbb      	adds	r3, r7, #6
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d006      	beq.n	8002bca <VL6180_UpscaleSetScaling+0x142>
			status = NOT_GUARANTEED ;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	617b      	str	r3, [r7, #20]
		if (status == 0 && !VL6180_EXTENDED_RANGE && scaling != 1) {
 8002bc0:	e003      	b.n	8002bca <VL6180_UpscaleSetScaling+0x142>
		}
#endif
	} else {
		status = INVALID_PARAMS;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	425b      	negs	r3, r3
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e000      	b.n	8002bcc <VL6180_UpscaleSetScaling+0x144>
		if (status == 0 && !VL6180_EXTENDED_RANGE && scaling != 1) {
 8002bca:	46c0      	nop			; (mov r8, r8)
	}
#undef min_scaling
#undef max_scaling
	LOG_FUNCTION_END(status);
	return status;
 8002bcc:	697b      	ldr	r3, [r7, #20]
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b007      	add	sp, #28
 8002bd4:	bd90      	pop	{r4, r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	080079c0 	.word	0x080079c0
 8002bdc:	2000000c 	.word	0x2000000c

08002be0 <VL6180_UpscaleStaticInit>:
	return status;
}


static int  VL6180_UpscaleStaticInit(VL6180Dev_t dev)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	0002      	movs	r2, r0
 8002be8:	1dfb      	adds	r3, r7, #7
 8002bea:	701a      	strb	r2, [r3, #0]
	/* todo make these a fail macro in case only 1x is suppoted */
	int status;

	LOG_FUNCTION_START("");
	do {
		status = VL6180_UpscaleRegInit(dev);
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff fe21 	bl	8002838 <VL6180_UpscaleRegInit>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	60fb      	str	r3, [r7, #12]
			VL6180_ErrLog("VL6180_RangeSetEceState fail");
			break;
		}
#endif
	} while (0);
	if (!status) {
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d110      	bne.n	8002c22 <VL6180_UpscaleStaticInit+0x42>
		/*  must write the scaler at least once to the device to ensure the scaler is in a known state. */
		status = VL6180_UpscaleSetScaling(dev, _GetUpscale(dev));
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <VL6180_UpscaleStaticInit+0x4c>)
 8002c02:	7c9a      	ldrb	r2, [r3, #18]
 8002c04:	1dfb      	adds	r3, r7, #7
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	0011      	movs	r1, r2
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7ff ff3c 	bl	8002a88 <VL6180_UpscaleSetScaling>
 8002c10:	0003      	movs	r3, r0
 8002c12:	60fb      	str	r3, [r7, #12]
		VL6180_WrByte(dev, 0x016, 0x00); /* change fresh out of set status to 0 */
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2116      	movs	r1, #22
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f001 fa39 	bl	8004094 <VL6180_WrByte>
	}
	LOG_FUNCTION_END(status);
	return status;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	2000000c 	.word	0x2000000c

08002c30 <VL6180_RangeConfigInterrupt>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180_RangeConfigInterrupt(VL6180Dev_t dev, uint8_t ConfigGpioInt)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	0002      	movs	r2, r0
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	1dbb      	adds	r3, r7, #6
 8002c3e:	1c0a      	adds	r2, r1, #0
 8002c40:	701a      	strb	r2, [r3, #0]
	int status;

	if (ConfigGpioInt <= CONFIG_GPIO_INTERRUPT_NEW_SAMPLE_READY) {
 8002c42:	1dbb      	adds	r3, r7, #6
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d80b      	bhi.n	8002c62 <VL6180_RangeConfigInterrupt+0x32>
		status = VL6180_UpdateByte(dev, SYSTEM_INTERRUPT_CONFIG_GPIO,
 8002c4a:	1dbb      	adds	r3, r7, #6
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	7818      	ldrb	r0, [r3, #0]
 8002c52:	0013      	movs	r3, r2
 8002c54:	22f8      	movs	r2, #248	; 0xf8
 8002c56:	2114      	movs	r1, #20
 8002c58:	f001 fac8 	bl	80041ec <VL6180_UpdateByte>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e002      	b.n	8002c68 <VL6180_RangeConfigInterrupt+0x38>
									(uint8_t)(~CONFIG_GPIO_RANGE_MASK),
									ConfigGpioInt);
	} else {
		VL6180_ErrLog("Invalid config mode param %d", (int)ConfigGpioInt);
		status = INVALID_PARAMS;
 8002c62:	2302      	movs	r3, #2
 8002c64:	425b      	negs	r3, r3
 8002c66:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8002c68:	68fb      	ldr	r3, [r7, #12]
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b004      	add	sp, #16
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <VL6180_RangeSetEceState>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180_RangeSetEceState(VL6180Dev_t dev, int enable)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	0002      	movs	r2, r0
 8002c7a:	6039      	str	r1, [r7, #0]
 8002c7c:	1dfb      	adds	r3, r7, #7
 8002c7e:	701a      	strb	r2, [r3, #0]
	int status;
	uint8_t or_mask;

	LOG_FUNCTION_START("%d", (int)enable);
	if (enable)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <VL6180_RangeSetEceState+0x1e>
		or_mask = RANGE_CHECK_ECE_ENABLE_MASK;
 8002c86:	230f      	movs	r3, #15
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e003      	b.n	8002c98 <VL6180_RangeSetEceState+0x26>
	else
		or_mask = 0;
 8002c90:	230f      	movs	r3, #15
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]

	status = VL6180_UpdateByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, ~RANGE_CHECK_ECE_ENABLE_MASK, or_mask);
 8002c98:	230f      	movs	r3, #15
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	7818      	ldrb	r0, [r3, #0]
 8002ca2:	0013      	movs	r3, r2
 8002ca4:	22fe      	movs	r2, #254	; 0xfe
 8002ca6:	212d      	movs	r1, #45	; 0x2d
 8002ca8:	f001 faa0 	bl	80041ec <VL6180_UpdateByte>
 8002cac:	0003      	movs	r3, r0
 8002cae:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_END(status);
	return status;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <VL6180_RangeSetMaxConvergenceTime>:


int VL6180_RangeSetMaxConvergenceTime(VL6180Dev_t dev, uint8_t  MaxConTime_msec)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	1dbb      	adds	r3, r7, #6
 8002cc8:	1c0a      	adds	r2, r1, #0
 8002cca:	701a      	strb	r2, [r3, #0]
	int status = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
	LOG_FUNCTION_START("%d", (int)MaxConTime_msec);
	do {
		status = VL6180_WrByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, MaxConTime_msec);
 8002cd0:	1dbb      	adds	r3, r7, #6
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	1dfb      	adds	r3, r7, #7
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	211c      	movs	r1, #28
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f001 f9da 	bl	8004094 <VL6180_WrByte>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]
		if (status) {
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d111      	bne.n	8002d0e <VL6180_RangeSetMaxConvergenceTime+0x54>
			break;
		}
		status = VL6180_RangeSetEarlyConvergenceEestimateThreshold(dev);
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 f836 	bl	8002d60 <VL6180_RangeSetEarlyConvergenceEestimateThreshold>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	60fb      	str	r3, [r7, #12]
		if (status) {
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <VL6180_RangeSetMaxConvergenceTime+0x58>
			break;
		}
		status = _DMax_InitData(dev);
 8002cfe:	1dfb      	adds	r3, r7, #7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	0018      	movs	r0, r3
 8002d04:	f001 f894 	bl	8003e30 <_DMax_InitData>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e002      	b.n	8002d14 <VL6180_RangeSetMaxConvergenceTime+0x5a>
			break;
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	e000      	b.n	8002d14 <VL6180_RangeSetMaxConvergenceTime+0x5a>
			break;
 8002d12:	46c0      	nop			; (mov r8, r8)
	} while (0);
	LOG_FUNCTION_END(status);
	return status;
 8002d14:	68fb      	ldr	r3, [r7, #12]
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <VL6180_RangeSetSystemMode>:
	LOG_FUNCTION_END(status);
	return status;
}

int VL6180_RangeSetSystemMode(VL6180Dev_t dev, uint8_t  mode)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	0002      	movs	r2, r0
 8002d26:	1dfb      	adds	r3, r7, #7
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	1dbb      	adds	r3, r7, #6
 8002d2c:	1c0a      	adds	r2, r1, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("%d", (int)mode);
	/* FIXME we are not checking device is ready via @a VL6180_RangeWaitDeviceReady
	 * so if called back to back real fast we are not checking
	 * if previous mode "set" got absorbed => bit 0 must be 0 so that it work
	 */
	if (mode <= 3) {
 8002d30:	1dbb      	adds	r3, r7, #6
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d80a      	bhi.n	8002d4e <VL6180_RangeSetSystemMode+0x30>
		status = VL6180_WrByte(dev, SYSRANGE_START, mode);
 8002d38:	1dbb      	adds	r3, r7, #6
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2118      	movs	r1, #24
 8002d42:	0018      	movs	r0, r3
 8002d44:	f001 f9a6 	bl	8004094 <VL6180_WrByte>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e002      	b.n	8002d54 <VL6180_RangeSetSystemMode+0x36>
		if (status) {
		    VL6180_ErrLog("SYSRANGE_START wr fail");
		}
	} else {
		status = INVALID_PARAMS;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	425b      	negs	r3, r3
 8002d52:	60fb      	str	r3, [r7, #12]
	}
	LOG_FUNCTION_END(status);
	return status;
 8002d54:	68fb      	ldr	r3, [r7, #12]
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b004      	add	sp, #16
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <VL6180_RangeSetEarlyConvergenceEestimateThreshold>:
	return status;
}


static int VL6180_RangeSetEarlyConvergenceEestimateThreshold(VL6180Dev_t dev)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b08f      	sub	sp, #60	; 0x3c
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	0002      	movs	r2, r0
 8002d68:	1dfb      	adds	r3, r7, #7
 8002d6a:	701a      	strb	r2, [r3, #0]
	int status;

	const uint32_t cMicroSecPerMilliSec  = 1000;
 8002d6c:	23fa      	movs	r3, #250	; 0xfa
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t cEceSampleTime_us     = 500;
 8002d72:	23fa      	movs	r3, #250	; 0xfa
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t ece_factor_m          = VL6180DevDataGet(dev, EceFactorM);
 8002d78:	4b2d      	ldr	r3, [pc, #180]	; (8002e30 <VL6180_RangeSetEarlyConvergenceEestimateThreshold+0xd0>)
 8002d7a:	891b      	ldrh	r3, [r3, #8]
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ece_factor_d          = VL6180DevDataGet(dev, EceFactorD);
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <VL6180_RangeSetEarlyConvergenceEestimateThreshold+0xd0>)
 8002d80:	895b      	ldrh	r3, [r3, #10]
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t AveTime;

	LOG_FUNCTION_START("");

	do {
		status = VL6180_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &u8);
 8002d84:	240f      	movs	r4, #15
 8002d86:	193a      	adds	r2, r7, r4
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	211c      	movs	r1, #28
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f001 fa84 	bl	800429c <VL6180_RdByte>
 8002d94:	0003      	movs	r3, r0
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
		if (status) {
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d13f      	bne.n	8002e1e <VL6180_RangeSetEarlyConvergenceEestimateThreshold+0xbe>
			VL6180_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail");
			break;
		}
		maxConv_ms = u8;
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	623b      	str	r3, [r7, #32]
		AveTime = _GetAveTotalTime(dev);
 8002da4:	1dfb      	adds	r3, r7, #7
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 f843 	bl	8002e34 <_GetAveTotalTime>
 8002dae:	0003      	movs	r3, r0
 8002db0:	61fb      	str	r3, [r7, #28]
		if (AveTime < 0) {
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da03      	bge.n	8002dc0 <VL6180_RangeSetEarlyConvergenceEestimateThreshold+0x60>
			status = -1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	425b      	negs	r3, r3
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
			break;
 8002dbe:	e031      	b.n	8002e24 <VL6180_RangeSetEarlyConvergenceEestimateThreshold+0xc4>
		}

		convergTime_us = maxConv_ms * cMicroSecPerMilliSec - AveTime;
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc4:	435a      	muls	r2, r3
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	61bb      	str	r3, [r7, #24]
		status = VL6180_RdDWord(dev, 0xB8, &fineThresh);
 8002dcc:	2310      	movs	r3, #16
 8002dce:	18fa      	adds	r2, r7, r3
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	21b8      	movs	r1, #184	; 0xb8
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f001 fadf 	bl	800439a <VL6180_RdDWord>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
		if (status) {
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11d      	bne.n	8002e22 <VL6180_RangeSetEarlyConvergenceEestimateThreshold+0xc2>
			VL6180_ErrLog("reg 0xB8 rd fail");
			break;
		}
		fineThresh *= 256;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	613b      	str	r3, [r7, #16]
		eceThresh = ece_factor_m * cEceSampleTime_us * fineThresh / (convergTime_us * ece_factor_d);
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df0:	4353      	muls	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	435a      	muls	r2, r3
 8002df6:	0010      	movs	r0, r2
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	4353      	muls	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	f7fd f982 	bl	8000108 <__udivsi3>
 8002e04:	0003      	movs	r3, r0
 8002e06:	617b      	str	r3, [r7, #20]

		status = VL6180_WrWord(dev, SYSRANGE_EARLY_CONVERGENCE_ESTIMATE, (uint16_t)eceThresh);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2122      	movs	r1, #34	; 0x22
 8002e12:	0018      	movs	r0, r3
 8002e14:	f001 f970 	bl	80040f8 <VL6180_WrWord>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1c:	e002      	b.n	8002e24 <VL6180_RangeSetEarlyConvergenceEestimateThreshold+0xc4>
			break;
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	e000      	b.n	8002e24 <VL6180_RangeSetEarlyConvergenceEestimateThreshold+0xc4>
			break;
 8002e22:	46c0      	nop			; (mov r8, r8)
	} while (0);

	LOG_FUNCTION_END(status);
	return status;
 8002e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b00f      	add	sp, #60	; 0x3c
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	2000000c 	.word	0x2000000c

08002e34 <_GetAveTotalTime>:
/*
 * Return >0 = time
 *       <0 1 if fail to get read data from device to compute time
 */
static int32_t _GetAveTotalTime(VL6180Dev_t dev)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08c      	sub	sp, #48	; 0x30
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	701a      	strb	r2, [r3, #0]
	uint32_t cFwOverhead_us = 24;
 8002e40:	2318      	movs	r3, #24
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t cVcpSetupTime_us = 70;
 8002e44:	2346      	movs	r3, #70	; 0x46
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t cPLL2_StartupDelay_us = 200;
 8002e48:	23c8      	movs	r3, #200	; 0xc8
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t cMeasMask = 0x07;
 8002e4c:	2323      	movs	r3, #35	; 0x23
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2207      	movs	r2, #7
 8002e52:	701a      	strb	r2, [r3, #0]
	uint8_t u8;
	int status;

	LOG_FUNCTION_START("");

	status = VL6180_RdByte(dev, 0x109, &u8);
 8002e54:	230b      	movs	r3, #11
 8002e56:	18fa      	adds	r2, r7, r3
 8002e58:	230a      	movs	r3, #10
 8002e5a:	33ff      	adds	r3, #255	; 0xff
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f001 fa1a 	bl	800429c <VL6180_RdByte>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	61fb      	str	r3, [r7, #28]
	if (status) {
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <_GetAveTotalTime+0x44>
		VL6180_ErrLog("rd 0x109 fail");
		return -1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	425b      	negs	r3, r3
 8002e76:	e02e      	b.n	8002ed6 <_GetAveTotalTime+0xa2>
	}
	Samples = u8 & cMeasMask;
 8002e78:	210b      	movs	r1, #11
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2223      	movs	r2, #35	; 0x23
 8002e80:	18ba      	adds	r2, r7, r2
 8002e82:	7812      	ldrb	r2, [r2, #0]
 8002e84:	4013      	ands	r3, r2
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	61bb      	str	r3, [r7, #24]
	status = VL6180_RdByte(dev, READOUT_AVERAGING_SAMPLE_PERIOD, &u8);
 8002e8a:	187a      	adds	r2, r7, r1
 8002e8c:	2385      	movs	r3, #133	; 0x85
 8002e8e:	0059      	lsls	r1, r3, #1
 8002e90:	1dfb      	adds	r3, r7, #7
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f001 fa01 	bl	800429c <VL6180_RdByte>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	61fb      	str	r3, [r7, #28]
	if (status) {
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <_GetAveTotalTime+0x76>
		VL6180_ErrLog("i2c READOUT_AVERAGING_SAMPLE_PERIOD fail");
		return -1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	425b      	negs	r3, r3
 8002ea8:	e015      	b.n	8002ed6 <_GetAveTotalTime+0xa2>
	}
	SamplePeriod = u8;
 8002eaa:	230b      	movs	r3, #11
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	617b      	str	r3, [r7, #20]
	SingleTime_us = cFwOverhead_us + cVcpSetupTime_us + (SamplePeriod * 10);
 8002eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	18d1      	adds	r1, r2, r3
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	0013      	movs	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	189b      	adds	r3, r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	18cb      	adds	r3, r1, r3
 8002ec4:	613b      	str	r3, [r7, #16]
	TotalAveTime_us = (Samples + 1) * SingleTime_us + cPLL2_StartupDelay_us;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	435a      	muls	r2, r3
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	18d3      	adds	r3, r2, r3
 8002ed2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_END(TotalAveTime_us);
	return TotalAveTime_us;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b00c      	add	sp, #48	; 0x30
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <_filter_Init>:
#define _FilterData(field) VL6180DevDataGet(dev, FilterData.field)
/*
 * One time init
 */
int _filter_Init(VL6180Dev_t dev)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	1dfb      	adds	r3, r7, #7
 8002eea:	701a      	strb	r2, [r3, #0]
	int i;
	_FilterData(MeasurementIndex) = 0;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <_filter_Init+0x84>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]

	_FilterData(Default_ZeroVal) = 0;
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <_filter_Init+0x84>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	65da      	str	r2, [r3, #92]	; 0x5c
	_FilterData(Default_VAVGVal) = 0;
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <_filter_Init+0x84>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	661a      	str	r2, [r3, #96]	; 0x60
	_FilterData(NoDelay_ZeroVal) = 0;
 8002efe:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <_filter_Init+0x84>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	665a      	str	r2, [r3, #100]	; 0x64
	_FilterData(NoDelay_VAVGVal) = 0;
 8002f04:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <_filter_Init+0x84>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	669a      	str	r2, [r3, #104]	; 0x68
	_FilterData(Previous_VAVGDiff) = 0;
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <_filter_Init+0x84>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	66da      	str	r2, [r3, #108]	; 0x6c

	_FilterData(StdFilteredReads) = 0;
 8002f10:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <_filter_Init+0x84>)
 8002f12:	2258      	movs	r2, #88	; 0x58
 8002f14:	2100      	movs	r1, #0
 8002f16:	5299      	strh	r1, [r3, r2]
	_FilterData(FilteringOnGoingConsecutiveStates) = 0;
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <_filter_Init+0x84>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	671a      	str	r2, [r3, #112]	; 0x70

	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e013      	b.n	8002f4c <_filter_Init+0x6c>
		_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8002f24:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <_filter_Init+0x84>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	18d3      	adds	r3, r2, r3
 8002f2e:	3304      	adds	r3, #4
 8002f30:	2201      	movs	r2, #1
 8002f32:	4252      	negs	r2, r2
 8002f34:	801a      	strh	r2, [r3, #0]
		_FilterData(LastReturnRates)[i] = 0;
 8002f36:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <_filter_Init+0x84>)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	330a      	adds	r3, #10
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	3308      	adds	r3, #8
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b09      	cmp	r3, #9
 8002f50:	dde8      	ble.n	8002f24 <_filter_Init+0x44>
	}
	_FilterData(MeasurementsSinceLastFlush)=0;
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <_filter_Init+0x84>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
	return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	2000000c 	.word	0x2000000c

08002f68 <_filter_StdDevDamper>:
									uint32_t SignalRate,
									const uint32_t StdDevLimitLowLight,
									const uint32_t StdDevLimitLowLightSNR,
									const uint32_t StdDevLimitHighLight,
									const uint32_t StdDevLimitHighLightSNR)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
	uint32_t newStdDev;
	uint16_t SNR;

	if (AmbientRate > 0)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <_filter_StdDevDamper+0x2e>
		SNR = (uint16_t) ((100 * SignalRate) / AmbientRate);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2264      	movs	r2, #100	; 0x64
 8002f80:	4353      	muls	r3, r2
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd f8bf 	bl	8000108 <__udivsi3>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	2312      	movs	r3, #18
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	801a      	strh	r2, [r3, #0]
 8002f94:	e003      	b.n	8002f9e <_filter_StdDevDamper+0x36>
	else
		SNR = 9999;
 8002f96:	2312      	movs	r3, #18
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <_filter_StdDevDamper+0x90>)
 8002f9c:	801a      	strh	r2, [r3, #0]

	if (SNR >= StdDevLimitLowLightSNR) {
 8002f9e:	2312      	movs	r3, #18
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d802      	bhi.n	8002fb0 <_filter_StdDevDamper+0x48>
		newStdDev = StdDevLimitLowLight;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e01d      	b.n	8002fec <_filter_StdDevDamper+0x84>
	} else {
		if (SNR <= StdDevLimitHighLightSNR)
 8002fb0:	2312      	movs	r3, #18
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <_filter_StdDevDamper+0x5a>
			newStdDev = StdDevLimitHighLight;
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e014      	b.n	8002fec <_filter_StdDevDamper+0x84>
		else {
			newStdDev = (uint32_t)(StdDevLimitHighLight -
									(SNR - StdDevLimitHighLightSNR) *
 8002fc2:	2312      	movs	r3, #18
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	881a      	ldrh	r2, [r3, #0]
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	1a8a      	subs	r2, r1, r2
									(SNR - StdDevLimitHighLightSNR) *
 8002fd2:	435a      	muls	r2, r3
 8002fd4:	0010      	movs	r0, r2
									(StdDevLimitLowLightSNR - StdDevLimitHighLightSNR));
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	1ad3      	subs	r3, r2, r3
									(StdDevLimitHighLight - StdDevLimitLowLight) /
 8002fdc:	0019      	movs	r1, r3
 8002fde:	f7fd f893 	bl	8000108 <__udivsi3>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	001a      	movs	r2, r3
			newStdDev = (uint32_t)(StdDevLimitHighLight -
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
		}
	}

	return newStdDev;
 8002fec:	697b      	ldr	r3, [r7, #20]
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	0000270f 	.word	0x0000270f

08002ffc <_filter_Start>:
								uint16_t m_trueRange_mm,
								uint16_t m_rawRange_mm,
								uint32_t m_rtnSignalRate,
								uint32_t m_rtnAmbientRate,
								uint16_t errorCode)
{
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b0aa      	sub	sp, #168	; 0xa8
 8003000:	af02      	add	r7, sp, #8
 8003002:	0004      	movs	r4, r0
 8003004:	0008      	movs	r0, r1
 8003006:	0011      	movs	r1, r2
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	230f      	movs	r3, #15
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	1c22      	adds	r2, r4, #0
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	230c      	movs	r3, #12
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	1c02      	adds	r2, r0, #0
 8003018:	801a      	strh	r2, [r3, #0]
 800301a:	230a      	movs	r3, #10
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	1c0a      	adds	r2, r1, #0
 8003020:	801a      	strh	r2, [r3, #0]
	int status;
	uint16_t m_newTrueRange_mm = 0;
 8003022:	239e      	movs	r3, #158	; 0x9e
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2200      	movs	r2, #0
 8003028:	801a      	strh	r2, [r3, #0]
	#if VL6180_HAVE_MULTI_READ
	uint8_t MultiReadBuf[8];
	#endif
	uint16_t i;
	uint16_t bypassFilter = 0;
 800302a:	239a      	movs	r3, #154	; 0x9a
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	2200      	movs	r2, #0
 8003030:	801a      	strh	r2, [r3, #0]
	uint16_t resetVAVGData = 1;
 8003032:	2398      	movs	r3, #152	; 0x98
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2201      	movs	r2, #1
 8003038:	801a      	strh	r2, [r3, #0]

	uint16_t filterErrorCode = NoError;
 800303a:	2396      	movs	r3, #150	; 0x96
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	2200      	movs	r2, #0
 8003040:	801a      	strh	r2, [r3, #0]
	uint16_t filterErrorCodeOnRangingErrorCode = NoError;
 8003042:	2394      	movs	r3, #148	; 0x94
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2200      	movs	r2, #0
 8003048:	801a      	strh	r2, [r3, #0]
	uint16_t registerValue;

	uint32_t register32BitsValue1;
	uint32_t register32BitsValue2;

	uint16_t ValidDistance = 0;
 800304a:	2392      	movs	r3, #146	; 0x92
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2200      	movs	r2, #0
 8003050:	801a      	strh	r2, [r3, #0]
	uint16_t SuspicuousRangingZone = 0;
 8003052:	2390      	movs	r3, #144	; 0x90
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	2200      	movs	r2, #0
 8003058:	801a      	strh	r2, [r3, #0]

	uint16_t WrapAroundFlag = 0;
 800305a:	238e      	movs	r3, #142	; 0x8e
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	2200      	movs	r2, #0
 8003060:	801a      	strh	r2, [r3, #0]
	uint16_t NoWrapAroundFlag = 0;
 8003062:	238c      	movs	r3, #140	; 0x8c
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2200      	movs	r2, #0
 8003068:	801a      	strh	r2, [r3, #0]
	uint16_t NoWrapAroundHighConfidenceFlag = 0;
 800306a:	238a      	movs	r3, #138	; 0x8a
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2200      	movs	r2, #0
 8003070:	801a      	strh	r2, [r3, #0]

	uint16_t FlushFilter = 0;
 8003072:	2388      	movs	r3, #136	; 0x88
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2200      	movs	r2, #0
 8003078:	801a      	strh	r2, [r3, #0]
	uint32_t RateChange = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	2284      	movs	r2, #132	; 0x84
 800307e:	18ba      	adds	r2, r7, r2
 8003080:	6013      	str	r3, [r2, #0]

	uint16_t StdDevSamplesMinNeeded = 0;
 8003082:	2382      	movs	r3, #130	; 0x82
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2200      	movs	r2, #0
 8003088:	801a      	strh	r2, [r3, #0]
	uint16_t StdDevSamples = 0;
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	801a      	strh	r2, [r3, #0]
	uint32_t StdDevDistanceSum = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t StdDevDistanceMean = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t StdDevDistance = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	677b      	str	r3, [r7, #116]	; 0x74
	uint32_t StdDevRateSum = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t StdDevRateMean = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t StdDevRate = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t StdDevLimitWithTargetMove = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t WrapAroundLowReturnRateLimit;
	uint32_t WrapAroundLowReturnRateLimit2;
	uint32_t WrapAroundLowReturnRateFilterLimit;
	uint32_t WrapAroundHighReturnRateFilterLimit;

	uint32_t MAX_VAVGDiff = 1800;
 80030ae:	23e1      	movs	r3, #225	; 0xe1
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	657b      	str	r3, [r7, #84]	; 0x54

	uint8_t u8;//, u8_2;
	uint32_t XTalkCompRate_KCps;
	uint32_t StdDevLimit = 300;
 80030b4:	2396      	movs	r3, #150	; 0x96
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t MaxOrInvalidDistance =   255*_GetUpscale(dev);
 80030ba:	4bbd      	ldr	r3, [pc, #756]	; (80033b0 <_filter_Start+0x3b4>)
 80030bc:	7c9b      	ldrb	r3, [r3, #18]
 80030be:	001a      	movs	r2, r3
 80030c0:	0013      	movs	r3, r2
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* #define MaxOrInvalidDistance  (uint16_t) (255 * 3) */

	/* Check if distance is Valid or not */
	switch (errorCode) {
 80030c8:	23b4      	movs	r3, #180	; 0xb4
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	2b0f      	cmp	r3, #15
 80030d0:	d011      	beq.n	80030f6 <_filter_Start+0xfa>
 80030d2:	dc21      	bgt.n	8003118 <_filter_Start+0x11c>
 80030d4:	2b0e      	cmp	r3, #14
 80030d6:	d005      	beq.n	80030e4 <_filter_Start+0xe8>
 80030d8:	dc1e      	bgt.n	8003118 <_filter_Start+0x11c>
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d002      	beq.n	80030e4 <_filter_Start+0xe8>
 80030de:	2b0d      	cmp	r3, #13
 80030e0:	d009      	beq.n	80030f6 <_filter_Start+0xfa>
 80030e2:	e019      	b.n	8003118 <_filter_Start+0x11c>
	case Raw_Ranging_Algo_Underflow:
	case Ranging_Algo_Underflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 80030e4:	2394      	movs	r3, #148	; 0x94
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	2210      	movs	r2, #16
 80030ea:	801a      	strh	r2, [r3, #0]
		ValidDistance = 0;
 80030ec:	2392      	movs	r3, #146	; 0x92
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2200      	movs	r2, #0
 80030f2:	801a      	strh	r2, [r3, #0]
		break;
 80030f4:	e024      	b.n	8003140 <_filter_Start+0x144>
	case Raw_Ranging_Algo_Overflow:
	case Ranging_Algo_Overflow:
		filterErrorCodeOnRangingErrorCode = RangingFiltered; /* If we have to go through filter, mean we have here a wraparound case */
 80030f6:	2394      	movs	r3, #148	; 0x94
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	2210      	movs	r2, #16
 80030fc:	801a      	strh	r2, [r3, #0]
		//m_trueRange_mm = MaxOrInvalidDistance;
		m_trueRange_mm = 200*_GetUpscale(dev);
 80030fe:	4bac      	ldr	r3, [pc, #688]	; (80033b0 <_filter_Start+0x3b4>)
 8003100:	7c9b      	ldrb	r3, [r3, #18]
 8003102:	b29a      	uxth	r2, r3
 8003104:	230c      	movs	r3, #12
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	21c8      	movs	r1, #200	; 0xc8
 800310a:	434a      	muls	r2, r1
 800310c:	801a      	strh	r2, [r3, #0]
		ValidDistance = 1;
 800310e:	2392      	movs	r3, #146	; 0x92
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	2201      	movs	r2, #1
 8003114:	801a      	strh	r2, [r3, #0]
		break;
 8003116:	e013      	b.n	8003140 <_filter_Start+0x144>
	default:
		if (m_rawRange_mm >= MaxOrInvalidDistance) {
 8003118:	230a      	movs	r3, #10
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003120:	429a      	cmp	r2, r3
 8003122:	d808      	bhi.n	8003136 <_filter_Start+0x13a>
			ValidDistance = 0;
 8003124:	2392      	movs	r3, #146	; 0x92
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2200      	movs	r2, #0
 800312a:	801a      	strh	r2, [r3, #0]
			bypassFilter = 1; /* Bypass the filter in this case as produced distance is not usable (and also the VAVGVal and ZeroVal values) */
 800312c:	239a      	movs	r3, #154	; 0x9a
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2201      	movs	r2, #1
 8003132:	801a      	strh	r2, [r3, #0]
		} else {
			ValidDistance = 1;
		}
		break;
 8003134:	e003      	b.n	800313e <_filter_Start+0x142>
			ValidDistance = 1;
 8003136:	2392      	movs	r3, #146	; 0x92
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2201      	movs	r2, #1
 800313c:	801a      	strh	r2, [r3, #0]
		break;
 800313e:	46c0      	nop			; (mov r8, r8)
	}
	m_newTrueRange_mm = m_trueRange_mm;
 8003140:	239e      	movs	r3, #158	; 0x9e
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	220c      	movs	r2, #12
 8003146:	18ba      	adds	r2, r7, r2
 8003148:	8812      	ldrh	r2, [r2, #0]
 800314a:	801a      	strh	r2, [r3, #0]

	XTalkCompRate_KCps = VL6180DevDataGet(dev, XTalkCompRate_KCps);
 800314c:	4b98      	ldr	r3, [pc, #608]	; (80033b0 <_filter_Start+0x3b4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Update signal rate limits depending on crosstalk */
	SignalRateDMax = (uint32_t)_GetDMaxDataRetSignalAt400mm(dev) ;
 8003152:	4b97      	ldr	r3, [pc, #604]	; (80033b0 <_filter_Start+0x3b4>)
 8003154:	22b8      	movs	r2, #184	; 0xb8
 8003156:	589b      	ldr	r3, [r3, r2]
 8003158:	647b      	str	r3, [r7, #68]	; 0x44
	WrapAroundLowReturnRateLimit = WrapAroundLowReturnRateLimit_ROM  + XTalkCompRate_KCps;
 800315a:	4b96      	ldr	r3, [pc, #600]	; (80033b4 <_filter_Start+0x3b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003160:	18d3      	adds	r3, r2, r3
 8003162:	643b      	str	r3, [r7, #64]	; 0x40
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 8003164:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <_filter_Start+0x3bc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800316a:	4353      	muls	r3, r2
									SignalRateDMax) / 312) +
 800316c:	229c      	movs	r2, #156	; 0x9c
 800316e:	0051      	lsls	r1, r2, #1
 8003170:	0018      	movs	r0, r3
 8003172:	f7fc ffc9 	bl	8000108 <__udivsi3>
 8003176:	0003      	movs	r3, r0
 8003178:	001a      	movs	r2, r3
	WrapAroundLowReturnRateLimit2 = ((WrapAroundLowReturnRateLimit2_ROM *
 800317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317c:	189b      	adds	r3, r3, r2
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
									XTalkCompRate_KCps;
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8003180:	4b8e      	ldr	r3, [pc, #568]	; (80033bc <_filter_Start+0x3c0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003186:	4353      	muls	r3, r2
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 8003188:	229c      	movs	r2, #156	; 0x9c
 800318a:	0051      	lsls	r1, r2, #1
 800318c:	0018      	movs	r0, r3
 800318e:	f7fc ffbb 	bl	8000108 <__udivsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	001a      	movs	r2, r3
	WrapAroundLowReturnRateFilterLimit = ((WrapAroundLowReturnRateFilterLimit_ROM *
 8003196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003198:	189b      	adds	r3, r3, r2
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 800319c:	4b88      	ldr	r3, [pc, #544]	; (80033c0 <_filter_Start+0x3c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031a2:	4353      	muls	r3, r2
									SignalRateDMax) / 312) + XTalkCompRate_KCps;
 80031a4:	229c      	movs	r2, #156	; 0x9c
 80031a6:	0051      	lsls	r1, r2, #1
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fc ffad 	bl	8000108 <__udivsi3>
 80031ae:	0003      	movs	r3, r0
 80031b0:	001a      	movs	r2, r3
	WrapAroundHighReturnRateFilterLimit = ((WrapAroundHighReturnRateFilterLimit_ROM *
 80031b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b4:	189b      	adds	r3, r3, r2
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34


	/* Checks on low range data */
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit)) {
 80031b8:	4b82      	ldr	r3, [pc, #520]	; (80033c4 <_filter_Start+0x3c8>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	220a      	movs	r2, #10
 80031be:	18ba      	adds	r2, r7, r2
 80031c0:	8812      	ldrh	r2, [r2, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d20b      	bcs.n	80031de <_filter_Start+0x1e2>
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d207      	bcs.n	80031de <_filter_Start+0x1e2>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 80031ce:	2396      	movs	r3, #150	; 0x96
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2210      	movs	r2, #16
 80031d4:	801a      	strh	r2, [r3, #0]
		bypassFilter = 1;
 80031d6:	239a      	movs	r3, #154	; 0x9a
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2201      	movs	r2, #1
 80031dc:	801a      	strh	r2, [r3, #0]
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < WrapAroundLowReturnRateLimit2)) {
 80031de:	4b7a      	ldr	r3, [pc, #488]	; (80033c8 <_filter_Start+0x3cc>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	220a      	movs	r2, #10
 80031e4:	18ba      	adds	r2, r7, r2
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d20b      	bcs.n	8003204 <_filter_Start+0x208>
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d207      	bcs.n	8003204 <_filter_Start+0x208>
		filterErrorCode = RangingFiltered; /* On this condition, wraparound case is ensured */
 80031f4:	2396      	movs	r3, #150	; 0x96
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2210      	movs	r2, #16
 80031fa:	801a      	strh	r2, [r3, #0]
		bypassFilter = 1;
 80031fc:	239a      	movs	r3, #154	; 0x9a
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2201      	movs	r2, #1
 8003202:	801a      	strh	r2, [r3, #0]
	}
	if ((m_rawRange_mm < WrapAroundLowRawRangeLimit2) && (m_rtnSignalRate < (WrapAroundLowReturnRateLimit2 + WrapAroundLowRawRangeLimit2SuspicuousAddedSignalRate))) {
 8003204:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <_filter_Start+0x3cc>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	220a      	movs	r2, #10
 800320a:	18ba      	adds	r2, r7, r2
 800320c:	8812      	ldrh	r2, [r2, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d20a      	bcs.n	8003228 <_filter_Start+0x22c>
 8003212:	4b6e      	ldr	r3, [pc, #440]	; (80033cc <_filter_Start+0x3d0>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003218:	18d3      	adds	r3, r2, r3
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d203      	bcs.n	8003228 <_filter_Start+0x22c>
		SuspicuousRangingZone = 1; /* On this area, we are in an highly suspicuous wraparound ares, filter parameter will be stengthen */
 8003220:	2390      	movs	r3, #144	; 0x90
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2201      	movs	r2, #1
 8003226:	801a      	strh	r2, [r3, #0]
	}


	/* Checks on Ambient rate level */
	if (m_rtnAmbientRate > WrapAroundMaximumAmbientRateFilterLimit) {
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <_filter_Start+0x3d4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	22b0      	movs	r2, #176	; 0xb0
 800322e:	18ba      	adds	r2, r7, r2
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d907      	bls.n	8003246 <_filter_Start+0x24a>
		/* Too high ambient rate */
		FlushFilter = 1;
 8003236:	2388      	movs	r3, #136	; 0x88
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2201      	movs	r2, #1
 800323c:	801a      	strh	r2, [r3, #0]
		bypassFilter = 1;
 800323e:	239a      	movs	r3, #154	; 0x9a
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2201      	movs	r2, #1
 8003244:	801a      	strh	r2, [r3, #0]
	}
    
	/*  Checks on Filter flush */
	if (m_rtnSignalRate < MinReturnRateFilterFlush) {
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <_filter_Start+0x3d8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d207      	bcs.n	8003260 <_filter_Start+0x264>
		/* Completely lost target, so flush the filter */
		FlushFilter = 1;
 8003250:	2388      	movs	r3, #136	; 0x88
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2201      	movs	r2, #1
 8003256:	801a      	strh	r2, [r3, #0]
		bypassFilter = 1;
 8003258:	239a      	movs	r3, #154	; 0x9a
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2201      	movs	r2, #1
 800325e:	801a      	strh	r2, [r3, #0]
	}
	if (_FilterData(LastReturnRates)[0] != 0) {
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <_filter_Start+0x3b4>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	2b00      	cmp	r3, #0
 8003266:	d026      	beq.n	80032b6 <_filter_Start+0x2ba>
		if (m_rtnSignalRate > _FilterData(LastReturnRates)[0])
 8003268:	4b51      	ldr	r3, [pc, #324]	; (80033b0 <_filter_Start+0x3b4>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d910      	bls.n	8003294 <_filter_Start+0x298>
			RateChange = (100 *
						(m_rtnSignalRate - _FilterData(LastReturnRates)[0])) /
 8003272:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <_filter_Start+0x3b4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 800327a:	2264      	movs	r2, #100	; 0x64
 800327c:	435a      	muls	r2, r3
						_FilterData(LastReturnRates)[0];
 800327e:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <_filter_Start+0x3b4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			RateChange = (100 *
 8003282:	0019      	movs	r1, r3
 8003284:	0010      	movs	r0, r2
 8003286:	f7fc ff3f 	bl	8000108 <__udivsi3>
 800328a:	0003      	movs	r3, r0
 800328c:	2284      	movs	r2, #132	; 0x84
 800328e:	18ba      	adds	r2, r7, r2
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e014      	b.n	80032be <_filter_Start+0x2c2>
		else
			RateChange = (100 *
						(_FilterData(LastReturnRates)[0] - m_rtnSignalRate)) /
 8003294:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <_filter_Start+0x3b4>)
 8003296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1ad3      	subs	r3, r2, r3
			RateChange = (100 *
 800329c:	2264      	movs	r2, #100	; 0x64
 800329e:	435a      	muls	r2, r3
						_FilterData(LastReturnRates)[0];
 80032a0:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <_filter_Start+0x3b4>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			RateChange = (100 *
 80032a4:	0019      	movs	r1, r3
 80032a6:	0010      	movs	r0, r2
 80032a8:	f7fc ff2e 	bl	8000108 <__udivsi3>
 80032ac:	0003      	movs	r3, r0
 80032ae:	2284      	movs	r2, #132	; 0x84
 80032b0:	18ba      	adds	r2, r7, r2
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e003      	b.n	80032be <_filter_Start+0x2c2>
	} else
		RateChange = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	2284      	movs	r2, #132	; 0x84
 80032ba:	18ba      	adds	r2, r7, r2
 80032bc:	6013      	str	r3, [r2, #0]
	if (RateChange > MaxReturnRateChangeFilterFlush) {
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <_filter_Start+0x3dc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2284      	movs	r2, #132	; 0x84
 80032c4:	18ba      	adds	r2, r7, r2
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d903      	bls.n	80032d4 <_filter_Start+0x2d8>
		FlushFilter = 1;
 80032cc:	2388      	movs	r3, #136	; 0x88
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	2201      	movs	r2, #1
 80032d2:	801a      	strh	r2, [r3, #0]
	}
	/* TODO optimize filter  using circular buffer */
	if (FlushFilter == 1) {
 80032d4:	2388      	movs	r3, #136	; 0x88
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d129      	bne.n	8003332 <_filter_Start+0x336>
		_FilterData(MeasurementIndex) = 0;
 80032de:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <_filter_Start+0x3b4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 80032e4:	239c      	movs	r3, #156	; 0x9c
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2200      	movs	r2, #0
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	e018      	b.n	8003320 <_filter_Start+0x324>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 80032ee:	219c      	movs	r1, #156	; 0x9c
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	4a2e      	ldr	r2, [pc, #184]	; (80033b0 <_filter_Start+0x3b4>)
 80032f6:	330c      	adds	r3, #12
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	18d3      	adds	r3, r2, r3
 80032fc:	3304      	adds	r3, #4
 80032fe:	2201      	movs	r2, #1
 8003300:	4252      	negs	r2, r2
 8003302:	801a      	strh	r2, [r3, #0]
			_FilterData(LastReturnRates)[i] = 0;
 8003304:	187b      	adds	r3, r7, r1
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4a29      	ldr	r2, [pc, #164]	; (80033b0 <_filter_Start+0x3b4>)
 800330a:	330a      	adds	r3, #10
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	18d3      	adds	r3, r2, r3
 8003310:	3308      	adds	r3, #8
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
		for (i = 0; i < FILTER_NBOF_SAMPLES; i++) {
 8003316:	187b      	adds	r3, r7, r1
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	187b      	adds	r3, r7, r1
 800331c:	3201      	adds	r2, #1
 800331e:	801a      	strh	r2, [r3, #0]
 8003320:	239c      	movs	r3, #156	; 0x9c
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	2b09      	cmp	r3, #9
 8003328:	d9e1      	bls.n	80032ee <_filter_Start+0x2f2>
		}
		_FilterData(MeasurementsSinceLastFlush)=0;
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <_filter_Start+0x3b4>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
 8003330:	e033      	b.n	800339a <_filter_Start+0x39e>
	} else {
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8003332:	239c      	movs	r3, #156	; 0x9c
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2209      	movs	r2, #9
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e029      	b.n	8003390 <_filter_Start+0x394>
			_FilterData(LastTrueRange)[i] = _FilterData(LastTrueRange)[i - 1];
 800333c:	249c      	movs	r4, #156	; 0x9c
 800333e:	193b      	adds	r3, r7, r4
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	1e5a      	subs	r2, r3, #1
 8003344:	193b      	adds	r3, r7, r4
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	4919      	ldr	r1, [pc, #100]	; (80033b0 <_filter_Start+0x3b4>)
 800334a:	320c      	adds	r2, #12
 800334c:	0052      	lsls	r2, r2, #1
 800334e:	188a      	adds	r2, r1, r2
 8003350:	3204      	adds	r2, #4
 8003352:	8811      	ldrh	r1, [r2, #0]
 8003354:	4a16      	ldr	r2, [pc, #88]	; (80033b0 <_filter_Start+0x3b4>)
 8003356:	330c      	adds	r3, #12
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	18d3      	adds	r3, r2, r3
 800335c:	3304      	adds	r3, #4
 800335e:	1c0a      	adds	r2, r1, #0
 8003360:	801a      	strh	r2, [r3, #0]
			_FilterData(LastReturnRates)[i] = _FilterData(LastReturnRates)[i - 1];
 8003362:	193b      	adds	r3, r7, r4
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	3b01      	subs	r3, #1
 8003368:	193a      	adds	r2, r7, r4
 800336a:	8810      	ldrh	r0, [r2, #0]
 800336c:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <_filter_Start+0x3b4>)
 800336e:	330a      	adds	r3, #10
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	18d3      	adds	r3, r2, r3
 8003374:	3308      	adds	r3, #8
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	490d      	ldr	r1, [pc, #52]	; (80033b0 <_filter_Start+0x3b4>)
 800337a:	0003      	movs	r3, r0
 800337c:	330a      	adds	r3, #10
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	18cb      	adds	r3, r1, r3
 8003382:	3308      	adds	r3, #8
 8003384:	601a      	str	r2, [r3, #0]
		for (i = (uint16_t) (FILTER_NBOF_SAMPLES - 1); i > 0; i--) {
 8003386:	193b      	adds	r3, r7, r4
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	193b      	adds	r3, r7, r4
 800338c:	3a01      	subs	r2, #1
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	239c      	movs	r3, #156	; 0x9c
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1d0      	bne.n	800333c <_filter_Start+0x340>
		}
	}

	if (ValidDistance == 1)
 800339a:	2392      	movs	r3, #146	; 0x92
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d11b      	bne.n	80033dc <_filter_Start+0x3e0>
		_FilterData(LastTrueRange)[0] = m_trueRange_mm;
 80033a4:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <_filter_Start+0x3b4>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	18ba      	adds	r2, r7, r2
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	839a      	strh	r2, [r3, #28]
 80033ae:	e019      	b.n	80033e4 <_filter_Start+0x3e8>
 80033b0:	2000000c 	.word	0x2000000c
 80033b4:	080079d0 	.word	0x080079d0
 80033b8:	080079d4 	.word	0x080079d4
 80033bc:	080079d8 	.word	0x080079d8
 80033c0:	080079dc 	.word	0x080079dc
 80033c4:	080079e0 	.word	0x080079e0
 80033c8:	080079e2 	.word	0x080079e2
 80033cc:	080079e4 	.word	0x080079e4
 80033d0:	080079e8 	.word	0x080079e8
 80033d4:	080079ec 	.word	0x080079ec
 80033d8:	080079f0 	.word	0x080079f0
	else
		_FilterData(LastTrueRange)[0] = FILTER_INVALID_DISTANCE;
 80033dc:	4bcb      	ldr	r3, [pc, #812]	; (800370c <_filter_Start+0x710>)
 80033de:	2201      	movs	r2, #1
 80033e0:	4252      	negs	r2, r2
 80033e2:	839a      	strh	r2, [r3, #28]
	_FilterData(LastReturnRates)[0] = m_rtnSignalRate;
 80033e4:	4bc9      	ldr	r3, [pc, #804]	; (800370c <_filter_Start+0x710>)
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
	_FilterData(MeasurementsSinceLastFlush)++;
 80033ea:	4bc8      	ldr	r3, [pc, #800]	; (800370c <_filter_Start+0x710>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	4bc6      	ldr	r3, [pc, #792]	; (800370c <_filter_Start+0x710>)
 80033f2:	619a      	str	r2, [r3, #24]

	/* Check if we need to go through the filter or not */
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 80033f4:	4bc6      	ldr	r3, [pc, #792]	; (8003710 <_filter_Start+0x714>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	220a      	movs	r2, #10
 80033fa:	18ba      	adds	r2, r7, r2
 80033fc:	8812      	ldrh	r2, [r2, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d203      	bcs.n	800340a <_filter_Start+0x40e>
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	429a      	cmp	r2, r3
 8003408:	d30f      	bcc.n	800342a <_filter_Start+0x42e>
		(m_rtnSignalRate < WrapAroundLowReturnRateFilterLimit)) ||
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 800340a:	4bc1      	ldr	r3, [pc, #772]	; (8003710 <_filter_Start+0x714>)
 800340c:	881b      	ldrh	r3, [r3, #0]
	if (!(((m_rawRange_mm < WrapAroundHighRawRangeFilterLimit) &&
 800340e:	220a      	movs	r2, #10
 8003410:	18ba      	adds	r2, r7, r2
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d303      	bcc.n	8003420 <_filter_Start+0x424>
		((m_rawRange_mm >= WrapAroundHighRawRangeFilterLimit) &&
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	429a      	cmp	r2, r3
 800341e:	d304      	bcc.n	800342a <_filter_Start+0x42e>
		(m_rtnSignalRate < WrapAroundHighReturnRateFilterLimit))))
		bypassFilter = 1;
 8003420:	239a      	movs	r3, #154	; 0x9a
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2201      	movs	r2, #1
 8003426:	801a      	strh	r2, [r3, #0]
 8003428:	e01b      	b.n	8003462 <_filter_Start+0x466>
	else {
		/* if some wraparound filtering due to some ranging error code has been detected, update the filter status and bypass the filter */
		if(filterErrorCodeOnRangingErrorCode!=NoError){
 800342a:	2394      	movs	r3, #148	; 0x94
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d016      	beq.n	8003462 <_filter_Start+0x466>
#ifndef PRESERVE_DEVICE_ERROR_CODE
			filterErrorCode = filterErrorCodeOnRangingErrorCode;
#else
			if((errorCode==Raw_Ranging_Algo_Underflow) || (errorCode==Ranging_Algo_Underflow)) {
 8003434:	22b4      	movs	r2, #180	; 0xb4
 8003436:	18bb      	adds	r3, r7, r2
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d003      	beq.n	8003446 <_filter_Start+0x44a>
 800343e:	18bb      	adds	r3, r7, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	2b0e      	cmp	r3, #14
 8003444:	d105      	bne.n	8003452 <_filter_Start+0x456>
				/* Preserves the error codes except for Raw_Ranging_Algo_Underflow and Ranging_Algo_Underflow */
				filterErrorCode = filterErrorCodeOnRangingErrorCode;
 8003446:	2396      	movs	r3, #150	; 0x96
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2294      	movs	r2, #148	; 0x94
 800344c:	18ba      	adds	r2, r7, r2
 800344e:	8812      	ldrh	r2, [r2, #0]
 8003450:	801a      	strh	r2, [r3, #0]
			}
#endif
			bypassFilter = 1;
 8003452:	239a      	movs	r3, #154	; 0x9a
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	2201      	movs	r2, #1
 8003458:	801a      	strh	r2, [r3, #0]
			resetVAVGData = 0;
 800345a:	2398      	movs	r3, #152	; 0x98
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	2200      	movs	r2, #0
 8003460:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Check which kind of measurement has been made */
	status = VL6180_RdByte(dev, 0x01AC, &u8);
 8003462:	2417      	movs	r4, #23
 8003464:	193a      	adds	r2, r7, r4
 8003466:	23d6      	movs	r3, #214	; 0xd6
 8003468:	0059      	lsls	r1, r3, #1
 800346a:	250f      	movs	r5, #15
 800346c:	197b      	adds	r3, r7, r5
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 ff13 	bl	800429c <VL6180_RdByte>
 8003476:	0003      	movs	r3, r0
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
	if (status) {
 800347a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347c:	2b00      	cmp	r3, #0
 800347e:	d000      	beq.n	8003482 <_filter_Start+0x486>
 8003480:	e338      	b.n	8003af4 <_filter_Start+0xaf8>
		VL6180_ErrLog("0x01AC rd fail");
		goto done_err;
	}
	registerValue = u8;
 8003482:	193b      	adds	r3, r7, r4
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	232e      	movs	r3, #46	; 0x2e
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	801a      	strh	r2, [r3, #0]

	/* Read data for filtering */
#if VL6180_HAVE_MULTI_READ
	status = VL6180_RdMulti(dev, 0x10C, MultiReadBuf, 8); /* read only 8 lsb bits */
 800348c:	2418      	movs	r4, #24
 800348e:	193a      	adds	r2, r7, r4
 8003490:	2386      	movs	r3, #134	; 0x86
 8003492:	0059      	lsls	r1, r3, #1
 8003494:	197b      	adds	r3, r7, r5
 8003496:	7818      	ldrb	r0, [r3, #0]
 8003498:	2308      	movs	r3, #8
 800349a:	f000 ffc8 	bl	800442e <VL6180_RdMulti>
 800349e:	0003      	movs	r3, r0
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
	if (status) {
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d000      	beq.n	80034aa <_filter_Start+0x4ae>
 80034a8:	e326      	b.n	8003af8 <_filter_Start+0xafc>
		VL6180_ErrLog("0x10C multi rd fail");
		goto done_err;
	}
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 80034aa:	0021      	movs	r1, r4
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[1] << 16)
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	18d2      	adds	r2, r2, r3
			+ ((uint32_t) MultiReadBuf[2] << 8)
 80034ba:	187b      	adds	r3, r7, r1
 80034bc:	789b      	ldrb	r3, [r3, #2]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	18d3      	adds	r3, r2, r3
			+ ((uint32_t) MultiReadBuf[3] << 0);
 80034c2:	187a      	adds	r2, r7, r1
 80034c4:	78d2      	ldrb	r2, [r2, #3]
	register32BitsValue1 = ((uint32_t) MultiReadBuf[0] << 24)
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 80034ca:	187b      	adds	r3, r7, r1
 80034cc:	791b      	ldrb	r3, [r3, #4]
 80034ce:	061a      	lsls	r2, r3, #24
			+ ((uint32_t) MultiReadBuf[5] << 16)
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	795b      	ldrb	r3, [r3, #5]
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	18d2      	adds	r2, r2, r3
			+ ((uint32_t) MultiReadBuf[6] << 8)
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	799b      	ldrb	r3, [r3, #6]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	18d3      	adds	r3, r2, r3
			+ ((uint32_t) MultiReadBuf[7] << 0);
 80034e0:	187a      	adds	r2, r7, r1
 80034e2:	79d2      	ldrb	r2, [r2, #7]
	register32BitsValue2 = ((uint32_t) MultiReadBuf[4] << 24)
 80034e4:	189b      	adds	r3, r3, r2
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
		goto done_err;
	}
#endif


	if ((FlushFilter == 1) || ((bypassFilter == 1) && (resetVAVGData == 1))) {
 80034e8:	2388      	movs	r3, #136	; 0x88
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d009      	beq.n	8003506 <_filter_Start+0x50a>
 80034f2:	239a      	movs	r3, #154	; 0x9a
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d128      	bne.n	800354e <_filter_Start+0x552>
 80034fc:	2398      	movs	r3, #152	; 0x98
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d123      	bne.n	800354e <_filter_Start+0x552>
		if (registerValue != 0x3E) {
 8003506:	232e      	movs	r3, #46	; 0x2e
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	2b3e      	cmp	r3, #62	; 0x3e
 800350e:	d00e      	beq.n	800352e <_filter_Start+0x532>
			status = VL6180_WrByte(dev, 0x1AC, 0x3E);
 8003510:	23d6      	movs	r3, #214	; 0xd6
 8003512:	0059      	lsls	r1, r3, #1
 8003514:	230f      	movs	r3, #15
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	223e      	movs	r2, #62	; 0x3e
 800351c:	0018      	movs	r0, r3
 800351e:	f000 fdb9 	bl	8004094 <VL6180_WrByte>
 8003522:	0003      	movs	r3, r0
 8003524:	633b      	str	r3, [r7, #48]	; 0x30
			if (status) {
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	2b00      	cmp	r3, #0
 800352a:	d000      	beq.n	800352e <_filter_Start+0x532>
 800352c:	e2e6      	b.n	8003afc <_filter_Start+0xb00>
			//	VL6180_ErrLog("0x0F2 bypass wr fail");
			//	goto done_err;
			//}
		}
		/* Set both Default and NoDelay To same value */
		_FilterData(Default_ZeroVal) = register32BitsValue1;
 800352e:	4b77      	ldr	r3, [pc, #476]	; (800370c <_filter_Start+0x710>)
 8003530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003532:	65da      	str	r2, [r3, #92]	; 0x5c
		_FilterData(Default_VAVGVal) = register32BitsValue2;
 8003534:	4b75      	ldr	r3, [pc, #468]	; (800370c <_filter_Start+0x710>)
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	661a      	str	r2, [r3, #96]	; 0x60
		_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 800353a:	4b74      	ldr	r3, [pc, #464]	; (800370c <_filter_Start+0x710>)
 800353c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353e:	665a      	str	r2, [r3, #100]	; 0x64
		_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 8003540:	4b72      	ldr	r3, [pc, #456]	; (800370c <_filter_Start+0x710>)
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	669a      	str	r2, [r3, #104]	; 0x68

		_FilterData(MeasurementIndex) = 0;
 8003546:	4b71      	ldr	r3, [pc, #452]	; (800370c <_filter_Start+0x710>)
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
 800354c:	e03a      	b.n	80035c4 <_filter_Start+0x5c8>
	} else {
		if (registerValue == 0x3E) {
 800354e:	232e      	movs	r3, #46	; 0x2e
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	2b3e      	cmp	r3, #62	; 0x3e
 8003556:	d106      	bne.n	8003566 <_filter_Start+0x56a>
			_FilterData(Default_ZeroVal) = register32BitsValue1;
 8003558:	4b6c      	ldr	r3, [pc, #432]	; (800370c <_filter_Start+0x710>)
 800355a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355c:	65da      	str	r2, [r3, #92]	; 0x5c
			_FilterData(Default_VAVGVal) = register32BitsValue2;
 800355e:	4b6b      	ldr	r3, [pc, #428]	; (800370c <_filter_Start+0x710>)
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	661a      	str	r2, [r3, #96]	; 0x60
 8003564:	e005      	b.n	8003572 <_filter_Start+0x576>
		} else {
			_FilterData(NoDelay_ZeroVal) = register32BitsValue1;
 8003566:	4b69      	ldr	r3, [pc, #420]	; (800370c <_filter_Start+0x710>)
 8003568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356a:	665a      	str	r2, [r3, #100]	; 0x64
			_FilterData(NoDelay_VAVGVal) = register32BitsValue2;
 800356c:	4b67      	ldr	r3, [pc, #412]	; (800370c <_filter_Start+0x710>)
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	669a      	str	r2, [r3, #104]	; 0x68
		}

		if (_FilterData(MeasurementIndex) % WrapAroundNoDelayCheckPeriod == 0) {
 8003572:	4b66      	ldr	r3, [pc, #408]	; (800370c <_filter_Start+0x710>)
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	4b67      	ldr	r3, [pc, #412]	; (8003714 <_filter_Start+0x718>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	0019      	movs	r1, r3
 800357c:	0010      	movs	r0, r2
 800357e:	f7fc fe49 	bl	8000214 <__aeabi_uidivmod>
 8003582:	1e0b      	subs	r3, r1, #0
 8003584:	d104      	bne.n	8003590 <_filter_Start+0x594>
			u8 = 0x3C;
 8003586:	2317      	movs	r3, #23
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	223c      	movs	r2, #60	; 0x3c
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e003      	b.n	8003598 <_filter_Start+0x59c>
			//u8_2 = 0x05;
		} else {
			u8 = 0x3E;
 8003590:	2317      	movs	r3, #23
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	223e      	movs	r2, #62	; 0x3e
 8003596:	701a      	strb	r2, [r3, #0]
			//u8_2 = 0x01;
		}
		status = VL6180_WrByte(dev, 0x01AC, u8);
 8003598:	2317      	movs	r3, #23
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	23d6      	movs	r3, #214	; 0xd6
 80035a0:	0059      	lsls	r1, r3, #1
 80035a2:	230f      	movs	r3, #15
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	0018      	movs	r0, r3
 80035aa:	f000 fd73 	bl	8004094 <VL6180_WrByte>
 80035ae:	0003      	movs	r3, r0
 80035b0:	633b      	str	r3, [r7, #48]	; 0x30
		if (status) {
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d000      	beq.n	80035ba <_filter_Start+0x5be>
 80035b8:	e2a2      	b.n	8003b00 <_filter_Start+0xb04>
		//status = VL6180_WrByte(dev, 0x0F2, u8_2);
		//if (status) {
		//	VL6180_ErrLog("0x0F2  wr fail");
		//	goto done_err;
		//}
		_FilterData(MeasurementIndex)++;
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <_filter_Start+0x710>)
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	4b52      	ldr	r3, [pc, #328]	; (800370c <_filter_Start+0x710>)
 80035c2:	615a      	str	r2, [r3, #20]
	}

	if (bypassFilter == 1) {
 80035c4:	239a      	movs	r3, #154	; 0x9a
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d110      	bne.n	80035f0 <_filter_Start+0x5f4>
		/* Do not go through the filter */

		/* Update filter error code */
		_FilterData(filterError) = filterErrorCode;
 80035ce:	2196      	movs	r1, #150	; 0x96
 80035d0:	187b      	adds	r3, r7, r1
 80035d2:	881a      	ldrh	r2, [r3, #0]
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <_filter_Start+0x710>)
 80035d6:	675a      	str	r2, [r3, #116]	; 0x74

		/* Update reported range */
		if(filterErrorCode==RangingFiltered)
 80035d8:	187b      	adds	r3, r7, r1
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d103      	bne.n	80035e8 <_filter_Start+0x5ec>
			m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 80035e0:	239e      	movs	r3, #158	; 0x9e
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035e6:	801a      	strh	r2, [r3, #0]

		return m_newTrueRange_mm;
 80035e8:	239e      	movs	r3, #158	; 0x9e
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	e28a      	b.n	8003b06 <_filter_Start+0xb0a>
	}

	/* Computes current VAVGDiff */
	if (_FilterData(Default_VAVGVal) > _FilterData(NoDelay_VAVGVal))
 80035f0:	4b46      	ldr	r3, [pc, #280]	; (800370c <_filter_Start+0x710>)
 80035f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035f4:	4b45      	ldr	r3, [pc, #276]	; (800370c <_filter_Start+0x710>)
 80035f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d906      	bls.n	800360a <_filter_Start+0x60e>
		VAVGDiff = _FilterData(Default_VAVGVal) - _FilterData(NoDelay_VAVGVal);
 80035fc:	4b43      	ldr	r3, [pc, #268]	; (800370c <_filter_Start+0x710>)
 80035fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003600:	4b42      	ldr	r3, [pc, #264]	; (800370c <_filter_Start+0x710>)
 8003602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	663b      	str	r3, [r7, #96]	; 0x60
 8003608:	e001      	b.n	800360e <_filter_Start+0x612>
	else
		VAVGDiff = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	663b      	str	r3, [r7, #96]	; 0x60
	_FilterData(Previous_VAVGDiff) = VAVGDiff;
 800360e:	4b3f      	ldr	r3, [pc, #252]	; (800370c <_filter_Start+0x710>)
 8003610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003612:	66da      	str	r2, [r3, #108]	; 0x6c

	if(SuspicuousRangingZone==0)
 8003614:	2390      	movs	r3, #144	; 0x90
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <_filter_Start+0x62a>
		MAX_VAVGDiff = MAX_VAVGDiff_ROM;
 800361e:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <_filter_Start+0x71c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	657b      	str	r3, [r7, #84]	; 0x54
 8003624:	e009      	b.n	800363a <_filter_Start+0x63e>
	else
		/* In suspicuous area, strengthen the filter */
		MAX_VAVGDiff = MAX_VAVGDiff_ROM / SuspicuousMAX_VAVGDiffRatio;
 8003626:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <_filter_Start+0x71c>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b3c      	ldr	r3, [pc, #240]	; (800371c <_filter_Start+0x720>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0019      	movs	r1, r3
 8003630:	0010      	movs	r0, r2
 8003632:	f7fc fd69 	bl	8000108 <__udivsi3>
 8003636:	0003      	movs	r3, r0
 8003638:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check the VAVGDiff */
	if (_FilterData(Default_ZeroVal) > _FilterData(NoDelay_ZeroVal))
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <_filter_Start+0x710>)
 800363c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800363e:	4b33      	ldr	r3, [pc, #204]	; (800370c <_filter_Start+0x710>)
 8003640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003642:	429a      	cmp	r2, r3
 8003644:	d906      	bls.n	8003654 <_filter_Start+0x658>
		IdealVAVGDiff = _FilterData(Default_ZeroVal) - _FilterData(NoDelay_ZeroVal);
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <_filter_Start+0x710>)
 8003648:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800364a:	4b30      	ldr	r3, [pc, #192]	; (800370c <_filter_Start+0x710>)
 800364c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003652:	e005      	b.n	8003660 <_filter_Start+0x664>
	else
		IdealVAVGDiff = _FilterData(NoDelay_ZeroVal) - _FilterData(Default_ZeroVal);
 8003654:	4b2d      	ldr	r3, [pc, #180]	; (800370c <_filter_Start+0x710>)
 8003656:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <_filter_Start+0x710>)
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (IdealVAVGDiff > MAX_VAVGDiff)
 8003660:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003664:	429a      	cmp	r2, r3
 8003666:	d904      	bls.n	8003672 <_filter_Start+0x676>
		MinVAVGDiff = IdealVAVGDiff - MAX_VAVGDiff;
 8003668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003670:	e001      	b.n	8003676 <_filter_Start+0x67a>
	else
		MinVAVGDiff = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	65bb      	str	r3, [r7, #88]	; 0x58
	MaxVAVGDiff = IdealVAVGDiff + MAX_VAVGDiff;
 8003676:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367a:	18d3      	adds	r3, r2, r3
 800367c:	623b      	str	r3, [r7, #32]
	if (VAVGDiff < MinVAVGDiff || VAVGDiff > MaxVAVGDiff) {
 800367e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003682:	429a      	cmp	r2, r3
 8003684:	d303      	bcc.n	800368e <_filter_Start+0x692>
 8003686:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	429a      	cmp	r2, r3
 800368c:	d908      	bls.n	80036a0 <_filter_Start+0x6a4>
		WrapAroundFlag = 1;
 800368e:	238e      	movs	r3, #142	; 0x8e
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2201      	movs	r2, #1
 8003694:	801a      	strh	r2, [r3, #0]
		filterErrorCode = RangingFiltered;
 8003696:	2396      	movs	r3, #150	; 0x96
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2210      	movs	r2, #16
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	e17a      	b.n	8003996 <_filter_Start+0x99a>
	} else {
		/* Go through filtering check */

		if(_FilterData(MeasurementIndex)<=1)
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <_filter_Start+0x710>)
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d804      	bhi.n	80036b2 <_filter_Start+0x6b6>
			/* On measurement after a bypass, uses an increase number of samples */
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES_AFTER_FLUSH_OR_BYPASS;
 80036a8:	2382      	movs	r3, #130	; 0x82
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2205      	movs	r2, #5
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	e003      	b.n	80036ba <_filter_Start+0x6be>
		else
			StdDevSamplesMinNeeded = MIN_FILTER_STDDEV_SAMPLES;
 80036b2:	2382      	movs	r3, #130	; 0x82
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	2203      	movs	r2, #3
 80036b8:	801a      	strh	r2, [r3, #0]

		/* StdDevLimit Damper on SNR */
		StdDevLimit = _filter_StdDevDamper(m_rtnAmbientRate, m_rtnSignalRate, StdDevLimitLowLight, StdDevLimitLowLightSNR, StdDevLimitHighLight, StdDevLimitHighLightSNR);
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <_filter_Start+0x724>)
 80036bc:	681c      	ldr	r4, [r3, #0]
 80036be:	4b19      	ldr	r3, [pc, #100]	; (8003724 <_filter_Start+0x728>)
 80036c0:	681d      	ldr	r5, [r3, #0]
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <_filter_Start+0x72c>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <_filter_Start+0x730>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	20b0      	movs	r0, #176	; 0xb0
 80036ce:	1838      	adds	r0, r7, r0
 80036d0:	6800      	ldr	r0, [r0, #0]
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	9200      	str	r2, [sp, #0]
 80036d6:	002b      	movs	r3, r5
 80036d8:	0022      	movs	r2, r4
 80036da:	f7ff fc45 	bl	8002f68 <_filter_StdDevDamper>
 80036de:	0003      	movs	r3, r0
 80036e0:	653b      	str	r3, [r7, #80]	; 0x50

		/* Standard deviations computations */
		StdDevSamples = 0;
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	2200      	movs	r2, #0
 80036e8:	801a      	strh	r2, [r3, #0]
		StdDevDistanceSum = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevDistanceMean = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	67bb      	str	r3, [r7, #120]	; 0x78
		StdDevDistance = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	677b      	str	r3, [r7, #116]	; 0x74
		StdDevRateSum = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	673b      	str	r3, [r7, #112]	; 0x70
		StdDevRateMean = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	66fb      	str	r3, [r7, #108]	; 0x6c
		StdDevRate = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8003702:	239c      	movs	r3, #156	; 0x9c
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	2200      	movs	r2, #0
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e040      	b.n	800378e <_filter_Start+0x792>
 800370c:	2000000c 	.word	0x2000000c
 8003710:	080079f4 	.word	0x080079f4
 8003714:	080079f6 	.word	0x080079f6
 8003718:	080079f8 	.word	0x080079f8
 800371c:	080079fc 	.word	0x080079fc
 8003720:	08007a00 	.word	0x08007a00
 8003724:	08007a04 	.word	0x08007a04
 8003728:	08007a08 	.word	0x08007a08
 800372c:	08007a0c 	.word	0x08007a0c
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 8003730:	219c      	movs	r1, #156	; 0x9c
 8003732:	187b      	adds	r3, r7, r1
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	4ac2      	ldr	r2, [pc, #776]	; (8003a40 <_filter_Start+0xa44>)
 8003738:	330c      	adds	r3, #12
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	18d3      	adds	r3, r2, r3
 800373e:	3304      	adds	r3, #4
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	4ac0      	ldr	r2, [pc, #768]	; (8003a44 <_filter_Start+0xa48>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d01c      	beq.n	8003782 <_filter_Start+0x786>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	18bb      	adds	r3, r7, r2
 800374c:	18ba      	adds	r2, r7, r2
 800374e:	8812      	ldrh	r2, [r2, #0]
 8003750:	3201      	adds	r2, #1
 8003752:	801a      	strh	r2, [r3, #0]
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum + _FilterData(LastTrueRange)[i]);
 8003754:	187b      	adds	r3, r7, r1
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	4ab9      	ldr	r2, [pc, #740]	; (8003a40 <_filter_Start+0xa44>)
 800375a:	330c      	adds	r3, #12
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	18d3      	adds	r3, r2, r3
 8003760:	3304      	adds	r3, #4
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	001a      	movs	r2, r3
 8003766:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003768:	189b      	adds	r3, r3, r2
 800376a:	67fb      	str	r3, [r7, #124]	; 0x7c
				StdDevRateSum = (uint32_t) (StdDevRateSum + _FilterData(LastReturnRates)[i]);
 800376c:	187b      	adds	r3, r7, r1
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	4ab3      	ldr	r2, [pc, #716]	; (8003a40 <_filter_Start+0xa44>)
 8003772:	330a      	adds	r3, #10
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	18d3      	adds	r3, r2, r3
 8003778:	3308      	adds	r3, #8
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800377e:	18d3      	adds	r3, r2, r3
 8003780:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8003782:	219c      	movs	r1, #156	; 0x9c
 8003784:	187b      	adds	r3, r7, r1
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	187b      	adds	r3, r7, r1
 800378a:	3201      	adds	r2, #1
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	239c      	movs	r3, #156	; 0x9c
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	2b09      	cmp	r3, #9
 8003796:	d804      	bhi.n	80037a2 <_filter_Start+0x7a6>
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d9c6      	bls.n	8003730 <_filter_Start+0x734>
			}
		}
		if (StdDevSamples > 0) {
 80037a2:	2480      	movs	r4, #128	; 0x80
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00f      	beq.n	80037cc <_filter_Start+0x7d0>
			StdDevDistanceMean = (uint32_t) (StdDevDistanceSum / StdDevSamples);
 80037ac:	193b      	adds	r3, r7, r4
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	0019      	movs	r1, r3
 80037b2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80037b4:	f7fc fca8 	bl	8000108 <__udivsi3>
 80037b8:	0003      	movs	r3, r0
 80037ba:	67bb      	str	r3, [r7, #120]	; 0x78
			StdDevRateMean = (uint32_t) (StdDevRateSum / StdDevSamples);
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	0019      	movs	r1, r3
 80037c2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80037c4:	f7fc fca0 	bl	8000108 <__udivsi3>
 80037c8:	0003      	movs	r3, r0
 80037ca:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		/* TODO optimize shorten Std dev in aisngle loop computation using sum of x2 - (sum of x)2 */
		StdDevSamples = 0;
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	801a      	strh	r2, [r3, #0]
		StdDevDistanceSum = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	67fb      	str	r3, [r7, #124]	; 0x7c
		StdDevRateSum = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 80037dc:	239c      	movs	r3, #156	; 0x9c
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	e04e      	b.n	8003884 <_filter_Start+0x888>
			if (_FilterData(LastTrueRange)[i] != FILTER_INVALID_DISTANCE) {
 80037e6:	219c      	movs	r1, #156	; 0x9c
 80037e8:	187b      	adds	r3, r7, r1
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	4a94      	ldr	r2, [pc, #592]	; (8003a40 <_filter_Start+0xa44>)
 80037ee:	330c      	adds	r3, #12
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	18d3      	adds	r3, r2, r3
 80037f4:	3304      	adds	r3, #4
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	4a92      	ldr	r2, [pc, #584]	; (8003a44 <_filter_Start+0xa48>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d03c      	beq.n	8003878 <_filter_Start+0x87c>
				StdDevSamples = (uint16_t) (StdDevSamples + 1);
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	18bb      	adds	r3, r7, r2
 8003802:	18ba      	adds	r2, r7, r2
 8003804:	8812      	ldrh	r2, [r2, #0]
 8003806:	3201      	adds	r2, #1
 8003808:	801a      	strh	r2, [r3, #0]
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
									(int)(_FilterData(LastTrueRange)[i] -
 800380a:	0008      	movs	r0, r1
 800380c:	183b      	adds	r3, r7, r0
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	4a8b      	ldr	r2, [pc, #556]	; (8003a40 <_filter_Start+0xa44>)
 8003812:	330c      	adds	r3, #12
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	18d3      	adds	r3, r2, r3
 8003818:	3304      	adds	r3, #4
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	001a      	movs	r2, r3
 800381e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	0019      	movs	r1, r3
											StdDevDistanceMean) *
											(int) (_FilterData(LastTrueRange)[i] -
 8003824:	183b      	adds	r3, r7, r0
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	4a85      	ldr	r2, [pc, #532]	; (8003a40 <_filter_Start+0xa44>)
 800382a:	330c      	adds	r3, #12
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	18d3      	adds	r3, r2, r3
 8003830:	3304      	adds	r3, #4
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	001a      	movs	r2, r3
 8003836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003838:	1ad3      	subs	r3, r2, r3
											StdDevDistanceMean) *
 800383a:	434b      	muls	r3, r1
 800383c:	001a      	movs	r2, r3
				StdDevDistanceSum = (uint32_t) (StdDevDistanceSum +
 800383e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003840:	189b      	adds	r3, r3, r2
 8003842:	67fb      	str	r3, [r7, #124]	; 0x7c
													StdDevDistanceMean));
				StdDevRateSum = (uint32_t) (StdDevRateSum +
									(int) (_FilterData(LastReturnRates)[i] -
 8003844:	183b      	adds	r3, r7, r0
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	4a7d      	ldr	r2, [pc, #500]	; (8003a40 <_filter_Start+0xa44>)
 800384a:	330a      	adds	r3, #10
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	18d3      	adds	r3, r2, r3
 8003850:	3308      	adds	r3, #8
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	0019      	movs	r1, r3
											StdDevRateMean) *
											(int) (_FilterData(LastReturnRates)[i] -
 800385a:	183b      	adds	r3, r7, r0
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	4a78      	ldr	r2, [pc, #480]	; (8003a40 <_filter_Start+0xa44>)
 8003860:	330a      	adds	r3, #10
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	18d3      	adds	r3, r2, r3
 8003866:	3308      	adds	r3, #8
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386c:	1ad3      	subs	r3, r2, r3
											StdDevRateMean) *
 800386e:	434b      	muls	r3, r1
 8003870:	001a      	movs	r2, r3
				StdDevRateSum = (uint32_t) (StdDevRateSum +
 8003872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003874:	189b      	adds	r3, r3, r2
 8003876:	673b      	str	r3, [r7, #112]	; 0x70
		for (i = 0; (i < FILTER_NBOF_SAMPLES) && (StdDevSamples < FILTER_STDDEV_SAMPLES); i++) {
 8003878:	219c      	movs	r1, #156	; 0x9c
 800387a:	187b      	adds	r3, r7, r1
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	187b      	adds	r3, r7, r1
 8003880:	3201      	adds	r2, #1
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	239c      	movs	r3, #156	; 0x9c
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	2b09      	cmp	r3, #9
 800388c:	d804      	bhi.n	8003898 <_filter_Start+0x89c>
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	2b05      	cmp	r3, #5
 8003896:	d9a6      	bls.n	80037e6 <_filter_Start+0x7ea>
													StdDevRateMean));
			}
		}
		if (StdDevSamples >= StdDevSamplesMinNeeded) {
 8003898:	2480      	movs	r4, #128	; 0x80
 800389a:	193a      	adds	r2, r7, r4
 800389c:	2382      	movs	r3, #130	; 0x82
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	8812      	ldrh	r2, [r2, #0]
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d312      	bcc.n	80038ce <_filter_Start+0x8d2>
			StdDevDistance = (uint16_t) (StdDevDistanceSum / StdDevSamples);
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	0019      	movs	r1, r3
 80038ae:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80038b0:	f7fc fc2a 	bl	8000108 <__udivsi3>
 80038b4:	0003      	movs	r3, r0
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = (uint16_t) (StdDevRateSum / StdDevSamples);
 80038ba:	193b      	adds	r3, r7, r4
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	0019      	movs	r1, r3
 80038c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80038c2:	f7fc fc21 	bl	8000108 <__udivsi3>
 80038c6:	0003      	movs	r3, r0
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80038cc:	e003      	b.n	80038d6 <_filter_Start+0x8da>
		} else {
			StdDevDistance = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	677b      	str	r3, [r7, #116]	; 0x74
			StdDevRate = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		/* Check Return rate standard deviation */
		if (StdDevRate < StdDevMovingTargetStdDevLimit) {
 80038d6:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <_filter_Start+0xa4c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038dc:	429a      	cmp	r2, r3
 80038de:	d252      	bcs.n	8003986 <_filter_Start+0x98a>
			if (StdDevSamples < StdDevSamplesMinNeeded) {
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	18fa      	adds	r2, r7, r3
 80038e4:	2382      	movs	r3, #130	; 0x82
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d204      	bcs.n	80038fa <_filter_Start+0x8fe>
				//m_newTrueRange_mm = MaxOrInvalidDistance;
				filterErrorCode = RangingFiltered;
 80038f0:	2396      	movs	r3, #150	; 0x96
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	2210      	movs	r2, #16
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	e04d      	b.n	8003996 <_filter_Start+0x99a>
			} else {
				/* Check distance standard deviation */
				if (StdDevRate < StdDevMovingTargetReturnRateLimit)
 80038fa:	4b54      	ldr	r3, [pc, #336]	; (8003a4c <_filter_Start+0xa50>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003900:	429a      	cmp	r2, r3
 8003902:	d211      	bcs.n	8003928 <_filter_Start+0x92c>
					StdDevLimitWithTargetMove = StdDevLimit +
						(((StdDevMovingTargetStdDevForReturnRateLimit -
 8003904:	4b52      	ldr	r3, [pc, #328]	; (8003a50 <_filter_Start+0xa54>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390a:	1ad3      	subs	r3, r2, r3
							StdDevLimit) * StdDevRate) /
 800390c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800390e:	435a      	muls	r2, r3
 8003910:	4b4e      	ldr	r3, [pc, #312]	; (8003a4c <_filter_Start+0xa50>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0019      	movs	r1, r3
 8003916:	0010      	movs	r0, r2
 8003918:	f7fc fbf6 	bl	8000108 <__udivsi3>
 800391c:	0003      	movs	r3, r0
 800391e:	001a      	movs	r2, r3
					StdDevLimitWithTargetMove = StdDevLimit +
 8003920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003922:	189b      	adds	r3, r3, r2
 8003924:	667b      	str	r3, [r7, #100]	; 0x64
 8003926:	e002      	b.n	800392e <_filter_Start+0x932>
							StdDevMovingTargetReturnRateLimit);
				else
					StdDevLimitWithTargetMove = StdDevMovingTargetStdDevForReturnRateLimit;
 8003928:	4b49      	ldr	r3, [pc, #292]	; (8003a50 <_filter_Start+0xa54>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	667b      	str	r3, [r7, #100]	; 0x64

				if(_FilterData(filterError)==NoError){
 800392e:	4b44      	ldr	r3, [pc, #272]	; (8003a40 <_filter_Start+0xa44>)
 8003930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <_filter_Start+0x944>
					/* No wrapAround detected yet, so relax constraints on the std dev */
					StdDevLimitWithTargetMove = StdDevLimitWithTargetMove * StdDevNoWrapDetectedMultiplier;
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <_filter_Start+0xa58>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800393c:	4353      	muls	r3, r2
 800393e:	667b      	str	r3, [r7, #100]	; 0x64
				}

				if (((StdDevDistance * StdDevHighConfidenceSNRLimit) < StdDevLimit) && (StdDevSamples>=FILTER_STDDEV_SAMPLES)) {
 8003940:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <_filter_Start+0xa5c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003946:	4353      	muls	r3, r2
 8003948:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800394a:	429a      	cmp	r2, r3
 800394c:	d909      	bls.n	8003962 <_filter_Start+0x966>
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d904      	bls.n	8003962 <_filter_Start+0x966>
					NoWrapAroundHighConfidenceFlag = 1;
 8003958:	238a      	movs	r3, #138	; 0x8a
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2201      	movs	r2, #1
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	e019      	b.n	8003996 <_filter_Start+0x99a>
				} else {
					if (StdDevDistance < StdDevLimitWithTargetMove) {
 8003962:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003966:	429a      	cmp	r2, r3
 8003968:	d204      	bcs.n	8003974 <_filter_Start+0x978>
							NoWrapAroundFlag = 1;
 800396a:	238c      	movs	r3, #140	; 0x8c
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2201      	movs	r2, #1
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	e010      	b.n	8003996 <_filter_Start+0x99a>
						} else {
						WrapAroundFlag = 1;
 8003974:	238e      	movs	r3, #142	; 0x8e
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2201      	movs	r2, #1
 800397a:	801a      	strh	r2, [r3, #0]
						filterErrorCode = RangingFiltered;
 800397c:	2396      	movs	r3, #150	; 0x96
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2210      	movs	r2, #16
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	e007      	b.n	8003996 <_filter_Start+0x99a>
					}
				}
			}
		} else {
			/* Target moving too fast */
			WrapAroundFlag = 1;
 8003986:	238e      	movs	r3, #142	; 0x8e
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2201      	movs	r2, #1
 800398c:	801a      	strh	r2, [r3, #0]
			filterErrorCode = RangingFiltered;
 800398e:	2396      	movs	r3, #150	; 0x96
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2210      	movs	r2, #16
 8003994:	801a      	strh	r2, [r3, #0]
		}
	}

	if (ValidDistance == 0) {
 8003996:	2392      	movs	r3, #146	; 0x92
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10e      	bne.n	80039be <_filter_Start+0x9c2>
		/* In case of invalid distance */
		if (_FilterData(StdFilteredReads) > 0)
 80039a0:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <_filter_Start+0xa44>)
 80039a2:	2258      	movs	r2, #88	; 0x58
 80039a4:	5a9b      	ldrh	r3, [r3, r2]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d100      	bne.n	80039ac <_filter_Start+0x9b0>
 80039aa:	e066      	b.n	8003a7a <_filter_Start+0xa7e>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) - 1);
 80039ac:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <_filter_Start+0xa44>)
 80039ae:	2258      	movs	r2, #88	; 0x58
 80039b0:	5a9b      	ldrh	r3, [r3, r2]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b299      	uxth	r1, r3
 80039b6:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <_filter_Start+0xa44>)
 80039b8:	2258      	movs	r2, #88	; 0x58
 80039ba:	5299      	strh	r1, [r3, r2]
 80039bc:	e05d      	b.n	8003a7a <_filter_Start+0xa7e>
	} else {
		if (WrapAroundFlag == 1) {
 80039be:	238e      	movs	r3, #142	; 0x8e
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d116      	bne.n	80039f6 <_filter_Start+0x9fa>
			_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) +
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <_filter_Start+0xa44>)
 80039ca:	2258      	movs	r2, #88	; 0x58
 80039cc:	5a9a      	ldrh	r2, [r3, r2]
 80039ce:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <_filter_Start+0xa60>)
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	18d3      	adds	r3, r2, r3
 80039d4:	b299      	uxth	r1, r3
 80039d6:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <_filter_Start+0xa44>)
 80039d8:	2258      	movs	r2, #88	; 0x58
 80039da:	5299      	strh	r1, [r3, r2]
											StdFilteredReadsIncrement);
			if (_FilterData(StdFilteredReads) > StdMaxFilteredReads)
 80039dc:	4b18      	ldr	r3, [pc, #96]	; (8003a40 <_filter_Start+0xa44>)
 80039de:	2258      	movs	r2, #88	; 0x58
 80039e0:	5a9a      	ldrh	r2, [r3, r2]
 80039e2:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <_filter_Start+0xa64>)
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d947      	bls.n	8003a7a <_filter_Start+0xa7e>
				_FilterData(StdFilteredReads) = StdMaxFilteredReads;
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <_filter_Start+0xa64>)
 80039ec:	8819      	ldrh	r1, [r3, #0]
 80039ee:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <_filter_Start+0xa44>)
 80039f0:	2258      	movs	r2, #88	; 0x58
 80039f2:	5299      	strh	r1, [r3, r2]
 80039f4:	e041      	b.n	8003a7a <_filter_Start+0xa7e>
		} else {
			if (NoWrapAroundFlag == 1) {
 80039f6:	238c      	movs	r3, #140	; 0x8c
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d133      	bne.n	8003a68 <_filter_Start+0xa6c>
				if (_FilterData(StdFilteredReads) > 0) {
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <_filter_Start+0xa44>)
 8003a02:	2258      	movs	r2, #88	; 0x58
 8003a04:	5a9b      	ldrh	r3, [r3, r2]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d037      	beq.n	8003a7a <_filter_Start+0xa7e>
					filterErrorCode = RangingFiltered;
 8003a0a:	2396      	movs	r3, #150	; 0x96
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	2210      	movs	r2, #16
 8003a10:	801a      	strh	r2, [r3, #0]
					if (_FilterData(StdFilteredReads) > StdFilteredReadsDecrement)
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <_filter_Start+0xa44>)
 8003a14:	2258      	movs	r2, #88	; 0x58
 8003a16:	5a9a      	ldrh	r2, [r3, r2]
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <_filter_Start+0xa68>)
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d90a      	bls.n	8003a36 <_filter_Start+0xa3a>
						_FilterData(StdFilteredReads) = (uint16_t) (_FilterData(StdFilteredReads) -
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <_filter_Start+0xa44>)
 8003a22:	2258      	movs	r2, #88	; 0x58
 8003a24:	5a9a      	ldrh	r2, [r3, r2]
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <_filter_Start+0xa68>)
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	b299      	uxth	r1, r3
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <_filter_Start+0xa44>)
 8003a30:	2258      	movs	r2, #88	; 0x58
 8003a32:	5299      	strh	r1, [r3, r2]
 8003a34:	e021      	b.n	8003a7a <_filter_Start+0xa7e>
														StdFilteredReadsDecrement);
					else
						_FilterData(StdFilteredReads) = 0;
 8003a36:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <_filter_Start+0xa44>)
 8003a38:	2258      	movs	r2, #88	; 0x58
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	5299      	strh	r1, [r3, r2]
 8003a3e:	e01c      	b.n	8003a7a <_filter_Start+0xa7e>
 8003a40:	2000000c 	.word	0x2000000c
 8003a44:	0000ffff 	.word	0x0000ffff
 8003a48:	08007a10 	.word	0x08007a10
 8003a4c:	08007a14 	.word	0x08007a14
 8003a50:	08007a18 	.word	0x08007a18
 8003a54:	08007a1c 	.word	0x08007a1c
 8003a58:	08007a20 	.word	0x08007a20
 8003a5c:	08007a24 	.word	0x08007a24
 8003a60:	08007a26 	.word	0x08007a26
 8003a64:	08007a28 	.word	0x08007a28
				}
			} else {
				if (NoWrapAroundHighConfidenceFlag == 1) {
 8003a68:	238a      	movs	r3, #138	; 0x8a
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d103      	bne.n	8003a7a <_filter_Start+0xa7e>
					_FilterData(StdFilteredReads) = 0;
 8003a72:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <_filter_Start+0xb14>)
 8003a74:	2258      	movs	r2, #88	; 0x58
 8003a76:	2100      	movs	r1, #0
 8003a78:	5299      	strh	r1, [r3, r2]
	}

	/* If we detect a change from no Error to RangingFilteringOnGoing, then it means that
	 * the filter detected a change in te scene, so discard all previous measurements.
	 */
	if((_FilterData(filterError) == NoError) && (filterErrorCode!=NoError)) {
 8003a7a:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <_filter_Start+0xb14>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d127      	bne.n	8003ad2 <_filter_Start+0xad6>
 8003a82:	2396      	movs	r3, #150	; 0x96
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d022      	beq.n	8003ad2 <_filter_Start+0xad6>
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8003a8c:	239c      	movs	r3, #156	; 0x9c
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2201      	movs	r2, #1
 8003a92:	801a      	strh	r2, [r3, #0]
 8003a94:	e018      	b.n	8003ac8 <_filter_Start+0xacc>
			_FilterData(LastTrueRange)[i] = FILTER_INVALID_DISTANCE;
 8003a96:	219c      	movs	r1, #156	; 0x9c
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <_filter_Start+0xb14>)
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	18d3      	adds	r3, r2, r3
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	4252      	negs	r2, r2
 8003aaa:	801a      	strh	r2, [r3, #0]
			_FilterData(LastReturnRates)[i] = 0;
 8003aac:	187b      	adds	r3, r7, r1
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <_filter_Start+0xb14>)
 8003ab2:	330a      	adds	r3, #10
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	3308      	adds	r3, #8
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
		for (i = 1; i < FILTER_NBOF_SAMPLES; i++) {
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	881a      	ldrh	r2, [r3, #0]
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	3201      	adds	r2, #1
 8003ac6:	801a      	strh	r2, [r3, #0]
 8003ac8:	239c      	movs	r3, #156	; 0x9c
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d9e1      	bls.n	8003a96 <_filter_Start+0xa9a>
		}
	}

	/* Update filter error code */
	_FilterData(filterError) = filterErrorCode;
 8003ad2:	2196      	movs	r1, #150	; 0x96
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <_filter_Start+0xb14>)
 8003ada:	675a      	str	r2, [r3, #116]	; 0x74

	/* Update reported range */
	if(filterErrorCode==RangingFiltered)
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d103      	bne.n	8003aec <_filter_Start+0xaf0>
		m_newTrueRange_mm = MaxOrInvalidDistance; /* Set to invalid distance */
 8003ae4:	239e      	movs	r3, #158	; 0x9e
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aea:	801a      	strh	r2, [r3, #0]

	return m_newTrueRange_mm;
 8003aec:	239e      	movs	r3, #158	; 0x9e
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	e008      	b.n	8003b06 <_filter_Start+0xb0a>
		goto done_err;
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	e004      	b.n	8003b02 <_filter_Start+0xb06>
		goto done_err;
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	e002      	b.n	8003b02 <_filter_Start+0xb06>
				goto done_err;
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	e000      	b.n	8003b02 <_filter_Start+0xb06>
			goto done_err;
 8003b00:	46c0      	nop			; (mov r8, r8)
done_err:
	return -1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	425b      	negs	r3, r3

#undef MaxOrInvalidDistance
}
 8003b06:	0018      	movs	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b028      	add	sp, #160	; 0xa0
 8003b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	2000000c 	.word	0x2000000c

08003b14 <_filter_GetResult>:


static int _filter_GetResult(VL6180Dev_t dev, VL6180_RangeData_t *pRangeData)
{
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	b08b      	sub	sp, #44	; 0x2c
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	1dfb      	adds	r3, r7, #7
 8003b20:	701a      	strb	r2, [r3, #0]
	uint32_t m_rawRange_mm = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
	int32_t  FilteredRange;
	const uint8_t scaler = _GetUpscale(dev);
 8003b26:	2517      	movs	r5, #23
 8003b28:	197b      	adds	r3, r7, r5
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <_filter_GetResult+0xb4>)
 8003b2c:	7c92      	ldrb	r2, [r2, #18]
 8003b2e:	701a      	strb	r2, [r3, #0]
	uint8_t u8;
	int status;

	do {
		status = VL6180_GetCachedByte(dev, RESULT_RANGE_RAW, &u8);
 8003b30:	240f      	movs	r4, #15
 8003b32:	193a      	adds	r2, r7, r4
 8003b34:	1dfb      	adds	r3, r7, #7
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2164      	movs	r1, #100	; 0x64
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fe fcf8 	bl	8002530 <VL6180_GetCachedByte>
 8003b40:	0003      	movs	r3, r0
 8003b42:	61fb      	str	r3, [r7, #28]
		if (status) {
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d138      	bne.n	8003bbc <_filter_GetResult+0xa8>
		    VL6180_ErrLog("RESULT_RANGE_RAW rd fail");
		    break;
		}
		m_rawRange_mm = u8;
 8003b4a:	193b      	adds	r3, r7, r4
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]

		FilteredRange = _filter_Start(dev, pRangeData->range_mm, (m_rawRange_mm * scaler), pRangeData->rtnRate, pRangeData->rtnAmbRate, pRangeData->errorStatus);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b29c      	uxth	r4, r3
 8003b56:	197b      	adds	r3, r7, r5
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	4353      	muls	r3, r2
 8003b62:	b29d      	uxth	r5, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691e      	ldr	r6, [r3, #16]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	1df9      	adds	r1, r7, #7
 8003b74:	7808      	ldrb	r0, [r1, #0]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	9200      	str	r2, [sp, #0]
 8003b7a:	0033      	movs	r3, r6
 8003b7c:	002a      	movs	r2, r5
 8003b7e:	0021      	movs	r1, r4
 8003b80:	f7ff fa3c 	bl	8002ffc <_filter_Start>
 8003b84:	0003      	movs	r3, r0
 8003b86:	613b      	str	r3, [r7, #16]
		if (FilteredRange < 0) {
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da03      	bge.n	8003b96 <_filter_GetResult+0x82>
		    status = -1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	425b      	negs	r3, r3
 8003b92:	61fb      	str	r3, [r7, #28]
		    break;
 8003b94:	e013      	b.n	8003bbe <_filter_GetResult+0xaa>
		}
		pRangeData->FilteredData.range_mm = FilteredRange;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	841a      	strh	r2, [r3, #32]
		pRangeData->FilteredData.rawRange_mm = m_rawRange_mm * scaler;
 8003b9e:	2317      	movs	r3, #23
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	4353      	muls	r3, r2
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	845a      	strh	r2, [r3, #34]	; 0x22
		pRangeData->FilteredData.filterError= _FilterData(filterError);
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <_filter_GetResult+0xb4>)
 8003bb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8003bba:	e000      	b.n	8003bbe <_filter_GetResult+0xaa>
		    break;
 8003bbc:	46c0      	nop			; (mov r8, r8)
	} while (0);
	return status;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
}
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b009      	add	sp, #36	; 0x24
 8003bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc8:	2000000c 	.word	0x2000000c

08003bcc <_GetRateResult>:
#endif /* VL6180_WRAP_AROUND_FILTER_SUPPORT */

#ifdef VL6180_HAVE_RATE_DATA

static int _GetRateResult(VL6180Dev_t dev, VL6180_RangeData_t *pRangeData)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	; 0x30
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	701a      	strb	r2, [r3, #0]
	uint32_t m_rtnConvTime = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
	uint32_t m_rtnSignalRate = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t m_rtnAmbientRate = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
	uint32_t m_rtnSignalCount = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
	uint32_t m_rtnAmbientCount = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
	uint32_t m_refConvTime = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
	uint32_t cRtnSignalCountMax = 0x7FFFFFFF;
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <_GetRateResult+0x12c>)
 8003bf4:	61fb      	str	r3, [r7, #28]
	uint32_t cDllPeriods = 6;
 8003bf6:	2306      	movs	r3, #6
 8003bf8:	61bb      	str	r3, [r7, #24]
	uint32_t calcConvTime = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c

	int status;

	do {
		status = VL6180_GetCachedDWord(dev, RESULT_RANGE_RETURN_SIGNAL_COUNT, &m_rtnSignalCount);
 8003bfe:	2310      	movs	r3, #16
 8003c00:	18fa      	adds	r2, r7, r3
 8003c02:	1dfb      	adds	r3, r7, #7
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	216c      	movs	r1, #108	; 0x6c
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7fe fc07 	bl	800241c <VL6180_GetCachedDWord>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
		if (status) {
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d162      	bne.n	8003cde <_GetRateResult+0x112>
			VL6180_ErrLog("RESULT_RANGE_RETURN_SIGNAL_COUNT rd fail");
			break;
		}
		if (m_rtnSignalCount > cRtnSignalCountMax) {
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d201      	bcs.n	8003c24 <_GetRateResult+0x58>
			m_rtnSignalCount = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
		}

		status = VL6180_GetCachedDWord(dev, RESULT_RANGE_RETURN_AMB_COUNT, &m_rtnAmbientCount);
 8003c24:	230c      	movs	r3, #12
 8003c26:	18fa      	adds	r2, r7, r3
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2174      	movs	r1, #116	; 0x74
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7fe fbf4 	bl	800241c <VL6180_GetCachedDWord>
 8003c34:	0003      	movs	r3, r0
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
		if (status) {
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d151      	bne.n	8003ce2 <_GetRateResult+0x116>
			VL6180_ErrLog("RESULT_RANGE_RETURN_AMB_COUNTrd fail");
			break;
		}


		status = VL6180_GetCachedDWord(dev, RESULT_RANGE_RETURN_CONV_TIME, &m_rtnConvTime);
 8003c3e:	2314      	movs	r3, #20
 8003c40:	18fa      	adds	r2, r7, r3
 8003c42:	1dfb      	adds	r3, r7, #7
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	217c      	movs	r1, #124	; 0x7c
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7fe fbe7 	bl	800241c <VL6180_GetCachedDWord>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (status) {
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d146      	bne.n	8003ce6 <_GetRateResult+0x11a>
			VL6180_ErrLog("RESULT_RANGE_RETURN_CONV_TIME rd fail");
			break;
		}

		status = VL6180_GetCachedDWord(dev, RESULT_RANGE_REFERENCE_CONV_TIME, &m_refConvTime);
 8003c58:	2308      	movs	r3, #8
 8003c5a:	18fa      	adds	r2, r7, r3
 8003c5c:	1dfb      	adds	r3, r7, #7
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7fe fbda 	bl	800241c <VL6180_GetCachedDWord>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (status) {
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d13b      	bne.n	8003cea <_GetRateResult+0x11e>
			VL6180_ErrLog("RESULT_RANGE_REFERENCE_CONV_TIME rd fail");
			break;
		}

		pRangeData->rtnConvTime = m_rtnConvTime;
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	615a      	str	r2, [r3, #20]
		pRangeData->refConvTime = m_refConvTime;
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	619a      	str	r2, [r3, #24]

		calcConvTime = m_refConvTime;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (m_rtnConvTime > m_refConvTime) {
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d901      	bls.n	8003c8e <_GetRateResult+0xc2>
			calcConvTime = m_rtnConvTime;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (calcConvTime == 0)
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <_GetRateResult+0xcc>
			calcConvTime = 63000;
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <_GetRateResult+0x130>)
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c

		m_rtnSignalRate = (m_rtnSignalCount * 1000) / calcConvTime;
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	0013      	movs	r3, r2
 8003c9c:	015b      	lsls	r3, r3, #5
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fc fa2d 	bl	8000108 <__udivsi3>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
		m_rtnAmbientRate = (m_rtnAmbientCount * cDllPeriods * 1000) / calcConvTime;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	435a      	muls	r2, r3
 8003cb8:	0013      	movs	r3, r2
 8003cba:	015b      	lsls	r3, r3, #5
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	189b      	adds	r3, r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7fc fa1e 	bl	8000108 <__udivsi3>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	623b      	str	r3, [r7, #32]

		pRangeData->rtnRate = m_rtnSignalRate;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	611a      	str	r2, [r3, #16]
		pRangeData->rtnAmbRate = m_rtnAmbientRate;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	e006      	b.n	8003cec <_GetRateResult+0x120>
			break;
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	e004      	b.n	8003cec <_GetRateResult+0x120>
			break;
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	e002      	b.n	8003cec <_GetRateResult+0x120>
			break;
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	e000      	b.n	8003cec <_GetRateResult+0x120>
			break;
 8003cea:	46c0      	nop			; (mov r8, r8)


	} while (0);
	return status;
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003cee:	0018      	movs	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b00c      	add	sp, #48	; 0x30
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	7fffffff 	.word	0x7fffffff
 8003cfc:	0000f618 	.word	0x0000f618

08003d00 <VL6180_SqrtUint32>:
/*
 * 32 bit integer square root with not so bad precision (integer result) and is quite fast
 * see http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
 */
uint32_t VL6180_SqrtUint32(uint32_t num)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	uint32_t res = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
	uint32_t bit = 1 << 30; /* The second-to-top bit is set: 1 << 30 for 32 bits */
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	05db      	lsls	r3, r3, #23
 8003d10:	60bb      	str	r3, [r7, #8]

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8003d12:	e002      	b.n	8003d1a <VL6180_SqrtUint32+0x1a>
		bit >>= 2;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d8f8      	bhi.n	8003d14 <VL6180_SqrtUint32+0x14>

	while (bit != 0) {
 8003d22:	e017      	b.n	8003d54 <VL6180_SqrtUint32+0x54>
		if (num >= res + bit) {
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	18d3      	adds	r3, r2, r3
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d30b      	bcc.n	8003d48 <VL6180_SqrtUint32+0x48>
		    num -= res + bit;
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	18d3      	adds	r3, r2, r3
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	607b      	str	r3, [r7, #4]
		    res = (res >> 1) + bit;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	18d3      	adds	r3, r2, r3
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e002      	b.n	8003d4e <VL6180_SqrtUint32+0x4e>
		} else
		    res >>= 1;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
		bit >>= 2;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e4      	bne.n	8003d24 <VL6180_SqrtUint32+0x24>
	}
	return res;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b004      	add	sp, #16
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_DMax_OneTimeInit>:
#endif


/* DMax one time init */
void _DMax_OneTimeInit(VL6180Dev_t dev)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	1dfb      	adds	r3, r7, #7
 8003d6e:	701a      	strb	r2, [r3, #0]
	_DMaxData(ambTuningWindowFactor_K) = DEF_AMBIENT_TUNING;
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <_DMax_OneTimeInit+0x1c>)
 8003d72:	22b4      	movs	r2, #180	; 0xb4
 8003d74:	2150      	movs	r1, #80	; 0x50
 8003d76:	5099      	str	r1, [r3, r2]
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	2000000c 	.word	0x2000000c

08003d84 <_DMax_RawValueAtRateKCps>:


static uint32_t _DMax_RawValueAtRateKCps(VL6180Dev_t dev, int32_t rate)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	1dfb      	adds	r3, r7, #7
 8003d90:	701a      	strb	r2, [r3, #0]
	uint32_t RawDMax;
	DMaxFix_t retSignalAt400mm;
	uint32_t ambTuningWindowFactor_K;


	ambTuningWindowFactor_K = _DMaxData(ambTuningWindowFactor_K);
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <_DMax_RawValueAtRateKCps+0xa0>)
 8003d94:	22b4      	movs	r2, #180	; 0xb4
 8003d96:	589b      	ldr	r3, [r3, r2]
 8003d98:	617b      	str	r3, [r7, #20]
	snrLimit_K              = _DMaxData(snrLimit_K);
 8003d9a:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <_DMax_RawValueAtRateKCps+0xa0>)
 8003d9c:	22bc      	movs	r2, #188	; 0xbc
 8003d9e:	589b      	ldr	r3, [r3, r2]
 8003da0:	613b      	str	r3, [r7, #16]
	retSignalAt400mm        = _DMaxData(retSignalAt400mm);
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <_DMax_RawValueAtRateKCps+0xa0>)
 8003da4:	22b8      	movs	r2, #184	; 0xb8
 8003da6:	589b      	ldr	r3, [r3, r2]
 8003da8:	60fb      	str	r3, [r7, #12]
	/* 12 to 18 bits Kcps */
	if (rate > 0) {
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	dd32      	ble.n	8003e16 <_DMax_RawValueAtRateKCps+0x92>
		DMaxSq = 400 * 400 * 1000 / rate - (400 * 400 / 330);
 8003db0:	6839      	ldr	r1, [r7, #0]
 8003db2:	481d      	ldr	r0, [pc, #116]	; (8003e28 <_DMax_RawValueAtRateKCps+0xa4>)
 8003db4:	f7fc fa32 	bl	800021c <__divsi3>
 8003db8:	0003      	movs	r3, r0
 8003dba:	3be5      	subs	r3, #229	; 0xe5
 8003dbc:	3bff      	subs	r3, #255	; 0xff
 8003dbe:	61fb      	str	r3, [r7, #28]
		/* K of (1/RtnAmb -1/330 )=> 30bit- (12-18)bit  => 12-18 bits*/
		if (DMaxSq <= 0) {
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	dc02      	bgt.n	8003dcc <_DMax_RawValueAtRateKCps+0x48>
		    RawDMax = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e026      	b.n	8003e1a <_DMax_RawValueAtRateKCps+0x96>
		} else {
		    /* value can be more 32 bit so base on raneg apply
			 * retSignalAt400mm before or after division to presevr accuracy */
		    if (DMaxSq < (2 << 12)) {
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	da0c      	bge.n	8003df0 <_DMax_RawValueAtRateKCps+0x6c>
				DMaxSq = DMaxSq * retSignalAt400mm /
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4353      	muls	r3, r2
 8003ddc:	0018      	movs	r0, r3
							(snrLimit_K + ambTuningWindowFactor_K);
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	18d3      	adds	r3, r2, r3
				DMaxSq = DMaxSq * retSignalAt400mm /
 8003de4:	0019      	movs	r1, r3
 8003de6:	f7fc f98f 	bl	8000108 <__udivsi3>
 8003dea:	0003      	movs	r3, r0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	e00b      	b.n	8003e08 <_DMax_RawValueAtRateKCps+0x84>
				/* max 12 + 12 to 18 -10 => 12-26 bit */
		    } else {
				DMaxSq = DMaxSq / (snrLimit_K + ambTuningWindowFactor_K) * retSignalAt400mm;
 8003df0:	69f8      	ldr	r0, [r7, #28]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	18d3      	adds	r3, r2, r3
 8003df8:	0019      	movs	r1, r3
 8003dfa:	f7fc f985 	bl	8000108 <__udivsi3>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	001a      	movs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4353      	muls	r3, r2
 8003e06:	61fb      	str	r3, [r7, #28]
				/* 12 to 18 -10 + 12 to 18 *=> 12-26 bit */
		    }
		    RawDMax = VL6180_SqrtUint32(DMaxSq);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7ff ff78 	bl	8003d00 <VL6180_SqrtUint32>
 8003e10:	0003      	movs	r3, r0
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	e001      	b.n	8003e1a <_DMax_RawValueAtRateKCps+0x96>
		}
	} else {
		RawDMax = 0x7FFFFFFF; /* bigest possibmle 32bit signed value */
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <_DMax_RawValueAtRateKCps+0xa8>)
 8003e18:	61bb      	str	r3, [r7, #24]
	}
	return RawDMax;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b008      	add	sp, #32
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	2000000c 	.word	0x2000000c
 8003e28:	09896800 	.word	0x09896800
 8003e2c:	7fffffff 	.word	0x7fffffff

08003e30 <_DMax_InitData>:
 *  SYSRANGE_MAX_CONVERGENCE_TIME
 *  SYSRANGE_RANGE_CHECK_ENABLES    mask RANGE_CHECK_RANGE_ENABLE_MASK
 *  range 0xb8-0xbb (0xbb)
 */
static int _DMax_InitData(VL6180Dev_t dev)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b08d      	sub	sp, #52	; 0x34
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	0002      	movs	r2, r0
 8003e38:	1dfb      	adds	r3, r7, #7
 8003e3a:	701a      	strb	r2, [r3, #0]
	int32_t minSignalNeeded;
	uint8_t SysRangeCheckEn;
	uint8_t snrLimit;
	static const int ROMABLE_DATA MaxConvTimeAdjust = -4;

	warning = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");
	do {
		status = VL6180_RdByte(dev, 0x02A, &u8);
 8003e40:	2413      	movs	r4, #19
 8003e42:	193a      	adds	r2, r7, r4
 8003e44:	1dfb      	adds	r3, r7, #7
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	212a      	movs	r1, #42	; 0x2a
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 fa26 	bl	800429c <VL6180_RdByte>
 8003e50:	0003      	movs	r3, r0
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (status) {
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d000      	beq.n	8003e5c <_DMax_InitData+0x2c>
 8003e5a:	e0b8      	b.n	8003fce <_DMax_InitData+0x19e>
		    VL6180_ErrLog("Reg 0x02A rd fail");
		    break;
		}

		if (u8 == 0) {
 8003e5c:	193b      	adds	r3, r7, r4
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <_DMax_InitData+0x3e>
		    warning = CALIBRATION_WARNING;
 8003e64:	2301      	movs	r3, #1
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
		    u8 = 40; /* use a default average value */
 8003e68:	193b      	adds	r3, r7, r4
 8003e6a:	2228      	movs	r2, #40	; 0x28
 8003e6c:	701a      	strb	r2, [r3, #0]
		}
		Reg2A_KCps = Fix7_2_KCPs(u8); /* convert to KCPs */
 8003e6e:	2313      	movs	r3, #19
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	001a      	movs	r2, r3
 8003e76:	0013      	movs	r3, r2
 8003e78:	015b      	lsls	r3, r3, #5
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	09db      	lsrs	r3, r3, #7
 8003e84:	61fb      	str	r3, [r7, #28]

		status = VL6180_RdByte(dev, SYSRANGE_RANGE_CHECK_ENABLES, &SysRangeCheckEn);
 8003e86:	230a      	movs	r3, #10
 8003e88:	18fa      	adds	r2, r7, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	212d      	movs	r1, #45	; 0x2d
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 fa03 	bl	800429c <VL6180_RdByte>
 8003e96:	0003      	movs	r3, r0
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (status) {
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d000      	beq.n	8003ea2 <_DMax_InitData+0x72>
 8003ea0:	e097      	b.n	8003fd2 <_DMax_InitData+0x1a2>
		    VL6180_ErrLog("SYSRANGE_RANGE_CHECK_ENABLES rd fail ");
		    break;
		}

		status = VL6180_RdByte(dev, SYSRANGE_MAX_CONVERGENCE_TIME, &MaxConvTime);
 8003ea2:	230b      	movs	r3, #11
 8003ea4:	18fa      	adds	r2, r7, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	211c      	movs	r1, #28
 8003eac:	0018      	movs	r0, r3
 8003eae:	f000 f9f5 	bl	800429c <VL6180_RdByte>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (status) {
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d000      	beq.n	8003ebe <_DMax_InitData+0x8e>
 8003ebc:	e08b      	b.n	8003fd6 <_DMax_InitData+0x1a6>
		    VL6180_ErrLog("SYSRANGE_MAX_CONVERGENCE_TIME rd fail ");
			break;
		}

		status = VL6180_RdDWord(dev, 0x0B8, &RegB8);
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	18fa      	adds	r2, r7, r3
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	21b8      	movs	r1, #184	; 0xb8
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 fa66 	bl	800439a <VL6180_RdDWord>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (status) {
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d000      	beq.n	8003eda <_DMax_InitData+0xaa>
 8003ed8:	e07f      	b.n	8003fda <_DMax_InitData+0x1aa>
		    VL6180_ErrLog("reg 0x0B8 rd fail ");
		    break;
		}

		status = VL6180_RdByte(dev, SYSRANGE_MAX_AMBIENT_LEVEL_MULT, &snrLimit);
 8003eda:	2409      	movs	r4, #9
 8003edc:	193a      	adds	r2, r7, r4
 8003ede:	1dfb      	adds	r3, r7, #7
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 f9d9 	bl	800429c <VL6180_RdByte>
 8003eea:	0003      	movs	r3, r0
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (status) {
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d000      	beq.n	8003ef6 <_DMax_InitData+0xc6>
 8003ef4:	e073      	b.n	8003fde <_DMax_InitData+0x1ae>
		    VL6180_ErrLog("SYSRANGE_MAX_AMBIENT_LEVEL_MULT rd fail ");
		    break;
		}
		_DMaxData(snrLimit_K) = (int32_t)16 * 1000 / snrLimit;
 8003ef6:	193b      	adds	r3, r7, r4
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	0019      	movs	r1, r3
 8003efc:	23fa      	movs	r3, #250	; 0xfa
 8003efe:	0198      	lsls	r0, r3, #6
 8003f00:	f7fc f98c 	bl	800021c <__divsi3>
 8003f04:	0003      	movs	r3, r0
 8003f06:	0019      	movs	r1, r3
 8003f08:	4b3b      	ldr	r3, [pc, #236]	; (8003ff8 <_DMax_InitData+0x1c8>)
 8003f0a:	22bc      	movs	r2, #188	; 0xbc
 8003f0c:	5099      	str	r1, [r3, r2]
		XTalkCompRate_KCps =   VL6180DevDataGet(dev, XTalkCompRate_KCps);
 8003f0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <_DMax_InitData+0x1c8>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]

		if (Reg2A_KCps >= XTalkCompRate_KCps) {
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d304      	bcc.n	8003f26 <_DMax_InitData+0xf6>
		    _DMaxData(retSignalAt400mm) = Reg2A_KCps;
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <_DMax_InitData+0x1c8>)
 8003f20:	21b8      	movs	r1, #184	; 0xb8
 8003f22:	505a      	str	r2, [r3, r1]
 8003f24:	e003      	b.n	8003f2e <_DMax_InitData+0xfe>
		} else{
		    _DMaxData(retSignalAt400mm) = 0;
 8003f26:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <_DMax_InitData+0x1c8>)
 8003f28:	22b8      	movs	r2, #184	; 0xb8
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	5099      	str	r1, [r3, r2]
			/* Reg2A_K - XTalkCompRate_KCp <0 is invalid */
		}

		/* if xtalk range check is off omit it in snr clipping */
		if (SysRangeCheckEn&RANGE_CHECK_RANGE_ENABLE_MASK) {
 8003f2e:	230a      	movs	r3, #10
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	001a      	movs	r2, r3
 8003f36:	2302      	movs	r3, #2
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <_DMax_InitData+0x13e>
		    status = VL6180_RdWord(dev, SYSRANGE_RANGE_IGNORE_THRESHOLD, &u16);
 8003f3c:	2410      	movs	r4, #16
 8003f3e:	193a      	adds	r2, r7, r4
 8003f40:	1dfb      	adds	r3, r7, #7
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2126      	movs	r1, #38	; 0x26
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 f9e3 	bl	8004312 <VL6180_RdWord>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		    if (status) {
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d145      	bne.n	8003fe2 <_DMax_InitData+0x1b2>
				VL6180_ErrLog("SYSRANGE_RANGE_IGNORE_THRESHOLD rd fail ");
				break;
		    }
		    RangeIgnoreThreshold = Fix7_2_KCPs(u16);
 8003f56:	193b      	adds	r3, r7, r4
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	015b      	lsls	r3, r3, #5
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	09db      	lsrs	r3, r3, #7
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	e001      	b.n	8003f72 <_DMax_InitData+0x142>
		} else{
		    RangeIgnoreThreshold  = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
		}

		minSignalNeeded = (RegB8 * 256) / ((int32_t)MaxConvTime + (int32_t)MaxConvTimeAdjust);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	021a      	lsls	r2, r3, #8
 8003f76:	230b      	movs	r3, #11
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <_DMax_InitData+0x1cc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	18cb      	adds	r3, r1, r3
 8003f84:	0019      	movs	r1, r3
 8003f86:	0010      	movs	r0, r2
 8003f88:	f7fc f8be 	bl	8000108 <__udivsi3>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	623b      	str	r3, [r7, #32]
		/* KCps 8+8 bit -(1 to 6 bit) => 15-10 bit */
		/* minSignalNeeded = max ( minSignalNeeded,  RangeIgnoreThreshold - XTalkCompRate_KCps) */
		if (minSignalNeeded  <= (int32_t)RangeIgnoreThreshold - (int32_t)XTalkCompRate_KCps)
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	dc03      	bgt.n	8003fa4 <_DMax_InitData+0x174>
		    minSignalNeeded  =  RangeIgnoreThreshold - XTalkCompRate_KCps;
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	623b      	str	r3, [r7, #32]

		u32 = (minSignalNeeded*(uint32_t)snrLimit) / 16;
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	001a      	movs	r2, r3
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	4353      	muls	r3, r2
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	617b      	str	r3, [r7, #20]
		_DMaxData(ClipSnrLimit) = _DMax_RawValueAtRateKCps(dev, u32);
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	1dfb      	adds	r3, r7, #7
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff fee1 	bl	8003d84 <_DMax_RawValueAtRateKCps>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	b299      	uxth	r1, r3
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <_DMax_InitData+0x1c8>)
 8003fc8:	22c0      	movs	r2, #192	; 0xc0
 8003fca:	5299      	strh	r1, [r3, r2]
 8003fcc:	e00a      	b.n	8003fe4 <_DMax_InitData+0x1b4>
		    break;
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	e008      	b.n	8003fe4 <_DMax_InitData+0x1b4>
		    break;
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	e006      	b.n	8003fe4 <_DMax_InitData+0x1b4>
			break;
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	e004      	b.n	8003fe4 <_DMax_InitData+0x1b4>
		    break;
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	e002      	b.n	8003fe4 <_DMax_InitData+0x1b4>
		    break;
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	e000      	b.n	8003fe4 <_DMax_InitData+0x1b4>
				break;
 8003fe2:	46c0      	nop			; (mov r8, r8)
		/* clip to dmax to min signal snr limit rate*/
	} while (0);
	if (!status)
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <_DMax_InitData+0x1be>
		status = warning;
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOG_FUNCTION_END(status);
	return status;
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b00d      	add	sp, #52	; 0x34
 8003ff6:	bd90      	pop	{r4, r7, pc}
 8003ff8:	2000000c 	.word	0x2000000c
 8003ffc:	08007a2c 	.word	0x08007a2c

08004000 <_DMax_Compute>:

static int _DMax_Compute(VL6180Dev_t dev, VL6180_RangeData_t *pRange)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	0002      	movs	r2, r0
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	1dfb      	adds	r3, r7, #7
 800400c:	701a      	strb	r2, [r3, #0]
	int32_t DMax;
	int scaling;
	uint16_t HwLimitAtScale;
	static const uint32_t ROMABLE_DATA rtnAmbLowLimit_KCps = 330 * 1000;

	rtnAmbRate = pRange->rtnAmbRate;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	613b      	str	r3, [r7, #16]
	if (rtnAmbRate  < rtnAmbLowLimit_KCps) {
 8004014:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <_DMax_Compute+0x88>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d22b      	bcs.n	8004076 <_DMax_Compute+0x76>
		DMax = _DMax_RawValueAtRateKCps(dev, rtnAmbRate);
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	1dfb      	adds	r3, r7, #7
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f7ff feac 	bl	8003d84 <_DMax_RawValueAtRateKCps>
 800402c:	0003      	movs	r3, r0
 800402e:	617b      	str	r3, [r7, #20]
		scaling = _GetUpscale(dev);
 8004030:	4b16      	ldr	r3, [pc, #88]	; (800408c <_DMax_Compute+0x8c>)
 8004032:	7c9b      	ldrb	r3, [r3, #18]
 8004034:	60fb      	str	r3, [r7, #12]
		HwLimitAtScale = UpperLimitLookUP[scaling - 1];
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1e59      	subs	r1, r3, #1
 800403a:	230a      	movs	r3, #10
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	4a14      	ldr	r2, [pc, #80]	; (8004090 <_DMax_Compute+0x90>)
 8004040:	0049      	lsls	r1, r1, #1
 8004042:	5a8a      	ldrh	r2, [r1, r2]
 8004044:	801a      	strh	r2, [r3, #0]

		if (DMax > _DMaxData(ClipSnrLimit)) {
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <_DMax_Compute+0x8c>)
 8004048:	22c0      	movs	r2, #192	; 0xc0
 800404a:	5a9b      	ldrh	r3, [r3, r2]
 800404c:	001a      	movs	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4293      	cmp	r3, r2
 8004052:	dd03      	ble.n	800405c <_DMax_Compute+0x5c>
		    DMax = _DMaxData(ClipSnrLimit);
 8004054:	4b0d      	ldr	r3, [pc, #52]	; (800408c <_DMax_Compute+0x8c>)
 8004056:	22c0      	movs	r2, #192	; 0xc0
 8004058:	5a9b      	ldrh	r3, [r3, r2]
 800405a:	617b      	str	r3, [r7, #20]
		}
		if (DMax > HwLimitAtScale) {
 800405c:	210a      	movs	r1, #10
 800405e:	187b      	adds	r3, r7, r1
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	429a      	cmp	r2, r3
 8004066:	dd02      	ble.n	800406e <_DMax_Compute+0x6e>
		    DMax = HwLimitAtScale;
 8004068:	187b      	adds	r3, r7, r1
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	617b      	str	r3, [r7, #20]
		}
		pRange->DMax = DMax;
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	61da      	str	r2, [r3, #28]
 8004074:	e002      	b.n	800407c <_DMax_Compute+0x7c>
	} else {
		pRange->DMax = 0;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2200      	movs	r2, #0
 800407a:	61da      	str	r2, [r3, #28]
	}
	return 0;
 800407c:	2300      	movs	r3, #0
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b006      	add	sp, #24
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	08007a30 	.word	0x08007a30
 800408c:	2000000c 	.word	0x2000000c
 8004090:	080079c8 	.word	0x080079c8

08004094 <VL6180_WrByte>:
#else
#error "invalid I2C_BUFFER_CONFIG "
#endif


int VL6180_WrByte(VL6180Dev_t dev, uint16_t index, uint8_t data){
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	0004      	movs	r4, r0
 800409c:	0008      	movs	r0, r1
 800409e:	0011      	movs	r1, r2
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	1c22      	adds	r2, r4, #0
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	1c02      	adds	r2, r0, #0
 80040aa:	801a      	strh	r2, [r3, #0]
 80040ac:	1dbb      	adds	r3, r7, #6
 80040ae:	1c0a      	adds	r2, r1, #0
 80040b0:	701a      	strb	r2, [r3, #0]
    DECL_I2C_BUFFER
    VL6180_I2C_USER_VAR

    VL6180_GetI2CAccess(dev);

    buffer=VL6180_GetI2cBuffer(dev,3);
 80040b2:	2308      	movs	r3, #8
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	b29b      	uxth	r3, r3
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3301      	adds	r3, #1
 80040ca:	1d3a      	adds	r2, r7, #4
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]
    buffer[2]=data;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	3302      	adds	r3, #2
 80040d6:	1dba      	adds	r2, r7, #6
 80040d8:	7812      	ldrb	r2, [r2, #0]
 80040da:	701a      	strb	r2, [r3, #0]

    status=VL6180_I2CWrite(dev, buffer,(uint8_t)3);
 80040dc:	6979      	ldr	r1, [r7, #20]
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2203      	movs	r2, #3
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 fa17 	bl	8004518 <VL6180_I2CWrite>
 80040ea:	0003      	movs	r3, r0
 80040ec:	613b      	str	r3, [r7, #16]
    VL6180_DoneI2CAcces(dev);
    return status;
 80040ee:	693b      	ldr	r3, [r7, #16]
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b007      	add	sp, #28
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <VL6180_WrWord>:

int VL6180_WrWord(VL6180Dev_t dev, uint16_t index, uint16_t data){
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	0004      	movs	r4, r0
 8004100:	0008      	movs	r0, r1
 8004102:	0011      	movs	r1, r2
 8004104:	1dfb      	adds	r3, r7, #7
 8004106:	1c22      	adds	r2, r4, #0
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	1c02      	adds	r2, r0, #0
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	1cbb      	adds	r3, r7, #2
 8004112:	1c0a      	adds	r2, r1, #0
 8004114:	801a      	strh	r2, [r3, #0]
    uint8_t *buffer;
    VL6180_I2C_USER_VAR

    VL6180_GetI2CAccess(dev);

    buffer=VL6180_GetI2cBuffer(dev,4);
 8004116:	2308      	movs	r3, #8
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	b29b      	uxth	r3, r3
 8004124:	b2da      	uxtb	r2, r3
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3301      	adds	r3, #1
 800412e:	1d3a      	adds	r2, r7, #4
 8004130:	8812      	ldrh	r2, [r2, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>8;
 8004136:	1cbb      	adds	r3, r7, #2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	b29a      	uxth	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3302      	adds	r3, #2
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
    buffer[3]=data&0xFF;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	3303      	adds	r3, #3
 800414a:	1cba      	adds	r2, r7, #2
 800414c:	8812      	ldrh	r2, [r2, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    status=VL6180_I2CWrite(dev, buffer,(uint8_t)4);
 8004152:	6979      	ldr	r1, [r7, #20]
 8004154:	1dfb      	adds	r3, r7, #7
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2204      	movs	r2, #4
 800415a:	0018      	movs	r0, r3
 800415c:	f000 f9dc 	bl	8004518 <VL6180_I2CWrite>
 8004160:	0003      	movs	r3, r0
 8004162:	613b      	str	r3, [r7, #16]
    VL6180_DoneI2CAcces(dev);
    return status;
 8004164:	693b      	ldr	r3, [r7, #16]
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b007      	add	sp, #28
 800416c:	bd90      	pop	{r4, r7, pc}

0800416e <VL6180_WrDWord>:

int VL6180_WrDWord(VL6180Dev_t dev, uint16_t index, uint32_t data){
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	603a      	str	r2, [r7, #0]
 8004176:	1dfb      	adds	r3, r7, #7
 8004178:	1c02      	adds	r2, r0, #0
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	1c0a      	adds	r2, r1, #0
 8004180:	801a      	strh	r2, [r3, #0]
    int  status;
    uint8_t *buffer;


    VL6180_GetI2CAccess(dev);
    buffer=VL6180_GetI2cBuffer(dev,6);
 8004182:	2308      	movs	r3, #8
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	617b      	str	r3, [r7, #20]
    buffer[0]=index>>8;
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	b29b      	uxth	r3, r3
 8004190:	b2da      	uxtb	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	3301      	adds	r3, #1
 800419a:	1d3a      	adds	r2, r7, #4
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
    buffer[2]=data>>24;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	0e1a      	lsrs	r2, r3, #24
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3302      	adds	r3, #2
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]
    buffer[3]=(data>>16)&0xFF;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	0c1a      	lsrs	r2, r3, #16
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3303      	adds	r3, #3
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]
    buffer[4]=(data>>8)&0xFF;;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	0a1a      	lsrs	r2, r3, #8
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3304      	adds	r3, #4
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]
    buffer[5]=data&0xFF;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3305      	adds	r3, #5
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
    status=VL6180_I2CWrite(dev, buffer,(uint8_t)6);
 80041d0:	6979      	ldr	r1, [r7, #20]
 80041d2:	1dfb      	adds	r3, r7, #7
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2206      	movs	r2, #6
 80041d8:	0018      	movs	r0, r3
 80041da:	f000 f99d 	bl	8004518 <VL6180_I2CWrite>
 80041de:	0003      	movs	r3, r0
 80041e0:	613b      	str	r3, [r7, #16]
    VL6180_DoneI2CAcces(dev);

    return status;
 80041e2:	693b      	ldr	r3, [r7, #16]
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b006      	add	sp, #24
 80041ea:	bd80      	pop	{r7, pc}

080041ec <VL6180_UpdateByte>:

int VL6180_UpdateByte(VL6180Dev_t dev, uint16_t index, uint8_t AndData, uint8_t OrData){
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	0005      	movs	r5, r0
 80041f4:	000c      	movs	r4, r1
 80041f6:	0010      	movs	r0, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	1c2a      	adds	r2, r5, #0
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	1c22      	adds	r2, r4, #0
 8004204:	801a      	strh	r2, [r3, #0]
 8004206:	1dbb      	adds	r3, r7, #6
 8004208:	1c02      	adds	r2, r0, #0
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	1cfb      	adds	r3, r7, #3
 800420e:	1c0a      	adds	r2, r1, #0
 8004210:	701a      	strb	r2, [r3, #0]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180_GetI2CAccess(dev);

    buffer=VL6180_GetI2cBuffer(dev,3);
 8004212:	2308      	movs	r3, #8
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 8004218:	1d3b      	adds	r3, r7, #4
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	b29b      	uxth	r3, r3
 8004220:	b2da      	uxtb	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	3301      	adds	r3, #1
 800422a:	1d3a      	adds	r2, r7, #4
 800422c:	8812      	ldrh	r2, [r2, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    status=VL6180_I2CWrite(dev, (uint8_t *)buffer,(uint8_t)2);
 8004232:	6939      	ldr	r1, [r7, #16]
 8004234:	1dfb      	adds	r3, r7, #7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2202      	movs	r2, #2
 800423a:	0018      	movs	r0, r3
 800423c:	f000 f96c 	bl	8004518 <VL6180_I2CWrite>
 8004240:	0003      	movs	r3, r0
 8004242:	617b      	str	r3, [r7, #20]
    if( !status ){
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d123      	bne.n	8004292 <VL6180_UpdateByte+0xa6>
        /* read data direct onto buffer */
        status=VL6180_I2CRead(dev, &buffer[2],1);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1c99      	adds	r1, r3, #2
 800424e:	1dfb      	adds	r3, r7, #7
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	0018      	movs	r0, r3
 8004256:	f000 f93b 	bl	80044d0 <VL6180_I2CRead>
 800425a:	0003      	movs	r3, r0
 800425c:	617b      	str	r3, [r7, #20]
        if( !status ){
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <VL6180_UpdateByte+0xa6>
            buffer[2]=(buffer[2]&AndData)|OrData;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	3302      	adds	r3, #2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	1dba      	adds	r2, r7, #6
 800426c:	7812      	ldrb	r2, [r2, #0]
 800426e:	4013      	ands	r3, r2
 8004270:	b2d9      	uxtb	r1, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3302      	adds	r3, #2
 8004276:	1cfa      	adds	r2, r7, #3
 8004278:	7812      	ldrb	r2, [r2, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]
            status=VL6180_I2CWrite(dev, buffer, (uint8_t)3);
 8004280:	6939      	ldr	r1, [r7, #16]
 8004282:	1dfb      	adds	r3, r7, #7
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2203      	movs	r2, #3
 8004288:	0018      	movs	r0, r3
 800428a:	f000 f945 	bl	8004518 <VL6180_I2CWrite>
 800428e:	0003      	movs	r3, r0
 8004290:	617b      	str	r3, [r7, #20]
        }
    }

    VL6180_DoneI2CAcces(dev);

    return status;
 8004292:	697b      	ldr	r3, [r7, #20]
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b006      	add	sp, #24
 800429a:	bdb0      	pop	{r4, r5, r7, pc}

0800429c <VL6180_RdByte>:

int VL6180_RdByte(VL6180Dev_t dev, uint16_t index, uint8_t *data){
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	603a      	str	r2, [r7, #0]
 80042a4:	1dfb      	adds	r3, r7, #7
 80042a6:	1c02      	adds	r2, r0, #0
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	1c0a      	adds	r2, r1, #0
 80042ae:	801a      	strh	r2, [r3, #0]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180_GetI2CAccess(dev);

    buffer=VL6180_GetI2cBuffer(dev,2);
 80042b0:	2308      	movs	r3, #8
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	b29b      	uxth	r3, r3
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	3301      	adds	r3, #1
 80042c8:	1d3a      	adds	r2, r7, #4
 80042ca:	8812      	ldrh	r2, [r2, #0]
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

    status=VL6180_I2CWrite(dev, buffer, (uint8_t)2);
 80042d0:	6939      	ldr	r1, [r7, #16]
 80042d2:	1dfb      	adds	r3, r7, #7
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2202      	movs	r2, #2
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 f91d 	bl	8004518 <VL6180_I2CWrite>
 80042de:	0003      	movs	r3, r0
 80042e0:	617b      	str	r3, [r7, #20]
    if( !status ){
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10f      	bne.n	8004308 <VL6180_RdByte+0x6c>
        status=VL6180_I2CRead(dev, buffer,1);
 80042e8:	6939      	ldr	r1, [r7, #16]
 80042ea:	1dfb      	adds	r3, r7, #7
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	0018      	movs	r0, r3
 80042f2:	f000 f8ed 	bl	80044d0 <VL6180_I2CRead>
 80042f6:	0003      	movs	r3, r0
 80042f8:	617b      	str	r3, [r7, #20]
        if( !status ){
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d103      	bne.n	8004308 <VL6180_RdByte+0x6c>
            *data=buffer[0];
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	781a      	ldrb	r2, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	701a      	strb	r2, [r3, #0]
        }
    }
    VL6180_DoneI2CAcces(dev);

    return status;
 8004308:	697b      	ldr	r3, [r7, #20]
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b006      	add	sp, #24
 8004310:	bd80      	pop	{r7, pc}

08004312 <VL6180_RdWord>:

int VL6180_RdWord(VL6180Dev_t dev, uint16_t index, uint16_t *data){
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	603a      	str	r2, [r7, #0]
 800431a:	1dfb      	adds	r3, r7, #7
 800431c:	1c02      	adds	r2, r0, #0
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	1c0a      	adds	r2, r1, #0
 8004324:	801a      	strh	r2, [r3, #0]
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180_GetI2CAccess(dev);

    buffer=VL6180_GetI2cBuffer(dev,2);
 8004326:	2308      	movs	r3, #8
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	613b      	str	r3, [r7, #16]
    buffer[0]=index>>8;
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	b29b      	uxth	r3, r3
 8004334:	b2da      	uxtb	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3301      	adds	r3, #1
 800433e:	1d3a      	adds	r2, r7, #4
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

    status=VL6180_I2CWrite(dev, buffer, (uint8_t)2);
 8004346:	6939      	ldr	r1, [r7, #16]
 8004348:	1dfb      	adds	r3, r7, #7
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2202      	movs	r2, #2
 800434e:	0018      	movs	r0, r3
 8004350:	f000 f8e2 	bl	8004518 <VL6180_I2CWrite>
 8004354:	0003      	movs	r3, r0
 8004356:	617b      	str	r3, [r7, #20]
    if( !status){
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d118      	bne.n	8004390 <VL6180_RdWord+0x7e>
        status=VL6180_I2CRead(dev, buffer,2);
 800435e:	6939      	ldr	r1, [r7, #16]
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2202      	movs	r2, #2
 8004366:	0018      	movs	r0, r3
 8004368:	f000 f8b2 	bl	80044d0 <VL6180_I2CRead>
 800436c:	0003      	movs	r3, r0
 800436e:	617b      	str	r3, [r7, #20]
        if( !status ){
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10c      	bne.n	8004390 <VL6180_RdWord+0x7e>
            /* VL6180 register are Big endian if cpu is be direct read direct into *data is possible */
            *data=((uint16_t)buffer[0]<<8)|(uint16_t)buffer[1];
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	b21a      	sxth	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	3301      	adds	r3, #1
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b21b      	sxth	r3, r3
 8004386:	4313      	orrs	r3, r2
 8004388:	b21b      	sxth	r3, r3
 800438a:	b29a      	uxth	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	801a      	strh	r2, [r3, #0]
        }
    }
    VL6180_DoneI2CAcces(dev);
    return status;
 8004390:	697b      	ldr	r3, [r7, #20]
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b006      	add	sp, #24
 8004398:	bd80      	pop	{r7, pc}

0800439a <VL6180_RdDWord>:

int  VL6180_RdDWord(VL6180Dev_t dev, uint16_t index, uint32_t *data){
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	603a      	str	r2, [r7, #0]
 80043a2:	1dfb      	adds	r3, r7, #7
 80043a4:	1c02      	adds	r2, r0, #0
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	1c0a      	adds	r2, r1, #0
 80043ac:	801a      	strh	r2, [r3, #0]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180_GetI2CAccess(dev);
    buffer=VL6180_GetI2cBuffer(dev,4);
 80043ae:	2308      	movs	r3, #8
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	613b      	str	r3, [r7, #16]

    buffer[0]=index>>8;
 80043b4:	1d3b      	adds	r3, r7, #4
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	1d3a      	adds	r2, r7, #4
 80043c8:	8812      	ldrh	r2, [r2, #0]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

    status=VL6180_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 80043ce:	6939      	ldr	r1, [r7, #16]
 80043d0:	1dfb      	adds	r3, r7, #7
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2202      	movs	r2, #2
 80043d6:	0018      	movs	r0, r3
 80043d8:	f000 f89e 	bl	8004518 <VL6180_I2CWrite>
 80043dc:	0003      	movs	r3, r0
 80043de:	617b      	str	r3, [r7, #20]
    if( !status ){
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11e      	bne.n	8004424 <VL6180_RdDWord+0x8a>
        status=VL6180_I2CRead(dev, buffer,4);
 80043e6:	6939      	ldr	r1, [r7, #16]
 80043e8:	1dfb      	adds	r3, r7, #7
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2204      	movs	r2, #4
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 f86e 	bl	80044d0 <VL6180_I2CRead>
 80043f4:	0003      	movs	r3, r0
 80043f6:	617b      	str	r3, [r7, #20]
        if( !status ){
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d112      	bne.n	8004424 <VL6180_RdDWord+0x8a>
            /* VL6180 register are Big endian if cpu is be direct read direct into data is possible */
            *data=((uint32_t)buffer[0]<<24)|((uint32_t)buffer[1]<<16)|((uint32_t)buffer[2]<<8)|((uint32_t)buffer[3]);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	061a      	lsls	r2, r3, #24
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	3301      	adds	r3, #1
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	3302      	adds	r3, #2
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	4313      	orrs	r3, r2
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	3203      	adds	r2, #3
 800441c:	7812      	ldrb	r2, [r2, #0]
 800441e:	431a      	orrs	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	601a      	str	r2, [r3, #0]
        }
    }
    VL6180_DoneI2CAcces(dev);
    return status;
 8004424:	697b      	ldr	r3, [r7, #20]
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b006      	add	sp, #24
 800442c:	bd80      	pop	{r7, pc}

0800442e <VL6180_RdMulti>:


int  VL6180_RdMulti(VL6180Dev_t dev, uint16_t index, uint8_t *data, int nData){
 800442e:	b590      	push	{r4, r7, lr}
 8004430:	b089      	sub	sp, #36	; 0x24
 8004432:	af00      	add	r7, sp, #0
 8004434:	60ba      	str	r2, [r7, #8]
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	240f      	movs	r4, #15
 800443a:	193b      	adds	r3, r7, r4
 800443c:	1c02      	adds	r2, r0, #0
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	200c      	movs	r0, #12
 8004442:	183b      	adds	r3, r7, r0
 8004444:	1c0a      	adds	r2, r1, #0
 8004446:	801a      	strh	r2, [r3, #0]
    int status;
    uint8_t *buffer;
    DECL_I2C_BUFFER

    VL6180_GetI2CAccess(dev);
    buffer=VL6180_GetI2cBuffer(dev,2);
 8004448:	2310      	movs	r3, #16
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	61bb      	str	r3, [r7, #24]

    buffer[0]=index>>8;
 800444e:	0001      	movs	r1, r0
 8004450:	187b      	adds	r3, r7, r1
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	b29b      	uxth	r3, r3
 8004458:	b2da      	uxtb	r2, r3
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	701a      	strb	r2, [r3, #0]
    buffer[1]=index&0xFF;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	3301      	adds	r3, #1
 8004462:	187a      	adds	r2, r7, r1
 8004464:	8812      	ldrh	r2, [r2, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    status=VL6180_I2CWrite(dev, (uint8_t *) buffer, (uint8_t)2);
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	193b      	adds	r3, r7, r4
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2202      	movs	r2, #2
 8004472:	0018      	movs	r0, r3
 8004474:	f000 f850 	bl	8004518 <VL6180_I2CWrite>
 8004478:	0003      	movs	r3, r0
 800447a:	61fb      	str	r3, [r7, #28]
    if( !status ){
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <VL6180_RdMulti+0x68>
        status=VL6180_I2CRead(dev, data, nData);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	193b      	adds	r3, r7, r4
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	0018      	movs	r0, r3
 800448e:	f000 f81f 	bl	80044d0 <VL6180_I2CRead>
 8004492:	0003      	movs	r3, r0
 8004494:	61fb      	str	r3, [r7, #28]
    }
    VL6180_DoneI2CAcces(dev);
    return status;
 8004496:	69fb      	ldr	r3, [r7, #28]
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	b009      	add	sp, #36	; 0x24
 800449e:	bd90      	pop	{r4, r7, pc}

080044a0 <RegisterI2CHandler>:
// Functions defined by us

// Need to call Register I2CHandler before doing anything

I2C_HandleTypeDef* i2cHandler;
void RegisterI2CHandler(I2C_HandleTypeDef* handler){
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	i2cHandler = handler;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <RegisterI2CHandler+0x18>)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b002      	add	sp, #8
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	200001ac 	.word	0x200001ac

080044bc <GetI2CHandler>:



I2C_HandleTypeDef* GetI2CHandler(void){
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
	assert_param(i2cHandler != NULL);
	return i2cHandler;
 80044c0:	4b02      	ldr	r3, [pc, #8]	; (80044cc <GetI2CHandler+0x10>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	200001ac 	.word	0x200001ac

080044d0 <VL6180_I2CRead>:


int VL6180_I2CRead(VL6180Dev_t dev, uint8_t *buff, uint8_t len) {
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	6039      	str	r1, [r7, #0]
 80044d8:	0011      	movs	r1, r2
 80044da:	1dfb      	adds	r3, r7, #7
 80044dc:	1c02      	adds	r2, r0, #0
 80044de:	701a      	strb	r2, [r3, #0]
 80044e0:	1dbb      	adds	r3, r7, #6
 80044e2:	1c0a      	adds	r2, r1, #0
 80044e4:	701a      	strb	r2, [r3, #0]

	i2cHandler = GetI2CHandler();
 80044e6:	f7ff ffe9 	bl	80044bc <GetI2CHandler>
 80044ea:	0002      	movs	r2, r0
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <VL6180_I2CRead+0x44>)
 80044ee:	601a      	str	r2, [r3, #0]

	return HAL_I2C_Master_Receive(i2cHandler, dev, buff, len, 20);
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <VL6180_I2CRead+0x44>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	1dfb      	adds	r3, r7, #7
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b299      	uxth	r1, r3
 80044fa:	1dbb      	adds	r3, r7, #6
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	2414      	movs	r4, #20
 8004504:	9400      	str	r4, [sp, #0]
 8004506:	f001 f983 	bl	8005810 <HAL_I2C_Master_Receive>
 800450a:	0003      	movs	r3, r0



}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	b003      	add	sp, #12
 8004512:	bd90      	pop	{r4, r7, pc}
 8004514:	200001ac 	.word	0x200001ac

08004518 <VL6180_I2CWrite>:

int  VL6180_I2CWrite(VL6180Dev_t dev, uint8_t  *buff, uint8_t len){
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b085      	sub	sp, #20
 800451c:	af02      	add	r7, sp, #8
 800451e:	6039      	str	r1, [r7, #0]
 8004520:	0011      	movs	r1, r2
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	1c02      	adds	r2, r0, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	1dbb      	adds	r3, r7, #6
 800452a:	1c0a      	adds	r2, r1, #0
 800452c:	701a      	strb	r2, [r3, #0]
	i2cHandler = GetI2CHandler();
 800452e:	f7ff ffc5 	bl	80044bc <GetI2CHandler>
 8004532:	0002      	movs	r2, r0
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <VL6180_I2CWrite+0x44>)
 8004536:	601a      	str	r2, [r3, #0]

	return HAL_I2C_Master_Transmit(i2cHandler, dev, buff, len, 20);
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <VL6180_I2CWrite+0x44>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	1dfb      	adds	r3, r7, #7
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b299      	uxth	r1, r3
 8004542:	1dbb      	adds	r3, r7, #6
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	2414      	movs	r4, #20
 800454c:	9400      	str	r4, [sp, #0]
 800454e:	f001 f857 	bl	8005600 <HAL_I2C_Master_Transmit>
 8004552:	0003      	movs	r3, r0

}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b003      	add	sp, #12
 800455a:	bd90      	pop	{r4, r7, pc}
 800455c:	200001ac 	.word	0x200001ac

08004560 <VL6180_PollDelay>:
#include "../inc/vl6180_platform.h"

// This file contains some functions that need implementations from the vl6180_plaform header file


void VL6180_PollDelay(VL6180Dev_t dev) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	0002      	movs	r2, r0
 8004568:	1dfb      	adds	r3, r7, #7
 800456a:	701a      	strb	r2, [r3, #0]
  // Delay by 1 ms according to the specifications
	HAL_Delay(1);
 800456c:	2001      	movs	r0, #1
 800456e:	f000 f893 	bl	8004698 <HAL_Delay>
}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	b002      	add	sp, #8
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800457c:	480d      	ldr	r0, [pc, #52]	; (80045b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800457e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004580:	480d      	ldr	r0, [pc, #52]	; (80045b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004582:	490e      	ldr	r1, [pc, #56]	; (80045bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004584:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <LoopForever+0xe>)
  movs r3, #0
 8004586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004588:	e002      	b.n	8004590 <LoopCopyDataInit>

0800458a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800458a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800458c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800458e:	3304      	adds	r3, #4

08004590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004594:	d3f9      	bcc.n	800458a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004598:	4c0b      	ldr	r4, [pc, #44]	; (80045c8 <LoopForever+0x16>)
  movs r3, #0
 800459a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800459c:	e001      	b.n	80045a2 <LoopFillZerobss>

0800459e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800459e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045a0:	3204      	adds	r2, #4

080045a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045a4:	d3fb      	bcc.n	800459e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80045a6:	f7fd fc79 	bl	8001e9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80045aa:	f003 f96f 	bl	800788c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045ae:	f7fd f829 	bl	8001604 <main>

080045b2 <LoopForever>:

LoopForever:
    b LoopForever
 80045b2:	e7fe      	b.n	80045b2 <LoopForever>
  ldr   r0, =_estack
 80045b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80045b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045bc:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80045c0:	08007a3c 	.word	0x08007a3c
  ldr r2, =_sbss
 80045c4:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80045c8:	200001b4 	.word	0x200001b4

080045cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045cc:	e7fe      	b.n	80045cc <ADC1_COMP_IRQHandler>
	...

080045d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_Init+0x24>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_Init+0x24>)
 80045da:	2110      	movs	r1, #16
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f000 f809 	bl	80045f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045e6:	f7fd fb51 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	40022000 	.word	0x40022000

080045f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004600:	4b14      	ldr	r3, [pc, #80]	; (8004654 <HAL_InitTick+0x5c>)
 8004602:	681c      	ldr	r4, [r3, #0]
 8004604:	4b14      	ldr	r3, [pc, #80]	; (8004658 <HAL_InitTick+0x60>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	0019      	movs	r1, r3
 800460a:	23fa      	movs	r3, #250	; 0xfa
 800460c:	0098      	lsls	r0, r3, #2
 800460e:	f7fb fd7b 	bl	8000108 <__udivsi3>
 8004612:	0003      	movs	r3, r0
 8004614:	0019      	movs	r1, r3
 8004616:	0020      	movs	r0, r4
 8004618:	f7fb fd76 	bl	8000108 <__udivsi3>
 800461c:	0003      	movs	r3, r0
 800461e:	0018      	movs	r0, r3
 8004620:	f000 fda1 	bl	8005166 <HAL_SYSTICK_Config>
 8004624:	1e03      	subs	r3, r0, #0
 8004626:	d001      	beq.n	800462c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e00f      	b.n	800464c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b03      	cmp	r3, #3
 8004630:	d80b      	bhi.n	800464a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	2301      	movs	r3, #1
 8004636:	425b      	negs	r3, r3
 8004638:	2200      	movs	r2, #0
 800463a:	0018      	movs	r0, r3
 800463c:	f000 fd6e 	bl	800511c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_InitTick+0x64>)
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e000      	b.n	800464c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
}
 800464c:	0018      	movs	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	b003      	add	sp, #12
 8004652:	bd90      	pop	{r4, r7, pc}
 8004654:	20000004 	.word	0x20000004
 8004658:	200000d8 	.word	0x200000d8
 800465c:	200000d4 	.word	0x200000d4

08004660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_IncTick+0x1c>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	001a      	movs	r2, r3
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_IncTick+0x20>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	18d2      	adds	r2, r2, r3
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_IncTick+0x20>)
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	200000d8 	.word	0x200000d8
 8004680:	200001b0 	.word	0x200001b0

08004684 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  return uwTick;
 8004688:	4b02      	ldr	r3, [pc, #8]	; (8004694 <HAL_GetTick+0x10>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	200001b0 	.word	0x200001b0

08004698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7ff fff0 	bl	8004684 <HAL_GetTick>
 80046a4:	0003      	movs	r3, r0
 80046a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3301      	adds	r3, #1
 80046b0:	d005      	beq.n	80046be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_Delay+0x44>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	001a      	movs	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	f7ff ffe0 	bl	8004684 <HAL_GetTick>
 80046c4:	0002      	movs	r2, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d8f7      	bhi.n	80046c0 <HAL_Delay+0x28>
  {
  }
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b004      	add	sp, #16
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	200000d8 	.word	0x200000d8

080046e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e8:	230f      	movs	r3, #15
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e125      	b.n	800494a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2234      	movs	r2, #52	; 0x34
 8004710:	2100      	movs	r1, #0
 8004712:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	0018      	movs	r0, r3
 8004718:	f7fd fadc 	bl	8001cd4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	2210      	movs	r2, #16
 8004722:	4013      	ands	r3, r2
 8004724:	d000      	beq.n	8004728 <HAL_ADC_Init+0x48>
 8004726:	e103      	b.n	8004930 <HAL_ADC_Init+0x250>
 8004728:	230f      	movs	r3, #15
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d000      	beq.n	8004734 <HAL_ADC_Init+0x54>
 8004732:	e0fd      	b.n	8004930 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2204      	movs	r2, #4
 800473c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800473e:	d000      	beq.n	8004742 <HAL_ADC_Init+0x62>
 8004740:	e0f6      	b.n	8004930 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	4a83      	ldr	r2, [pc, #524]	; (8004954 <HAL_ADC_Init+0x274>)
 8004748:	4013      	ands	r3, r2
 800474a:	2202      	movs	r2, #2
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2203      	movs	r2, #3
 800475a:	4013      	ands	r3, r2
 800475c:	2b01      	cmp	r3, #1
 800475e:	d112      	bne.n	8004786 <HAL_ADC_Init+0xa6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	4013      	ands	r3, r2
 800476a:	2b01      	cmp	r3, #1
 800476c:	d009      	beq.n	8004782 <HAL_ADC_Init+0xa2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	401a      	ands	r2, r3
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	429a      	cmp	r2, r3
 8004780:	d101      	bne.n	8004786 <HAL_ADC_Init+0xa6>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_ADC_Init+0xa8>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d116      	bne.n	80047ba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2218      	movs	r2, #24
 8004794:	4393      	bics	r3, r2
 8004796:	0019      	movs	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	0899      	lsrs	r1, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4964      	ldr	r1, [pc, #400]	; (8004958 <HAL_ADC_Init+0x278>)
 80047c6:	400a      	ands	r2, r1
 80047c8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7e1b      	ldrb	r3, [r3, #24]
 80047ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7e5b      	ldrb	r3, [r3, #25]
 80047d4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7e9b      	ldrb	r3, [r3, #26]
 80047dc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80047de:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d002      	beq.n	80047ee <HAL_ADC_Init+0x10e>
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	015b      	lsls	r3, r3, #5
 80047ec:	e000      	b.n	80047f0 <HAL_ADC_Init+0x110>
 80047ee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80047f0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80047f6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d101      	bne.n	8004804 <HAL_ADC_Init+0x124>
 8004800:	2304      	movs	r3, #4
 8004802:	e000      	b.n	8004806 <HAL_ADC_Init+0x126>
 8004804:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004806:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2124      	movs	r1, #36	; 0x24
 800480c:	5c5b      	ldrb	r3, [r3, r1]
 800480e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004810:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	4313      	orrs	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	7edb      	ldrb	r3, [r3, #27]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d115      	bne.n	800484c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	7e9b      	ldrb	r3, [r3, #26]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2280      	movs	r2, #128	; 0x80
 800482c:	0252      	lsls	r2, r2, #9
 800482e:	4313      	orrs	r3, r2
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	e00b      	b.n	800484c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	2220      	movs	r2, #32
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	2201      	movs	r2, #1
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	23c2      	movs	r3, #194	; 0xc2
 8004852:	33ff      	adds	r3, #255	; 0xff
 8004854:	429a      	cmp	r2, r3
 8004856:	d007      	beq.n	8004868 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004860:	4313      	orrs	r3, r2
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	4313      	orrs	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68d9      	ldr	r1, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	430a      	orrs	r2, r1
 8004876:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	055b      	lsls	r3, r3, #21
 8004880:	429a      	cmp	r2, r3
 8004882:	d01b      	beq.n	80048bc <HAL_ADC_Init+0x1dc>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d017      	beq.n	80048bc <HAL_ADC_Init+0x1dc>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	2b02      	cmp	r3, #2
 8004892:	d013      	beq.n	80048bc <HAL_ADC_Init+0x1dc>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	2b03      	cmp	r3, #3
 800489a:	d00f      	beq.n	80048bc <HAL_ADC_Init+0x1dc>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d00b      	beq.n	80048bc <HAL_ADC_Init+0x1dc>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2b05      	cmp	r3, #5
 80048aa:	d007      	beq.n	80048bc <HAL_ADC_Init+0x1dc>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2b06      	cmp	r3, #6
 80048b2:	d003      	beq.n	80048bc <HAL_ADC_Init+0x1dc>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	2b07      	cmp	r3, #7
 80048ba:	d112      	bne.n	80048e2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2107      	movs	r1, #7
 80048c8:	438a      	bics	r2, r1
 80048ca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6959      	ldr	r1, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	2207      	movs	r2, #7
 80048d8:	401a      	ands	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a1c      	ldr	r2, [pc, #112]	; (800495c <HAL_ADC_Init+0x27c>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d10b      	bne.n	800490a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	2203      	movs	r2, #3
 80048fe:	4393      	bics	r3, r2
 8004900:	2201      	movs	r2, #1
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004908:	e01c      	b.n	8004944 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	2212      	movs	r2, #18
 8004910:	4393      	bics	r3, r2
 8004912:	2210      	movs	r2, #16
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	2201      	movs	r2, #1
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004926:	230f      	movs	r3, #15
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	2201      	movs	r2, #1
 800492c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800492e:	e009      	b.n	8004944 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	2210      	movs	r2, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800493c:	230f      	movs	r3, #15
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004944:	230f      	movs	r3, #15
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	781b      	ldrb	r3, [r3, #0]
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b004      	add	sp, #16
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	fffffefd 	.word	0xfffffefd
 8004958:	fffe0219 	.word	0xfffe0219
 800495c:	833fffe7 	.word	0x833fffe7

08004960 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004968:	230f      	movs	r3, #15
 800496a:	18fb      	adds	r3, r7, r3
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2204      	movs	r2, #4
 8004978:	4013      	ands	r3, r2
 800497a:	d138      	bne.n	80049ee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2234      	movs	r2, #52	; 0x34
 8004980:	5c9b      	ldrb	r3, [r3, r2]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_ADC_Start+0x2a>
 8004986:	2302      	movs	r3, #2
 8004988:	e038      	b.n	80049fc <HAL_ADC_Start+0x9c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2234      	movs	r2, #52	; 0x34
 800498e:	2101      	movs	r1, #1
 8004990:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7e5b      	ldrb	r3, [r3, #25]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d007      	beq.n	80049aa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800499a:	230f      	movs	r3, #15
 800499c:	18fc      	adds	r4, r7, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f000 f9e3 	bl	8004d6c <ADC_Enable>
 80049a6:	0003      	movs	r3, r0
 80049a8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049aa:	230f      	movs	r3, #15
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d120      	bne.n	80049f6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	4a12      	ldr	r2, [pc, #72]	; (8004a04 <HAL_ADC_Start+0xa4>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	2280      	movs	r2, #128	; 0x80
 80049be:	0052      	lsls	r2, r2, #1
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2234      	movs	r2, #52	; 0x34
 80049d0:	2100      	movs	r1, #0
 80049d2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	221c      	movs	r2, #28
 80049da:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2104      	movs	r1, #4
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	e003      	b.n	80049f6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049ee:	230f      	movs	r3, #15
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	2202      	movs	r2, #2
 80049f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80049f6:	230f      	movs	r3, #15
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	781b      	ldrb	r3, [r3, #0]
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b005      	add	sp, #20
 8004a02:	bd90      	pop	{r4, r7, pc}
 8004a04:	fffff0fe 	.word	0xfffff0fe

08004a08 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d102      	bne.n	8004a20 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e014      	b.n	8004a4a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d10b      	bne.n	8004a46 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	2220      	movs	r2, #32
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2234      	movs	r2, #52	; 0x34
 8004a3e:	2100      	movs	r1, #0
 8004a40:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e071      	b.n	8004b2a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004a46:	230c      	movs	r3, #12
 8004a48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004a4a:	f7ff fe1b 	bl	8004684 <HAL_GetTick>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004a52:	e01f      	b.n	8004a94 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	d01c      	beq.n	8004a94 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_ADC_PollForConversion+0x68>
 8004a60:	f7ff fe10 	bl	8004684 <HAL_GetTick>
 8004a64:	0002      	movs	r2, r0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d211      	bcs.n	8004a94 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d10b      	bne.n	8004a94 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	2204      	movs	r2, #4
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2234      	movs	r2, #52	; 0x34
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e04a      	b.n	8004b2a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d0d9      	beq.n	8004a54 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	2280      	movs	r2, #128	; 0x80
 8004aa6:	0092      	lsls	r2, r2, #2
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	23c0      	movs	r3, #192	; 0xc0
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d12d      	bne.n	8004b18 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d129      	bne.n	8004b18 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2208      	movs	r2, #8
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d122      	bne.n	8004b18 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	4013      	ands	r3, r2
 8004adc:	d110      	bne.n	8004b00 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	210c      	movs	r1, #12
 8004aea:	438a      	bics	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <HAL_ADC_PollForConversion+0x12c>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	2201      	movs	r2, #1
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38
 8004afe:	e00b      	b.n	8004b18 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	2220      	movs	r2, #32
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	2201      	movs	r2, #1
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7e1b      	ldrb	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	220c      	movs	r2, #12
 8004b26:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b004      	add	sp, #16
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	fffffefe 	.word	0xfffffefe

08004b38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b002      	add	sp, #8
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b5a:	230f      	movs	r3, #15
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	055b      	lsls	r3, r3, #21
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d011      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x46>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d00d      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x46>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d009      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x46>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d005      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x46>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d001      	beq.n	8004b96 <HAL_ADC_ConfigChannel+0x46>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2234      	movs	r2, #52	; 0x34
 8004b9a:	5c9b      	ldrb	r3, [r3, r2]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x54>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e0d0      	b.n	8004d46 <HAL_ADC_ConfigChannel+0x1f6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2234      	movs	r2, #52	; 0x34
 8004ba8:	2101      	movs	r1, #1
 8004baa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d000      	beq.n	8004bba <HAL_ADC_ConfigChannel+0x6a>
 8004bb8:	e0b4      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4a64      	ldr	r2, [pc, #400]	; (8004d50 <HAL_ADC_ConfigChannel+0x200>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d100      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x76>
 8004bc4:	e082      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	055b      	lsls	r3, r3, #21
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d037      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d033      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d02f      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d02b      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d027      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d023      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	2b06      	cmp	r3, #6
 8004c16:	d01f      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	2b07      	cmp	r3, #7
 8004c1e:	d01b      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	2107      	movs	r1, #7
 8004c2c:	400b      	ands	r3, r1
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d012      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2107      	movs	r1, #7
 8004c3e:	438a      	bics	r2, r1
 8004c40:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6959      	ldr	r1, [r3, #20]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2207      	movs	r2, #7
 8004c4e:	401a      	ands	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d007      	beq.n	8004c70 <HAL_ADC_ConfigChannel+0x120>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b11      	cmp	r3, #17
 8004c66:	d003      	beq.n	8004c70 <HAL_ADC_ConfigChannel+0x120>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b12      	cmp	r3, #18
 8004c6e:	d163      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004c70:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <HAL_ADC_ConfigChannel+0x204>)
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d009      	beq.n	8004c90 <HAL_ADC_ConfigChannel+0x140>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b11      	cmp	r3, #17
 8004c82:	d102      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x13a>
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	03db      	lsls	r3, r3, #15
 8004c88:	e004      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x144>
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	045b      	lsls	r3, r3, #17
 8004c8e:	e001      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x144>
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	4a2f      	ldr	r2, [pc, #188]	; (8004d54 <HAL_ADC_ConfigChannel+0x204>)
 8004c96:	430b      	orrs	r3, r1
 8004c98:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b10      	cmp	r3, #16
 8004ca0:	d14a      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ca2:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <HAL_ADC_ConfigChannel+0x208>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <HAL_ADC_ConfigChannel+0x20c>)
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7fb fa2d 	bl	8000108 <__udivsi3>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	0013      	movs	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	189b      	adds	r3, r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004cbc:	e002      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f9      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x16e>
 8004cca:	e035      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4099      	lsls	r1, r3
 8004cda:	000b      	movs	r3, r1
 8004cdc:	43d9      	mvns	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d007      	beq.n	8004cfe <HAL_ADC_ConfigChannel+0x1ae>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b11      	cmp	r3, #17
 8004cf4:	d003      	beq.n	8004cfe <HAL_ADC_ConfigChannel+0x1ae>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b12      	cmp	r3, #18
 8004cfc:	d11c      	bne.n	8004d38 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_ADC_ConfigChannel+0x204>)
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d007      	beq.n	8004d1a <HAL_ADC_ConfigChannel+0x1ca>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b11      	cmp	r3, #17
 8004d10:	d101      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x1c6>
 8004d12:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <HAL_ADC_ConfigChannel+0x210>)
 8004d14:	e002      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x1cc>
 8004d16:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_ADC_ConfigChannel+0x214>)
 8004d18:	e000      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x1cc>
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_ADC_ConfigChannel+0x218>)
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <HAL_ADC_ConfigChannel+0x204>)
 8004d1e:	400b      	ands	r3, r1
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e009      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	2220      	movs	r2, #32
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004d30:	230f      	movs	r3, #15
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2234      	movs	r2, #52	; 0x34
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004d40:	230f      	movs	r3, #15
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	781b      	ldrb	r3, [r3, #0]
}
 8004d46:	0018      	movs	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b004      	add	sp, #16
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	00001001 	.word	0x00001001
 8004d54:	40012708 	.word	0x40012708
 8004d58:	20000004 	.word	0x20000004
 8004d5c:	000f4240 	.word	0x000f4240
 8004d60:	ffbfffff 	.word	0xffbfffff
 8004d64:	feffffff 	.word	0xfeffffff
 8004d68:	ff7fffff 	.word	0xff7fffff

08004d6c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2203      	movs	r2, #3
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d112      	bne.n	8004db0 <ADC_Enable+0x44>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2201      	movs	r2, #1
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d009      	beq.n	8004dac <ADC_Enable+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	401a      	ands	r2, r3
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d101      	bne.n	8004db0 <ADC_Enable+0x44>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <ADC_Enable+0x46>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d152      	bne.n	8004e5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <ADC_Enable+0xfc>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d00d      	beq.n	8004dde <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e03f      	b.n	8004e5e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2101      	movs	r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004dee:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <ADC_Enable+0x100>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	491f      	ldr	r1, [pc, #124]	; (8004e70 <ADC_Enable+0x104>)
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7fb f987 	bl	8000108 <__udivsi3>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004dfe:	e002      	b.n	8004e06 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f9      	bne.n	8004e00 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e0c:	f7ff fc3a 	bl	8004684 <HAL_GetTick>
 8004e10:	0003      	movs	r3, r0
 8004e12:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e14:	e01b      	b.n	8004e4e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e16:	f7ff fc35 	bl	8004684 <HAL_GetTick>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d914      	bls.n	8004e4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d00d      	beq.n	8004e4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	2210      	movs	r2, #16
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	2201      	movs	r2, #1
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e007      	b.n	8004e5e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2201      	movs	r2, #1
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d1dc      	bne.n	8004e16 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	0018      	movs	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b004      	add	sp, #16
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	80000017 	.word	0x80000017
 8004e6c:	20000004 	.word	0x20000004
 8004e70:	000f4240 	.word	0x000f4240

08004e74 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e7c:	2317      	movs	r3, #23
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2234      	movs	r2, #52	; 0x34
 8004e90:	5c9b      	ldrb	r3, [r3, r2]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_ADCEx_Calibration_Start+0x26>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e08d      	b.n	8004fb6 <HAL_ADCEx_Calibration_Start+0x142>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2234      	movs	r2, #52	; 0x34
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d112      	bne.n	8004ed6 <HAL_ADCEx_Calibration_Start+0x62>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d009      	beq.n	8004ed2 <HAL_ADCEx_Calibration_Start+0x5e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	401a      	ands	r2, r3
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d101      	bne.n	8004ed6 <HAL_ADCEx_Calibration_Start+0x62>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_ADCEx_Calibration_Start+0x64>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d15b      	bne.n	8004f94 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	4a37      	ldr	r2, [pc, #220]	; (8004fc0 <HAL_ADCEx_Calibration_Start+0x14c>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2103      	movs	r1, #3
 8004f04:	438a      	bics	r2, r1
 8004f06:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	0609      	lsls	r1, r1, #24
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004f1a:	f7ff fbb3 	bl	8004684 <HAL_GetTick>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004f22:	e01d      	b.n	8004f60 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004f24:	f7ff fbae 	bl	8004684 <HAL_GetTick>
 8004f28:	0002      	movs	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d916      	bls.n	8004f60 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	0fdb      	lsrs	r3, r3, #31
 8004f3a:	07da      	lsls	r2, r3, #31
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d10d      	bne.n	8004f60 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f48:	2212      	movs	r2, #18
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2234      	movs	r2, #52	; 0x34
 8004f58:	2100      	movs	r1, #0
 8004f5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e02a      	b.n	8004fb6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	0fdb      	lsrs	r3, r3, #31
 8004f68:	07da      	lsls	r2, r3, #31
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	061b      	lsls	r3, r3, #24
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d0d8      	beq.n	8004f24 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68d9      	ldr	r1, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	2203      	movs	r2, #3
 8004f88:	4393      	bics	r3, r2
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
 8004f92:	e009      	b.n	8004fa8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	2220      	movs	r2, #32
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004fa0:	2317      	movs	r3, #23
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2234      	movs	r2, #52	; 0x34
 8004fac:	2100      	movs	r1, #0
 8004fae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004fb0:	2317      	movs	r3, #23
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	781b      	ldrb	r3, [r3, #0]
}
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b006      	add	sp, #24
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	fffffefd 	.word	0xfffffefd

08004fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	0002      	movs	r2, r0
 8004fcc:	1dfb      	adds	r3, r7, #7
 8004fce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fd0:	1dfb      	adds	r3, r7, #7
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd6:	d809      	bhi.n	8004fec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd8:	1dfb      	adds	r3, r7, #7
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	001a      	movs	r2, r3
 8004fde:	231f      	movs	r3, #31
 8004fe0:	401a      	ands	r2, r3
 8004fe2:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <__NVIC_EnableIRQ+0x30>)
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	4091      	lsls	r1, r2
 8004fe8:	000a      	movs	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]
  }
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	e000e100 	.word	0xe000e100

08004ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	0002      	movs	r2, r0
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b7f      	cmp	r3, #127	; 0x7f
 800500c:	d828      	bhi.n	8005060 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800500e:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <__NVIC_SetPriority+0xd4>)
 8005010:	1dfb      	adds	r3, r7, #7
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b25b      	sxtb	r3, r3
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	33c0      	adds	r3, #192	; 0xc0
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	589b      	ldr	r3, [r3, r2]
 800501e:	1dfa      	adds	r2, r7, #7
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	0011      	movs	r1, r2
 8005024:	2203      	movs	r2, #3
 8005026:	400a      	ands	r2, r1
 8005028:	00d2      	lsls	r2, r2, #3
 800502a:	21ff      	movs	r1, #255	; 0xff
 800502c:	4091      	lsls	r1, r2
 800502e:	000a      	movs	r2, r1
 8005030:	43d2      	mvns	r2, r2
 8005032:	401a      	ands	r2, r3
 8005034:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	019b      	lsls	r3, r3, #6
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	401a      	ands	r2, r3
 800503e:	1dfb      	adds	r3, r7, #7
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	0018      	movs	r0, r3
 8005044:	2303      	movs	r3, #3
 8005046:	4003      	ands	r3, r0
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800504c:	481f      	ldr	r0, [pc, #124]	; (80050cc <__NVIC_SetPriority+0xd4>)
 800504e:	1dfb      	adds	r3, r7, #7
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b25b      	sxtb	r3, r3
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	430a      	orrs	r2, r1
 8005058:	33c0      	adds	r3, #192	; 0xc0
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800505e:	e031      	b.n	80050c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <__NVIC_SetPriority+0xd8>)
 8005062:	1dfb      	adds	r3, r7, #7
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	0019      	movs	r1, r3
 8005068:	230f      	movs	r3, #15
 800506a:	400b      	ands	r3, r1
 800506c:	3b08      	subs	r3, #8
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	3306      	adds	r3, #6
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	18d3      	adds	r3, r2, r3
 8005076:	3304      	adds	r3, #4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1dfa      	adds	r2, r7, #7
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	0011      	movs	r1, r2
 8005080:	2203      	movs	r2, #3
 8005082:	400a      	ands	r2, r1
 8005084:	00d2      	lsls	r2, r2, #3
 8005086:	21ff      	movs	r1, #255	; 0xff
 8005088:	4091      	lsls	r1, r2
 800508a:	000a      	movs	r2, r1
 800508c:	43d2      	mvns	r2, r2
 800508e:	401a      	ands	r2, r3
 8005090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	22ff      	movs	r2, #255	; 0xff
 8005098:	401a      	ands	r2, r3
 800509a:	1dfb      	adds	r3, r7, #7
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	0018      	movs	r0, r3
 80050a0:	2303      	movs	r3, #3
 80050a2:	4003      	ands	r3, r0
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050a8:	4809      	ldr	r0, [pc, #36]	; (80050d0 <__NVIC_SetPriority+0xd8>)
 80050aa:	1dfb      	adds	r3, r7, #7
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	001c      	movs	r4, r3
 80050b0:	230f      	movs	r3, #15
 80050b2:	4023      	ands	r3, r4
 80050b4:	3b08      	subs	r3, #8
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	430a      	orrs	r2, r1
 80050ba:	3306      	adds	r3, #6
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	18c3      	adds	r3, r0, r3
 80050c0:	3304      	adds	r3, #4
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b003      	add	sp, #12
 80050ca:	bd90      	pop	{r4, r7, pc}
 80050cc:	e000e100 	.word	0xe000e100
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	045b      	lsls	r3, r3, #17
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d301      	bcc.n	80050ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050e8:	2301      	movs	r3, #1
 80050ea:	e010      	b.n	800510e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <SysTick_Config+0x44>)
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	3a01      	subs	r2, #1
 80050f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050f4:	2301      	movs	r3, #1
 80050f6:	425b      	negs	r3, r3
 80050f8:	2103      	movs	r1, #3
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff ff7c 	bl	8004ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <SysTick_Config+0x44>)
 8005102:	2200      	movs	r2, #0
 8005104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005106:	4b04      	ldr	r3, [pc, #16]	; (8005118 <SysTick_Config+0x44>)
 8005108:	2207      	movs	r2, #7
 800510a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800510c:	2300      	movs	r3, #0
}
 800510e:	0018      	movs	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	b002      	add	sp, #8
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	e000e010 	.word	0xe000e010

0800511c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	210f      	movs	r1, #15
 8005128:	187b      	adds	r3, r7, r1
 800512a:	1c02      	adds	r2, r0, #0
 800512c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	187b      	adds	r3, r7, r1
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	b25b      	sxtb	r3, r3
 8005136:	0011      	movs	r1, r2
 8005138:	0018      	movs	r0, r3
 800513a:	f7ff ff5d 	bl	8004ff8 <__NVIC_SetPriority>
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b004      	add	sp, #16
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	0002      	movs	r2, r0
 800514e:	1dfb      	adds	r3, r7, #7
 8005150:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005152:	1dfb      	adds	r3, r7, #7
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b25b      	sxtb	r3, r3
 8005158:	0018      	movs	r0, r3
 800515a:	f7ff ff33 	bl	8004fc4 <__NVIC_EnableIRQ>
}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b002      	add	sp, #8
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0018      	movs	r0, r3
 8005172:	f7ff ffaf 	bl	80050d4 <SysTick_Config>
 8005176:	0003      	movs	r3, r0
}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	b002      	add	sp, #8
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800518e:	e14f      	b.n	8005430 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2101      	movs	r1, #1
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4091      	lsls	r1, r2
 800519a:	000a      	movs	r2, r1
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d100      	bne.n	80051a8 <HAL_GPIO_Init+0x28>
 80051a6:	e140      	b.n	800542a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2203      	movs	r2, #3
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d005      	beq.n	80051c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2203      	movs	r2, #3
 80051ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d130      	bne.n	8005222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	2203      	movs	r2, #3
 80051cc:	409a      	lsls	r2, r3
 80051ce:	0013      	movs	r3, r2
 80051d0:	43da      	mvns	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	409a      	lsls	r2, r3
 80051e2:	0013      	movs	r3, r2
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051f6:	2201      	movs	r2, #1
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	409a      	lsls	r2, r3
 80051fc:	0013      	movs	r3, r2
 80051fe:	43da      	mvns	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4013      	ands	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	2201      	movs	r2, #1
 800520e:	401a      	ands	r2, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	409a      	lsls	r2, r3
 8005214:	0013      	movs	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2203      	movs	r2, #3
 8005228:	4013      	ands	r3, r2
 800522a:	2b03      	cmp	r3, #3
 800522c:	d017      	beq.n	800525e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2203      	movs	r2, #3
 800523a:	409a      	lsls	r2, r3
 800523c:	0013      	movs	r3, r2
 800523e:	43da      	mvns	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	409a      	lsls	r2, r3
 8005250:	0013      	movs	r3, r2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2203      	movs	r2, #3
 8005264:	4013      	ands	r3, r2
 8005266:	2b02      	cmp	r3, #2
 8005268:	d123      	bne.n	80052b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	08da      	lsrs	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3208      	adds	r2, #8
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	58d3      	ldr	r3, [r2, r3]
 8005276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2207      	movs	r2, #7
 800527c:	4013      	ands	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	220f      	movs	r2, #15
 8005282:	409a      	lsls	r2, r3
 8005284:	0013      	movs	r3, r2
 8005286:	43da      	mvns	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	691a      	ldr	r2, [r3, #16]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2107      	movs	r1, #7
 8005296:	400b      	ands	r3, r1
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	409a      	lsls	r2, r3
 800529c:	0013      	movs	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	08da      	lsrs	r2, r3, #3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3208      	adds	r2, #8
 80052ac:	0092      	lsls	r2, r2, #2
 80052ae:	6939      	ldr	r1, [r7, #16]
 80052b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	2203      	movs	r2, #3
 80052be:	409a      	lsls	r2, r3
 80052c0:	0013      	movs	r3, r2
 80052c2:	43da      	mvns	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4013      	ands	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2203      	movs	r2, #3
 80052d0:	401a      	ands	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	409a      	lsls	r2, r3
 80052d8:	0013      	movs	r3, r2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	23c0      	movs	r3, #192	; 0xc0
 80052ec:	029b      	lsls	r3, r3, #10
 80052ee:	4013      	ands	r3, r2
 80052f0:	d100      	bne.n	80052f4 <HAL_GPIO_Init+0x174>
 80052f2:	e09a      	b.n	800542a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052f4:	4b54      	ldr	r3, [pc, #336]	; (8005448 <HAL_GPIO_Init+0x2c8>)
 80052f6:	699a      	ldr	r2, [r3, #24]
 80052f8:	4b53      	ldr	r3, [pc, #332]	; (8005448 <HAL_GPIO_Init+0x2c8>)
 80052fa:	2101      	movs	r1, #1
 80052fc:	430a      	orrs	r2, r1
 80052fe:	619a      	str	r2, [r3, #24]
 8005300:	4b51      	ldr	r3, [pc, #324]	; (8005448 <HAL_GPIO_Init+0x2c8>)
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2201      	movs	r2, #1
 8005306:	4013      	ands	r3, r2
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800530c:	4a4f      	ldr	r2, [pc, #316]	; (800544c <HAL_GPIO_Init+0x2cc>)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	089b      	lsrs	r3, r3, #2
 8005312:	3302      	adds	r3, #2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	589b      	ldr	r3, [r3, r2]
 8005318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2203      	movs	r2, #3
 800531e:	4013      	ands	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	220f      	movs	r2, #15
 8005324:	409a      	lsls	r2, r3
 8005326:	0013      	movs	r3, r2
 8005328:	43da      	mvns	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	2390      	movs	r3, #144	; 0x90
 8005334:	05db      	lsls	r3, r3, #23
 8005336:	429a      	cmp	r2, r3
 8005338:	d013      	beq.n	8005362 <HAL_GPIO_Init+0x1e2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a44      	ldr	r2, [pc, #272]	; (8005450 <HAL_GPIO_Init+0x2d0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00d      	beq.n	800535e <HAL_GPIO_Init+0x1de>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a43      	ldr	r2, [pc, #268]	; (8005454 <HAL_GPIO_Init+0x2d4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d007      	beq.n	800535a <HAL_GPIO_Init+0x1da>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a42      	ldr	r2, [pc, #264]	; (8005458 <HAL_GPIO_Init+0x2d8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d101      	bne.n	8005356 <HAL_GPIO_Init+0x1d6>
 8005352:	2303      	movs	r3, #3
 8005354:	e006      	b.n	8005364 <HAL_GPIO_Init+0x1e4>
 8005356:	2305      	movs	r3, #5
 8005358:	e004      	b.n	8005364 <HAL_GPIO_Init+0x1e4>
 800535a:	2302      	movs	r3, #2
 800535c:	e002      	b.n	8005364 <HAL_GPIO_Init+0x1e4>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_GPIO_Init+0x1e4>
 8005362:	2300      	movs	r3, #0
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	2103      	movs	r1, #3
 8005368:	400a      	ands	r2, r1
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	4093      	lsls	r3, r2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005374:	4935      	ldr	r1, [pc, #212]	; (800544c <HAL_GPIO_Init+0x2cc>)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	3302      	adds	r3, #2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_GPIO_Init+0x2dc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	43da      	mvns	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4013      	ands	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	025b      	lsls	r3, r3, #9
 800539a:	4013      	ands	r3, r2
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80053a6:	4b2d      	ldr	r3, [pc, #180]	; (800545c <HAL_GPIO_Init+0x2dc>)
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80053ac:	4b2b      	ldr	r3, [pc, #172]	; (800545c <HAL_GPIO_Init+0x2dc>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	43da      	mvns	r2, r3
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4013      	ands	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	2380      	movs	r3, #128	; 0x80
 80053c2:	029b      	lsls	r3, r3, #10
 80053c4:	4013      	ands	r3, r2
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053d0:	4b22      	ldr	r3, [pc, #136]	; (800545c <HAL_GPIO_Init+0x2dc>)
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053d6:	4b21      	ldr	r3, [pc, #132]	; (800545c <HAL_GPIO_Init+0x2dc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	43da      	mvns	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4013      	ands	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	035b      	lsls	r3, r3, #13
 80053ee:	4013      	ands	r3, r2
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053fa:	4b18      	ldr	r3, [pc, #96]	; (800545c <HAL_GPIO_Init+0x2dc>)
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005400:	4b16      	ldr	r3, [pc, #88]	; (800545c <HAL_GPIO_Init+0x2dc>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	43da      	mvns	r2, r3
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4013      	ands	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	039b      	lsls	r3, r3, #14
 8005418:	4013      	ands	r3, r2
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005424:	4b0d      	ldr	r3, [pc, #52]	; (800545c <HAL_GPIO_Init+0x2dc>)
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	3301      	adds	r3, #1
 800542e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	40da      	lsrs	r2, r3
 8005438:	1e13      	subs	r3, r2, #0
 800543a:	d000      	beq.n	800543e <HAL_GPIO_Init+0x2be>
 800543c:	e6a8      	b.n	8005190 <HAL_GPIO_Init+0x10>
  } 
}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	46c0      	nop			; (mov r8, r8)
 8005442:	46bd      	mov	sp, r7
 8005444:	b006      	add	sp, #24
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	40010000 	.word	0x40010000
 8005450:	48000400 	.word	0x48000400
 8005454:	48000800 	.word	0x48000800
 8005458:	48000c00 	.word	0x48000c00
 800545c:	40010400 	.word	0x40010400

08005460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	0008      	movs	r0, r1
 800546a:	0011      	movs	r1, r2
 800546c:	1cbb      	adds	r3, r7, #2
 800546e:	1c02      	adds	r2, r0, #0
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	1c7b      	adds	r3, r7, #1
 8005474:	1c0a      	adds	r2, r1, #0
 8005476:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005478:	1c7b      	adds	r3, r7, #1
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005480:	1cbb      	adds	r3, r7, #2
 8005482:	881a      	ldrh	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005488:	e003      	b.n	8005492 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800548a:	1cbb      	adds	r3, r7, #2
 800548c:	881a      	ldrh	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b002      	add	sp, #8
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	0002      	movs	r2, r0
 80054a4:	1dbb      	adds	r3, r7, #6
 80054a6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	1dba      	adds	r2, r7, #6
 80054ae:	8812      	ldrh	r2, [r2, #0]
 80054b0:	4013      	ands	r3, r2
 80054b2:	d008      	beq.n	80054c6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054b6:	1dba      	adds	r2, r7, #6
 80054b8:	8812      	ldrh	r2, [r2, #0]
 80054ba:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054bc:	1dbb      	adds	r3, r7, #6
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	0018      	movs	r0, r3
 80054c2:	f7fc fcd3 	bl	8001e6c <HAL_GPIO_EXTI_Callback>
  }
}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b002      	add	sp, #8
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	40010400 	.word	0x40010400

080054d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e082      	b.n	80055ec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2241      	movs	r2, #65	; 0x41
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fc fc2f 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2241      	movs	r2, #65	; 0x41
 8005506:	2124      	movs	r1, #36	; 0x24
 8005508:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2101      	movs	r1, #1
 8005516:	438a      	bics	r2, r1
 8005518:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4934      	ldr	r1, [pc, #208]	; (80055f4 <HAL_I2C_Init+0x120>)
 8005524:	400a      	ands	r2, r1
 8005526:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4931      	ldr	r1, [pc, #196]	; (80055f8 <HAL_I2C_Init+0x124>)
 8005534:	400a      	ands	r2, r1
 8005536:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d108      	bne.n	8005552 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2180      	movs	r1, #128	; 0x80
 800554a:	0209      	lsls	r1, r1, #8
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]
 8005550:	e007      	b.n	8005562 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2184      	movs	r1, #132	; 0x84
 800555c:	0209      	lsls	r1, r1, #8
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d104      	bne.n	8005574 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	0112      	lsls	r2, r2, #4
 8005572:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	491f      	ldr	r1, [pc, #124]	; (80055fc <HAL_I2C_Init+0x128>)
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	491a      	ldr	r1, [pc, #104]	; (80055f8 <HAL_I2C_Init+0x124>)
 8005590:	400a      	ands	r2, r1
 8005592:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	431a      	orrs	r2, r3
 800559e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69d9      	ldr	r1, [r3, #28]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1a      	ldr	r2, [r3, #32]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2101      	movs	r1, #1
 80055ca:	430a      	orrs	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2241      	movs	r2, #65	; 0x41
 80055d8:	2120      	movs	r1, #32
 80055da:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2242      	movs	r2, #66	; 0x42
 80055e6:	2100      	movs	r1, #0
 80055e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b002      	add	sp, #8
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	f0ffffff 	.word	0xf0ffffff
 80055f8:	ffff7fff 	.word	0xffff7fff
 80055fc:	02008000 	.word	0x02008000

08005600 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b089      	sub	sp, #36	; 0x24
 8005604:	af02      	add	r7, sp, #8
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	0008      	movs	r0, r1
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	0019      	movs	r1, r3
 800560e:	230a      	movs	r3, #10
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	1c02      	adds	r2, r0, #0
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	2308      	movs	r3, #8
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	1c0a      	adds	r2, r1, #0
 800561c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2241      	movs	r2, #65	; 0x41
 8005622:	5c9b      	ldrb	r3, [r3, r2]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b20      	cmp	r3, #32
 8005628:	d000      	beq.n	800562c <HAL_I2C_Master_Transmit+0x2c>
 800562a:	e0e7      	b.n	80057fc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2240      	movs	r2, #64	; 0x40
 8005630:	5c9b      	ldrb	r3, [r3, r2]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_I2C_Master_Transmit+0x3a>
 8005636:	2302      	movs	r3, #2
 8005638:	e0e1      	b.n	80057fe <HAL_I2C_Master_Transmit+0x1fe>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2240      	movs	r2, #64	; 0x40
 800563e:	2101      	movs	r1, #1
 8005640:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005642:	f7ff f81f 	bl	8004684 <HAL_GetTick>
 8005646:	0003      	movs	r3, r0
 8005648:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	0219      	lsls	r1, r3, #8
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	2319      	movs	r3, #25
 8005656:	2201      	movs	r2, #1
 8005658:	f000 fe46 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 800565c:	1e03      	subs	r3, r0, #0
 800565e:	d001      	beq.n	8005664 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0cc      	b.n	80057fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2241      	movs	r2, #65	; 0x41
 8005668:	2121      	movs	r1, #33	; 0x21
 800566a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2242      	movs	r2, #66	; 0x42
 8005670:	2110      	movs	r1, #16
 8005672:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2208      	movs	r2, #8
 8005684:	18ba      	adds	r2, r7, r2
 8005686:	8812      	ldrh	r2, [r2, #0]
 8005688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	2bff      	cmp	r3, #255	; 0xff
 8005698:	d911      	bls.n	80056be <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	22ff      	movs	r2, #255	; 0xff
 800569e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	045c      	lsls	r4, r3, #17
 80056aa:	230a      	movs	r3, #10
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	8819      	ldrh	r1, [r3, #0]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	4b55      	ldr	r3, [pc, #340]	; (8005808 <HAL_I2C_Master_Transmit+0x208>)
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	0023      	movs	r3, r4
 80056b8:	f000 ffb6 	bl	8006628 <I2C_TransferConfig>
 80056bc:	e075      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	049c      	lsls	r4, r3, #18
 80056d2:	230a      	movs	r3, #10
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	8819      	ldrh	r1, [r3, #0]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	4b4b      	ldr	r3, [pc, #300]	; (8005808 <HAL_I2C_Master_Transmit+0x208>)
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	0023      	movs	r3, r4
 80056e0:	f000 ffa2 	bl	8006628 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80056e4:	e061      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f000 fe3a 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 80056f2:	1e03      	subs	r3, r0, #0
 80056f4:	d001      	beq.n	80056fa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e081      	b.n	80057fe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d03a      	beq.n	80057aa <HAL_I2C_Master_Transmit+0x1aa>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005738:	2b00      	cmp	r3, #0
 800573a:	d136      	bne.n	80057aa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800573c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	0013      	movs	r3, r2
 8005746:	2200      	movs	r2, #0
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	f000 fdcd 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 800574e:	1e03      	subs	r3, r0, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e053      	b.n	80057fe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2bff      	cmp	r3, #255	; 0xff
 800575e:	d911      	bls.n	8005784 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	22ff      	movs	r2, #255	; 0xff
 8005764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	b2da      	uxtb	r2, r3
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	045c      	lsls	r4, r3, #17
 8005770:	230a      	movs	r3, #10
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	8819      	ldrh	r1, [r3, #0]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	2300      	movs	r3, #0
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	0023      	movs	r3, r4
 800577e:	f000 ff53 	bl	8006628 <I2C_TransferConfig>
 8005782:	e012      	b.n	80057aa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005792:	b2da      	uxtb	r2, r3
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	049c      	lsls	r4, r3, #18
 8005798:	230a      	movs	r3, #10
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	8819      	ldrh	r1, [r3, #0]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	2300      	movs	r3, #0
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	0023      	movs	r3, r4
 80057a6:	f000 ff3f 	bl	8006628 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d198      	bne.n	80056e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	0018      	movs	r0, r3
 80057bc:	f000 fe12 	bl	80063e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057c0:	1e03      	subs	r3, r0, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e01a      	b.n	80057fe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2220      	movs	r2, #32
 80057ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	490c      	ldr	r1, [pc, #48]	; (800580c <HAL_I2C_Master_Transmit+0x20c>)
 80057dc:	400a      	ands	r2, r1
 80057de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2241      	movs	r2, #65	; 0x41
 80057e4:	2120      	movs	r1, #32
 80057e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2242      	movs	r2, #66	; 0x42
 80057ec:	2100      	movs	r1, #0
 80057ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2240      	movs	r2, #64	; 0x40
 80057f4:	2100      	movs	r1, #0
 80057f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	e000      	b.n	80057fe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80057fc:	2302      	movs	r3, #2
  }
}
 80057fe:	0018      	movs	r0, r3
 8005800:	46bd      	mov	sp, r7
 8005802:	b007      	add	sp, #28
 8005804:	bd90      	pop	{r4, r7, pc}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	80002000 	.word	0x80002000
 800580c:	fe00e800 	.word	0xfe00e800

08005810 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b089      	sub	sp, #36	; 0x24
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	0008      	movs	r0, r1
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	0019      	movs	r1, r3
 800581e:	230a      	movs	r3, #10
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	1c02      	adds	r2, r0, #0
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	2308      	movs	r3, #8
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	1c0a      	adds	r2, r1, #0
 800582c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2241      	movs	r2, #65	; 0x41
 8005832:	5c9b      	ldrb	r3, [r3, r2]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	d000      	beq.n	800583c <HAL_I2C_Master_Receive+0x2c>
 800583a:	e0e8      	b.n	8005a0e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2240      	movs	r2, #64	; 0x40
 8005840:	5c9b      	ldrb	r3, [r3, r2]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_I2C_Master_Receive+0x3a>
 8005846:	2302      	movs	r3, #2
 8005848:	e0e2      	b.n	8005a10 <HAL_I2C_Master_Receive+0x200>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2240      	movs	r2, #64	; 0x40
 800584e:	2101      	movs	r1, #1
 8005850:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005852:	f7fe ff17 	bl	8004684 <HAL_GetTick>
 8005856:	0003      	movs	r3, r0
 8005858:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800585a:	2380      	movs	r3, #128	; 0x80
 800585c:	0219      	lsls	r1, r3, #8
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	2319      	movs	r3, #25
 8005866:	2201      	movs	r2, #1
 8005868:	f000 fd3e 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 800586c:	1e03      	subs	r3, r0, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cd      	b.n	8005a10 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2241      	movs	r2, #65	; 0x41
 8005878:	2122      	movs	r1, #34	; 0x22
 800587a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2242      	movs	r2, #66	; 0x42
 8005880:	2110      	movs	r1, #16
 8005882:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2208      	movs	r2, #8
 8005894:	18ba      	adds	r2, r7, r2
 8005896:	8812      	ldrh	r2, [r2, #0]
 8005898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2bff      	cmp	r3, #255	; 0xff
 80058a8:	d911      	bls.n	80058ce <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	22ff      	movs	r2, #255	; 0xff
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	045c      	lsls	r4, r3, #17
 80058ba:	230a      	movs	r3, #10
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	8819      	ldrh	r1, [r3, #0]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	4b55      	ldr	r3, [pc, #340]	; (8005a18 <HAL_I2C_Master_Receive+0x208>)
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	0023      	movs	r3, r4
 80058c8:	f000 feae 	bl	8006628 <I2C_TransferConfig>
 80058cc:	e076      	b.n	80059bc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	2380      	movs	r3, #128	; 0x80
 80058e0:	049c      	lsls	r4, r3, #18
 80058e2:	230a      	movs	r3, #10
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	8819      	ldrh	r1, [r3, #0]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	4b4b      	ldr	r3, [pc, #300]	; (8005a18 <HAL_I2C_Master_Receive+0x208>)
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	0023      	movs	r3, r4
 80058f0:	f000 fe9a 	bl	8006628 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80058f4:	e062      	b.n	80059bc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	0018      	movs	r0, r3
 80058fe:	f000 fdad 	bl	800645c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005902:	1e03      	subs	r3, r0, #0
 8005904:	d001      	beq.n	800590a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e082      	b.n	8005a10 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d03a      	beq.n	80059bc <HAL_I2C_Master_Receive+0x1ac>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594a:	2b00      	cmp	r3, #0
 800594c:	d136      	bne.n	80059bc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800594e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	0013      	movs	r3, r2
 8005958:	2200      	movs	r2, #0
 800595a:	2180      	movs	r1, #128	; 0x80
 800595c:	f000 fcc4 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d001      	beq.n	8005968 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e053      	b.n	8005a10 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2bff      	cmp	r3, #255	; 0xff
 8005970:	d911      	bls.n	8005996 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	22ff      	movs	r2, #255	; 0xff
 8005976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597c:	b2da      	uxtb	r2, r3
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	045c      	lsls	r4, r3, #17
 8005982:	230a      	movs	r3, #10
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	8819      	ldrh	r1, [r3, #0]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	2300      	movs	r3, #0
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	0023      	movs	r3, r4
 8005990:	f000 fe4a 	bl	8006628 <I2C_TransferConfig>
 8005994:	e012      	b.n	80059bc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	2380      	movs	r3, #128	; 0x80
 80059a8:	049c      	lsls	r4, r3, #18
 80059aa:	230a      	movs	r3, #10
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	8819      	ldrh	r1, [r3, #0]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	2300      	movs	r3, #0
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	0023      	movs	r3, r4
 80059b8:	f000 fe36 	bl	8006628 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d197      	bne.n	80058f6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f000 fd09 	bl	80063e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059d2:	1e03      	subs	r3, r0, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e01a      	b.n	8005a10 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2220      	movs	r2, #32
 80059e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	490b      	ldr	r1, [pc, #44]	; (8005a1c <HAL_I2C_Master_Receive+0x20c>)
 80059ee:	400a      	ands	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2241      	movs	r2, #65	; 0x41
 80059f6:	2120      	movs	r1, #32
 80059f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2242      	movs	r2, #66	; 0x42
 80059fe:	2100      	movs	r1, #0
 8005a00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2240      	movs	r2, #64	; 0x40
 8005a06:	2100      	movs	r1, #0
 8005a08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e000      	b.n	8005a10 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005a0e:	2302      	movs	r3, #2
  }
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b007      	add	sp, #28
 8005a16:	bd90      	pop	{r4, r7, pc}
 8005a18:	80002400 	.word	0x80002400
 8005a1c:	fe00e800 	.word	0xfe00e800

08005a20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b089      	sub	sp, #36	; 0x24
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	000c      	movs	r4, r1
 8005a2a:	0010      	movs	r0, r2
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	230a      	movs	r3, #10
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	1c22      	adds	r2, r4, #0
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	2308      	movs	r3, #8
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	1c02      	adds	r2, r0, #0
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	1dbb      	adds	r3, r7, #6
 8005a40:	1c0a      	adds	r2, r1, #0
 8005a42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2241      	movs	r2, #65	; 0x41
 8005a48:	5c9b      	ldrb	r3, [r3, r2]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d000      	beq.n	8005a52 <HAL_I2C_Mem_Write+0x32>
 8005a50:	e10c      	b.n	8005c6c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <HAL_I2C_Mem_Write+0x42>
 8005a58:	232c      	movs	r3, #44	; 0x2c
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d105      	bne.n	8005a6e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2280      	movs	r2, #128	; 0x80
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e0ff      	b.n	8005c6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2240      	movs	r2, #64	; 0x40
 8005a72:	5c9b      	ldrb	r3, [r3, r2]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_I2C_Mem_Write+0x5c>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e0f8      	b.n	8005c6e <HAL_I2C_Mem_Write+0x24e>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	2101      	movs	r1, #1
 8005a82:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a84:	f7fe fdfe 	bl	8004684 <HAL_GetTick>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	0219      	lsls	r1, r3, #8
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2319      	movs	r3, #25
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f000 fc25 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e0e3      	b.n	8005c6e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2241      	movs	r2, #65	; 0x41
 8005aaa:	2121      	movs	r1, #33	; 0x21
 8005aac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2242      	movs	r2, #66	; 0x42
 8005ab2:	2140      	movs	r1, #64	; 0x40
 8005ab4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	222c      	movs	r2, #44	; 0x2c
 8005ac6:	18ba      	adds	r2, r7, r2
 8005ac8:	8812      	ldrh	r2, [r2, #0]
 8005aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ad2:	1dbb      	adds	r3, r7, #6
 8005ad4:	881c      	ldrh	r4, [r3, #0]
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	881a      	ldrh	r2, [r3, #0]
 8005adc:	230a      	movs	r3, #10
 8005ade:	18fb      	adds	r3, r7, r3
 8005ae0:	8819      	ldrh	r1, [r3, #0]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	9301      	str	r3, [sp, #4]
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	0023      	movs	r3, r4
 8005aee:	f000 fb13 	bl	8006118 <I2C_RequestMemoryWrite>
 8005af2:	1e03      	subs	r3, r0, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2240      	movs	r2, #64	; 0x40
 8005afa:	2100      	movs	r1, #0
 8005afc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e0b5      	b.n	8005c6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2bff      	cmp	r3, #255	; 0xff
 8005b0a:	d911      	bls.n	8005b30 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	22ff      	movs	r2, #255	; 0xff
 8005b10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	2380      	movs	r3, #128	; 0x80
 8005b1a:	045c      	lsls	r4, r3, #17
 8005b1c:	230a      	movs	r3, #10
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	8819      	ldrh	r1, [r3, #0]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	2300      	movs	r3, #0
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	0023      	movs	r3, r4
 8005b2a:	f000 fd7d 	bl	8006628 <I2C_TransferConfig>
 8005b2e:	e012      	b.n	8005b56 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	049c      	lsls	r4, r3, #18
 8005b44:	230a      	movs	r3, #10
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	8819      	ldrh	r1, [r3, #0]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	0023      	movs	r3, r4
 8005b52:	f000 fd69 	bl	8006628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f000 fc02 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b62:	1e03      	subs	r3, r0, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e081      	b.n	8005c6e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d03a      	beq.n	8005c1a <HAL_I2C_Mem_Write+0x1fa>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d136      	bne.n	8005c1a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	0013      	movs	r3, r2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2180      	movs	r1, #128	; 0x80
 8005bba:	f000 fb95 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 8005bbe:	1e03      	subs	r3, r0, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e053      	b.n	8005c6e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2bff      	cmp	r3, #255	; 0xff
 8005bce:	d911      	bls.n	8005bf4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	22ff      	movs	r2, #255	; 0xff
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	045c      	lsls	r4, r3, #17
 8005be0:	230a      	movs	r3, #10
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	8819      	ldrh	r1, [r3, #0]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	2300      	movs	r3, #0
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	0023      	movs	r3, r4
 8005bee:	f000 fd1b 	bl	8006628 <I2C_TransferConfig>
 8005bf2:	e012      	b.n	8005c1a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	049c      	lsls	r4, r3, #18
 8005c08:	230a      	movs	r3, #10
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	8819      	ldrh	r1, [r3, #0]
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	2300      	movs	r3, #0
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	0023      	movs	r3, r4
 8005c16:	f000 fd07 	bl	8006628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d198      	bne.n	8005b56 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 fbda 	bl	80063e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d001      	beq.n	8005c38 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e01a      	b.n	8005c6e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	490b      	ldr	r1, [pc, #44]	; (8005c78 <HAL_I2C_Mem_Write+0x258>)
 8005c4c:	400a      	ands	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2241      	movs	r2, #65	; 0x41
 8005c54:	2120      	movs	r1, #32
 8005c56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2242      	movs	r2, #66	; 0x42
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2240      	movs	r2, #64	; 0x40
 8005c64:	2100      	movs	r1, #0
 8005c66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	0018      	movs	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b007      	add	sp, #28
 8005c74:	bd90      	pop	{r4, r7, pc}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	fe00e800 	.word	0xfe00e800

08005c7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c7c:	b590      	push	{r4, r7, lr}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	000c      	movs	r4, r1
 8005c86:	0010      	movs	r0, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	230a      	movs	r3, #10
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	1c22      	adds	r2, r4, #0
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	2308      	movs	r3, #8
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	1c02      	adds	r2, r0, #0
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	1dbb      	adds	r3, r7, #6
 8005c9c:	1c0a      	adds	r2, r1, #0
 8005c9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2241      	movs	r2, #65	; 0x41
 8005ca4:	5c9b      	ldrb	r3, [r3, r2]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d000      	beq.n	8005cae <HAL_I2C_Mem_Read+0x32>
 8005cac:	e110      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <HAL_I2C_Mem_Read+0x42>
 8005cb4:	232c      	movs	r3, #44	; 0x2c
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	0092      	lsls	r2, r2, #2
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e103      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2240      	movs	r2, #64	; 0x40
 8005cce:	5c9b      	ldrb	r3, [r3, r2]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_I2C_Mem_Read+0x5c>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e0fc      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x256>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2240      	movs	r2, #64	; 0x40
 8005cdc:	2101      	movs	r1, #1
 8005cde:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ce0:	f7fe fcd0 	bl	8004684 <HAL_GetTick>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	0219      	lsls	r1, r3, #8
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	2319      	movs	r3, #25
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f000 faf7 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	1e03      	subs	r3, r0, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e0e7      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2241      	movs	r2, #65	; 0x41
 8005d06:	2122      	movs	r1, #34	; 0x22
 8005d08:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2242      	movs	r2, #66	; 0x42
 8005d0e:	2140      	movs	r1, #64	; 0x40
 8005d10:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	222c      	movs	r2, #44	; 0x2c
 8005d22:	18ba      	adds	r2, r7, r2
 8005d24:	8812      	ldrh	r2, [r2, #0]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d2e:	1dbb      	adds	r3, r7, #6
 8005d30:	881c      	ldrh	r4, [r3, #0]
 8005d32:	2308      	movs	r3, #8
 8005d34:	18fb      	adds	r3, r7, r3
 8005d36:	881a      	ldrh	r2, [r3, #0]
 8005d38:	230a      	movs	r3, #10
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	8819      	ldrh	r1, [r3, #0]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	0023      	movs	r3, r4
 8005d4a:	f000 fa49 	bl	80061e0 <I2C_RequestMemoryRead>
 8005d4e:	1e03      	subs	r3, r0, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2240      	movs	r2, #64	; 0x40
 8005d56:	2100      	movs	r1, #0
 8005d58:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e0b9      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2bff      	cmp	r3, #255	; 0xff
 8005d66:	d911      	bls.n	8005d8c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	045c      	lsls	r4, r3, #17
 8005d78:	230a      	movs	r3, #10
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	8819      	ldrh	r1, [r3, #0]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	4b56      	ldr	r3, [pc, #344]	; (8005edc <HAL_I2C_Mem_Read+0x260>)
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	0023      	movs	r3, r4
 8005d86:	f000 fc4f 	bl	8006628 <I2C_TransferConfig>
 8005d8a:	e012      	b.n	8005db2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	049c      	lsls	r4, r3, #18
 8005da0:	230a      	movs	r3, #10
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	8819      	ldrh	r1, [r3, #0]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	4b4c      	ldr	r3, [pc, #304]	; (8005edc <HAL_I2C_Mem_Read+0x260>)
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	0023      	movs	r3, r4
 8005dae:	f000 fc3b 	bl	8006628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	0013      	movs	r3, r2
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	f000 fa92 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 8005dc4:	1e03      	subs	r3, r0, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e082      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d03a      	beq.n	8005e7e <HAL_I2C_Mem_Read+0x202>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d136      	bne.n	8005e7e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	0013      	movs	r3, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2180      	movs	r1, #128	; 0x80
 8005e1e:	f000 fa63 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 8005e22:	1e03      	subs	r3, r0, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e053      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2bff      	cmp	r3, #255	; 0xff
 8005e32:	d911      	bls.n	8005e58 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	22ff      	movs	r2, #255	; 0xff
 8005e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	045c      	lsls	r4, r3, #17
 8005e44:	230a      	movs	r3, #10
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	8819      	ldrh	r1, [r3, #0]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	0023      	movs	r3, r4
 8005e52:	f000 fbe9 	bl	8006628 <I2C_TransferConfig>
 8005e56:	e012      	b.n	8005e7e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	049c      	lsls	r4, r3, #18
 8005e6c:	230a      	movs	r3, #10
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	8819      	ldrh	r1, [r3, #0]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	2300      	movs	r3, #0
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	0023      	movs	r3, r4
 8005e7a:	f000 fbd5 	bl	8006628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d194      	bne.n	8005db2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f000 faa8 	bl	80063e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e94:	1e03      	subs	r3, r0, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e01a      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	490c      	ldr	r1, [pc, #48]	; (8005ee0 <HAL_I2C_Mem_Read+0x264>)
 8005eb0:	400a      	ands	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2241      	movs	r2, #65	; 0x41
 8005eb8:	2120      	movs	r1, #32
 8005eba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2242      	movs	r2, #66	; 0x42
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	2100      	movs	r1, #0
 8005eca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e000      	b.n	8005ed2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
  }
}
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b007      	add	sp, #28
 8005ed8:	bd90      	pop	{r4, r7, pc}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	80002400 	.word	0x80002400
 8005ee0:	fe00e800 	.word	0xfe00e800

08005ee4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	230a      	movs	r3, #10
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	1c0a      	adds	r2, r1, #0
 8005ef6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2241      	movs	r2, #65	; 0x41
 8005f00:	5c9b      	ldrb	r3, [r3, r2]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d000      	beq.n	8005f0a <HAL_I2C_IsDeviceReady+0x26>
 8005f08:	e0fe      	b.n	8006108 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699a      	ldr	r2, [r3, #24]
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	401a      	ands	r2, r3
 8005f16:	2380      	movs	r3, #128	; 0x80
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d101      	bne.n	8005f22 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e0f3      	b.n	800610a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2240      	movs	r2, #64	; 0x40
 8005f26:	5c9b      	ldrb	r3, [r3, r2]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_I2C_IsDeviceReady+0x4c>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e0ec      	b.n	800610a <HAL_I2C_IsDeviceReady+0x226>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2240      	movs	r2, #64	; 0x40
 8005f34:	2101      	movs	r1, #1
 8005f36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2241      	movs	r2, #65	; 0x41
 8005f3c:	2124      	movs	r1, #36	; 0x24
 8005f3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d107      	bne.n	8005f5e <HAL_I2C_IsDeviceReady+0x7a>
 8005f4e:	230a      	movs	r3, #10
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	059b      	lsls	r3, r3, #22
 8005f56:	0d9b      	lsrs	r3, r3, #22
 8005f58:	4a6e      	ldr	r2, [pc, #440]	; (8006114 <HAL_I2C_IsDeviceReady+0x230>)
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	e007      	b.n	8005f6e <HAL_I2C_IsDeviceReady+0x8a>
 8005f5e:	230a      	movs	r3, #10
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	059b      	lsls	r3, r3, #22
 8005f66:	0d9b      	lsrs	r3, r3, #22
 8005f68:	22a0      	movs	r2, #160	; 0xa0
 8005f6a:	0192      	lsls	r2, r2, #6
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005f74:	f7fe fb86 	bl	8004684 <HAL_GetTick>
 8005f78:	0003      	movs	r3, r0
 8005f7a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2220      	movs	r2, #32
 8005f84:	4013      	ands	r3, r2
 8005f86:	3b20      	subs	r3, #32
 8005f88:	425a      	negs	r2, r3
 8005f8a:	4153      	adcs	r3, r2
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	231f      	movs	r3, #31
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	2210      	movs	r2, #16
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	3b10      	subs	r3, #16
 8005fa0:	425a      	negs	r2, r3
 8005fa2:	4153      	adcs	r3, r2
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	231e      	movs	r3, #30
 8005fa8:	18fb      	adds	r3, r7, r3
 8005faa:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005fac:	e035      	b.n	800601a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	d01a      	beq.n	8005fea <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fb4:	f7fe fb66 	bl	8004684 <HAL_GetTick>
 8005fb8:	0002      	movs	r2, r0
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d302      	bcc.n	8005fca <HAL_I2C_IsDeviceReady+0xe6>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2241      	movs	r2, #65	; 0x41
 8005fce:	2120      	movs	r1, #32
 8005fd0:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2240      	movs	r2, #64	; 0x40
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e08f      	b.n	800610a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	3b20      	subs	r3, #32
 8005ff6:	425a      	negs	r2, r3
 8005ff8:	4153      	adcs	r3, r2
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	231f      	movs	r3, #31
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	2210      	movs	r2, #16
 800600a:	4013      	ands	r3, r2
 800600c:	3b10      	subs	r3, #16
 800600e:	425a      	negs	r2, r3
 8006010:	4153      	adcs	r3, r2
 8006012:	b2da      	uxtb	r2, r3
 8006014:	231e      	movs	r3, #30
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800601a:	231f      	movs	r3, #31
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d104      	bne.n	800602e <HAL_I2C_IsDeviceReady+0x14a>
 8006024:	231e      	movs	r3, #30
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0bf      	beq.n	8005fae <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2210      	movs	r2, #16
 8006036:	4013      	ands	r3, r2
 8006038:	2b10      	cmp	r3, #16
 800603a:	d01a      	beq.n	8006072 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	0013      	movs	r3, r2
 8006046:	2200      	movs	r2, #0
 8006048:	2120      	movs	r1, #32
 800604a:	f000 f94d 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 800604e:	1e03      	subs	r3, r0, #0
 8006050:	d001      	beq.n	8006056 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e059      	b.n	800610a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2220      	movs	r2, #32
 800605c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2241      	movs	r2, #65	; 0x41
 8006062:	2120      	movs	r1, #32
 8006064:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2240      	movs	r2, #64	; 0x40
 800606a:	2100      	movs	r1, #0
 800606c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e04b      	b.n	800610a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	0013      	movs	r3, r2
 800607c:	2200      	movs	r2, #0
 800607e:	2120      	movs	r1, #32
 8006080:	f000 f932 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 8006084:	1e03      	subs	r3, r0, #0
 8006086:	d001      	beq.n	800608c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e03e      	b.n	800610a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2210      	movs	r2, #16
 8006092:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2220      	movs	r2, #32
 800609a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d119      	bne.n	80060d8 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	01c9      	lsls	r1, r1, #7
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	0013      	movs	r3, r2
 80060c0:	2200      	movs	r2, #0
 80060c2:	2120      	movs	r1, #32
 80060c4:	f000 f910 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 80060c8:	1e03      	subs	r3, r0, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e01c      	b.n	800610a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2220      	movs	r2, #32
 80060d6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	3301      	adds	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d900      	bls.n	80060e8 <HAL_I2C_IsDeviceReady+0x204>
 80060e6:	e72e      	b.n	8005f46 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2241      	movs	r2, #65	; 0x41
 80060ec:	2120      	movs	r1, #32
 80060ee:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	2220      	movs	r2, #32
 80060f6:	431a      	orrs	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2240      	movs	r2, #64	; 0x40
 8006100:	2100      	movs	r1, #0
 8006102:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	0018      	movs	r0, r3
 800610c:	46bd      	mov	sp, r7
 800610e:	b008      	add	sp, #32
 8006110:	bd80      	pop	{r7, pc}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	02002000 	.word	0x02002000

08006118 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006118:	b5b0      	push	{r4, r5, r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	000c      	movs	r4, r1
 8006122:	0010      	movs	r0, r2
 8006124:	0019      	movs	r1, r3
 8006126:	250a      	movs	r5, #10
 8006128:	197b      	adds	r3, r7, r5
 800612a:	1c22      	adds	r2, r4, #0
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	2308      	movs	r3, #8
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	1c02      	adds	r2, r0, #0
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	1dbb      	adds	r3, r7, #6
 8006138:	1c0a      	adds	r2, r1, #0
 800613a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800613c:	1dbb      	adds	r3, r7, #6
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b2da      	uxtb	r2, r3
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	045c      	lsls	r4, r3, #17
 8006146:	197b      	adds	r3, r7, r5
 8006148:	8819      	ldrh	r1, [r3, #0]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	4b23      	ldr	r3, [pc, #140]	; (80061dc <I2C_RequestMemoryWrite+0xc4>)
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	0023      	movs	r3, r4
 8006152:	f000 fa69 	bl	8006628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006158:	6a39      	ldr	r1, [r7, #32]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	0018      	movs	r0, r3
 800615e:	f000 f902 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 8006162:	1e03      	subs	r3, r0, #0
 8006164:	d001      	beq.n	800616a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e033      	b.n	80061d2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800616a:	1dbb      	adds	r3, r7, #6
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d107      	bne.n	8006182 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006172:	2308      	movs	r3, #8
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	629a      	str	r2, [r3, #40]	; 0x28
 8006180:	e019      	b.n	80061b6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006182:	2308      	movs	r3, #8
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	b29b      	uxth	r3, r3
 800618c:	b2da      	uxtb	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006196:	6a39      	ldr	r1, [r7, #32]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	0018      	movs	r0, r3
 800619c:	f000 f8e3 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 80061a0:	1e03      	subs	r3, r0, #0
 80061a2:	d001      	beq.n	80061a8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e014      	b.n	80061d2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061a8:	2308      	movs	r3, #8
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061b6:	6a3a      	ldr	r2, [r7, #32]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	0013      	movs	r3, r2
 80061c0:	2200      	movs	r2, #0
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	f000 f890 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 80061c8:	1e03      	subs	r3, r0, #0
 80061ca:	d001      	beq.n	80061d0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	0018      	movs	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	b004      	add	sp, #16
 80061d8:	bdb0      	pop	{r4, r5, r7, pc}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	80002000 	.word	0x80002000

080061e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061e0:	b5b0      	push	{r4, r5, r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	000c      	movs	r4, r1
 80061ea:	0010      	movs	r0, r2
 80061ec:	0019      	movs	r1, r3
 80061ee:	250a      	movs	r5, #10
 80061f0:	197b      	adds	r3, r7, r5
 80061f2:	1c22      	adds	r2, r4, #0
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	2308      	movs	r3, #8
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	1c02      	adds	r2, r0, #0
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	1dbb      	adds	r3, r7, #6
 8006200:	1c0a      	adds	r2, r1, #0
 8006202:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006204:	1dbb      	adds	r3, r7, #6
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	197b      	adds	r3, r7, r5
 800620c:	8819      	ldrh	r1, [r3, #0]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <I2C_RequestMemoryRead+0xc0>)
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	f000 fa07 	bl	8006628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800621a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621c:	6a39      	ldr	r1, [r7, #32]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	0018      	movs	r0, r3
 8006222:	f000 f8a0 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 8006226:	1e03      	subs	r3, r0, #0
 8006228:	d001      	beq.n	800622e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e033      	b.n	8006296 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800622e:	1dbb      	adds	r3, r7, #6
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d107      	bne.n	8006246 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006236:	2308      	movs	r3, #8
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
 8006244:	e019      	b.n	800627a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006246:	2308      	movs	r3, #8
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	0a1b      	lsrs	r3, r3, #8
 800624e:	b29b      	uxth	r3, r3
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625a:	6a39      	ldr	r1, [r7, #32]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	0018      	movs	r0, r3
 8006260:	f000 f881 	bl	8006366 <I2C_WaitOnTXISFlagUntilTimeout>
 8006264:	1e03      	subs	r3, r0, #0
 8006266:	d001      	beq.n	800626c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e014      	b.n	8006296 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800626c:	2308      	movs	r3, #8
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	0013      	movs	r3, r2
 8006284:	2200      	movs	r2, #0
 8006286:	2140      	movs	r1, #64	; 0x40
 8006288:	f000 f82e 	bl	80062e8 <I2C_WaitOnFlagUntilTimeout>
 800628c:	1e03      	subs	r3, r0, #0
 800628e:	d001      	beq.n	8006294 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	0018      	movs	r0, r3
 8006298:	46bd      	mov	sp, r7
 800629a:	b004      	add	sp, #16
 800629c:	bdb0      	pop	{r4, r5, r7, pc}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	80002000 	.word	0x80002000

080062a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	2202      	movs	r2, #2
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	2201      	movs	r2, #1
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d007      	beq.n	80062e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2101      	movs	r1, #1
 80062dc:	430a      	orrs	r2, r1
 80062de:	619a      	str	r2, [r3, #24]
  }
}
 80062e0:	46c0      	nop			; (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b002      	add	sp, #8
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	1dfb      	adds	r3, r7, #7
 80062f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062f8:	e021      	b.n	800633e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	d01e      	beq.n	800633e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006300:	f7fe f9c0 	bl	8004684 <HAL_GetTick>
 8006304:	0002      	movs	r2, r0
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d302      	bcc.n	8006316 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d113      	bne.n	800633e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	2220      	movs	r2, #32
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2241      	movs	r2, #65	; 0x41
 8006326:	2120      	movs	r1, #32
 8006328:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2242      	movs	r2, #66	; 0x42
 800632e:	2100      	movs	r1, #0
 8006330:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2240      	movs	r2, #64	; 0x40
 8006336:	2100      	movs	r1, #0
 8006338:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e00f      	b.n	800635e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	4013      	ands	r3, r2
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	425a      	negs	r2, r3
 800634e:	4153      	adcs	r3, r2
 8006350:	b2db      	uxtb	r3, r3
 8006352:	001a      	movs	r2, r3
 8006354:	1dfb      	adds	r3, r7, #7
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d0ce      	beq.n	80062fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	0018      	movs	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	b004      	add	sp, #16
 8006364:	bd80      	pop	{r7, pc}

08006366 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006372:	e02b      	b.n	80063cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	0018      	movs	r0, r3
 800637c:	f000 f8da 	bl	8006534 <I2C_IsAcknowledgeFailed>
 8006380:	1e03      	subs	r3, r0, #0
 8006382:	d001      	beq.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e029      	b.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	3301      	adds	r3, #1
 800638c:	d01e      	beq.n	80063cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638e:	f7fe f979 	bl	8004684 <HAL_GetTick>
 8006392:	0002      	movs	r2, r0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	d302      	bcc.n	80063a4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d113      	bne.n	80063cc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a8:	2220      	movs	r2, #32
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2241      	movs	r2, #65	; 0x41
 80063b4:	2120      	movs	r1, #32
 80063b6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2242      	movs	r2, #66	; 0x42
 80063bc:	2100      	movs	r1, #0
 80063be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2240      	movs	r2, #64	; 0x40
 80063c4:	2100      	movs	r1, #0
 80063c6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e007      	b.n	80063dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2202      	movs	r2, #2
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d1cc      	bne.n	8006374 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	b004      	add	sp, #16
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063f0:	e028      	b.n	8006444 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f000 f89b 	bl	8006534 <I2C_IsAcknowledgeFailed>
 80063fe:	1e03      	subs	r3, r0, #0
 8006400:	d001      	beq.n	8006406 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e026      	b.n	8006454 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006406:	f7fe f93d 	bl	8004684 <HAL_GetTick>
 800640a:	0002      	movs	r2, r0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	429a      	cmp	r2, r3
 8006414:	d302      	bcc.n	800641c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d113      	bne.n	8006444 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	2220      	movs	r2, #32
 8006422:	431a      	orrs	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2241      	movs	r2, #65	; 0x41
 800642c:	2120      	movs	r1, #32
 800642e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2242      	movs	r2, #66	; 0x42
 8006434:	2100      	movs	r1, #0
 8006436:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2240      	movs	r2, #64	; 0x40
 800643c:	2100      	movs	r1, #0
 800643e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e007      	b.n	8006454 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	2220      	movs	r2, #32
 800644c:	4013      	ands	r3, r2
 800644e:	2b20      	cmp	r3, #32
 8006450:	d1cf      	bne.n	80063f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b004      	add	sp, #16
 800645a:	bd80      	pop	{r7, pc}

0800645c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006468:	e055      	b.n	8006516 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	0018      	movs	r0, r3
 8006472:	f000 f85f 	bl	8006534 <I2C_IsAcknowledgeFailed>
 8006476:	1e03      	subs	r3, r0, #0
 8006478:	d001      	beq.n	800647e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e053      	b.n	8006526 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	2220      	movs	r2, #32
 8006486:	4013      	ands	r3, r2
 8006488:	2b20      	cmp	r3, #32
 800648a:	d129      	bne.n	80064e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2204      	movs	r2, #4
 8006494:	4013      	ands	r3, r2
 8006496:	2b04      	cmp	r3, #4
 8006498:	d105      	bne.n	80064a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e03f      	b.n	8006526 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2220      	movs	r2, #32
 80064ac:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	491d      	ldr	r1, [pc, #116]	; (8006530 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80064ba:	400a      	ands	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2241      	movs	r2, #65	; 0x41
 80064c8:	2120      	movs	r1, #32
 80064ca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2242      	movs	r2, #66	; 0x42
 80064d0:	2100      	movs	r1, #0
 80064d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2240      	movs	r2, #64	; 0x40
 80064d8:	2100      	movs	r1, #0
 80064da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e022      	b.n	8006526 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e0:	f7fe f8d0 	bl	8004684 <HAL_GetTick>
 80064e4:	0002      	movs	r2, r0
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d302      	bcc.n	80064f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10f      	bne.n	8006516 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	2220      	movs	r2, #32
 80064fc:	431a      	orrs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2241      	movs	r2, #65	; 0x41
 8006506:	2120      	movs	r1, #32
 8006508:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2240      	movs	r2, #64	; 0x40
 800650e:	2100      	movs	r1, #0
 8006510:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e007      	b.n	8006526 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	2204      	movs	r2, #4
 800651e:	4013      	ands	r3, r2
 8006520:	2b04      	cmp	r3, #4
 8006522:	d1a2      	bne.n	800646a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	0018      	movs	r0, r3
 8006528:	46bd      	mov	sp, r7
 800652a:	b004      	add	sp, #16
 800652c:	bd80      	pop	{r7, pc}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	fe00e800 	.word	0xfe00e800

08006534 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	2210      	movs	r2, #16
 8006548:	4013      	ands	r3, r2
 800654a:	2b10      	cmp	r3, #16
 800654c:	d164      	bne.n	8006618 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	049b      	lsls	r3, r3, #18
 8006558:	401a      	ands	r2, r3
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	049b      	lsls	r3, r3, #18
 800655e:	429a      	cmp	r2, r3
 8006560:	d02b      	beq.n	80065ba <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	01c9      	lsls	r1, r1, #7
 8006570:	430a      	orrs	r2, r1
 8006572:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006574:	e021      	b.n	80065ba <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	3301      	adds	r3, #1
 800657a:	d01e      	beq.n	80065ba <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657c:	f7fe f882 	bl	8004684 <HAL_GetTick>
 8006580:	0002      	movs	r2, r0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	d302      	bcc.n	8006592 <I2C_IsAcknowledgeFailed+0x5e>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d113      	bne.n	80065ba <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	2220      	movs	r2, #32
 8006598:	431a      	orrs	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2241      	movs	r2, #65	; 0x41
 80065a2:	2120      	movs	r1, #32
 80065a4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2242      	movs	r2, #66	; 0x42
 80065aa:	2100      	movs	r1, #0
 80065ac:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2240      	movs	r2, #64	; 0x40
 80065b2:	2100      	movs	r1, #0
 80065b4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e02f      	b.n	800661a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	2220      	movs	r2, #32
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d1d6      	bne.n	8006576 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2210      	movs	r2, #16
 80065ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2220      	movs	r2, #32
 80065d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	0018      	movs	r0, r3
 80065dc:	f7ff fe62 	bl	80062a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	490e      	ldr	r1, [pc, #56]	; (8006624 <I2C_IsAcknowledgeFailed+0xf0>)
 80065ec:	400a      	ands	r2, r1
 80065ee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f4:	2204      	movs	r2, #4
 80065f6:	431a      	orrs	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2241      	movs	r2, #65	; 0x41
 8006600:	2120      	movs	r1, #32
 8006602:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2242      	movs	r2, #66	; 0x42
 8006608:	2100      	movs	r1, #0
 800660a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2240      	movs	r2, #64	; 0x40
 8006610:	2100      	movs	r1, #0
 8006612:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b004      	add	sp, #16
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	fe00e800 	.word	0xfe00e800

08006628 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	0008      	movs	r0, r1
 8006632:	0011      	movs	r1, r2
 8006634:	607b      	str	r3, [r7, #4]
 8006636:	240a      	movs	r4, #10
 8006638:	193b      	adds	r3, r7, r4
 800663a:	1c02      	adds	r2, r0, #0
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	2009      	movs	r0, #9
 8006640:	183b      	adds	r3, r7, r0
 8006642:	1c0a      	adds	r2, r1, #0
 8006644:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	6a3a      	ldr	r2, [r7, #32]
 800664e:	0d51      	lsrs	r1, r2, #21
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	00d2      	lsls	r2, r2, #3
 8006654:	400a      	ands	r2, r1
 8006656:	490e      	ldr	r1, [pc, #56]	; (8006690 <I2C_TransferConfig+0x68>)
 8006658:	430a      	orrs	r2, r1
 800665a:	43d2      	mvns	r2, r2
 800665c:	401a      	ands	r2, r3
 800665e:	0011      	movs	r1, r2
 8006660:	193b      	adds	r3, r7, r4
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	059b      	lsls	r3, r3, #22
 8006666:	0d9a      	lsrs	r2, r3, #22
 8006668:	183b      	adds	r3, r7, r0
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	0418      	lsls	r0, r3, #16
 800666e:	23ff      	movs	r3, #255	; 0xff
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	4003      	ands	r3, r0
 8006674:	431a      	orrs	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	431a      	orrs	r2, r3
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	431a      	orrs	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	46bd      	mov	sp, r7
 800668a:	b005      	add	sp, #20
 800668c:	bd90      	pop	{r4, r7, pc}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	03ff63ff 	.word	0x03ff63ff

08006694 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2241      	movs	r2, #65	; 0x41
 80066a2:	5c9b      	ldrb	r3, [r3, r2]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d138      	bne.n	800671c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2240      	movs	r2, #64	; 0x40
 80066ae:	5c9b      	ldrb	r3, [r3, r2]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e032      	b.n	800671e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2240      	movs	r2, #64	; 0x40
 80066bc:	2101      	movs	r1, #1
 80066be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2241      	movs	r2, #65	; 0x41
 80066c4:	2124      	movs	r1, #36	; 0x24
 80066c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2101      	movs	r1, #1
 80066d4:	438a      	bics	r2, r1
 80066d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4911      	ldr	r1, [pc, #68]	; (8006728 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80066e4:	400a      	ands	r2, r1
 80066e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6819      	ldr	r1, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2101      	movs	r1, #1
 8006704:	430a      	orrs	r2, r1
 8006706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2241      	movs	r2, #65	; 0x41
 800670c:	2120      	movs	r1, #32
 800670e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2240      	movs	r2, #64	; 0x40
 8006714:	2100      	movs	r1, #0
 8006716:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b002      	add	sp, #8
 8006724:	bd80      	pop	{r7, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	ffffefff 	.word	0xffffefff

0800672c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2241      	movs	r2, #65	; 0x41
 800673a:	5c9b      	ldrb	r3, [r3, r2]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b20      	cmp	r3, #32
 8006740:	d139      	bne.n	80067b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2240      	movs	r2, #64	; 0x40
 8006746:	5c9b      	ldrb	r3, [r3, r2]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800674c:	2302      	movs	r3, #2
 800674e:	e033      	b.n	80067b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2240      	movs	r2, #64	; 0x40
 8006754:	2101      	movs	r1, #1
 8006756:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2241      	movs	r2, #65	; 0x41
 800675c:	2124      	movs	r1, #36	; 0x24
 800675e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2101      	movs	r1, #1
 800676c:	438a      	bics	r2, r1
 800676e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a11      	ldr	r2, [pc, #68]	; (80067c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800677c:	4013      	ands	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2101      	movs	r1, #1
 800679e:	430a      	orrs	r2, r1
 80067a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2241      	movs	r2, #65	; 0x41
 80067a6:	2120      	movs	r1, #32
 80067a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2240      	movs	r2, #64	; 0x40
 80067ae:	2100      	movs	r1, #0
 80067b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	0018      	movs	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b004      	add	sp, #16
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	fffff0ff 	.word	0xfffff0ff

080067c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e301      	b.n	8006dda <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2201      	movs	r2, #1
 80067dc:	4013      	ands	r3, r2
 80067de:	d100      	bne.n	80067e2 <HAL_RCC_OscConfig+0x1e>
 80067e0:	e08d      	b.n	80068fe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80067e2:	4bc3      	ldr	r3, [pc, #780]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	220c      	movs	r2, #12
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d00e      	beq.n	800680c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067ee:	4bc0      	ldr	r3, [pc, #768]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	220c      	movs	r2, #12
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d116      	bne.n	8006828 <HAL_RCC_OscConfig+0x64>
 80067fa:	4bbd      	ldr	r3, [pc, #756]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	025b      	lsls	r3, r3, #9
 8006802:	401a      	ands	r2, r3
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	025b      	lsls	r3, r3, #9
 8006808:	429a      	cmp	r2, r3
 800680a:	d10d      	bne.n	8006828 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800680c:	4bb8      	ldr	r3, [pc, #736]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	029b      	lsls	r3, r3, #10
 8006814:	4013      	ands	r3, r2
 8006816:	d100      	bne.n	800681a <HAL_RCC_OscConfig+0x56>
 8006818:	e070      	b.n	80068fc <HAL_RCC_OscConfig+0x138>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d000      	beq.n	8006824 <HAL_RCC_OscConfig+0x60>
 8006822:	e06b      	b.n	80068fc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e2d8      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d107      	bne.n	8006840 <HAL_RCC_OscConfig+0x7c>
 8006830:	4baf      	ldr	r3, [pc, #700]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	4bae      	ldr	r3, [pc, #696]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	0249      	lsls	r1, r1, #9
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e02f      	b.n	80068a0 <HAL_RCC_OscConfig+0xdc>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10c      	bne.n	8006862 <HAL_RCC_OscConfig+0x9e>
 8006848:	4ba9      	ldr	r3, [pc, #676]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4ba8      	ldr	r3, [pc, #672]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800684e:	49a9      	ldr	r1, [pc, #676]	; (8006af4 <HAL_RCC_OscConfig+0x330>)
 8006850:	400a      	ands	r2, r1
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	4ba6      	ldr	r3, [pc, #664]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	4ba5      	ldr	r3, [pc, #660]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800685a:	49a7      	ldr	r1, [pc, #668]	; (8006af8 <HAL_RCC_OscConfig+0x334>)
 800685c:	400a      	ands	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e01e      	b.n	80068a0 <HAL_RCC_OscConfig+0xdc>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b05      	cmp	r3, #5
 8006868:	d10e      	bne.n	8006888 <HAL_RCC_OscConfig+0xc4>
 800686a:	4ba1      	ldr	r3, [pc, #644]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4ba0      	ldr	r3, [pc, #640]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006870:	2180      	movs	r1, #128	; 0x80
 8006872:	02c9      	lsls	r1, r1, #11
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	4b9d      	ldr	r3, [pc, #628]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4b9c      	ldr	r3, [pc, #624]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800687e:	2180      	movs	r1, #128	; 0x80
 8006880:	0249      	lsls	r1, r1, #9
 8006882:	430a      	orrs	r2, r1
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e00b      	b.n	80068a0 <HAL_RCC_OscConfig+0xdc>
 8006888:	4b99      	ldr	r3, [pc, #612]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	4b98      	ldr	r3, [pc, #608]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800688e:	4999      	ldr	r1, [pc, #612]	; (8006af4 <HAL_RCC_OscConfig+0x330>)
 8006890:	400a      	ands	r2, r1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	4b96      	ldr	r3, [pc, #600]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	4b95      	ldr	r3, [pc, #596]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800689a:	4997      	ldr	r1, [pc, #604]	; (8006af8 <HAL_RCC_OscConfig+0x334>)
 800689c:	400a      	ands	r2, r1
 800689e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d014      	beq.n	80068d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a8:	f7fd feec 	bl	8004684 <HAL_GetTick>
 80068ac:	0003      	movs	r3, r0
 80068ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b0:	e008      	b.n	80068c4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068b2:	f7fd fee7 	bl	8004684 <HAL_GetTick>
 80068b6:	0002      	movs	r2, r0
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b64      	cmp	r3, #100	; 0x64
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e28a      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c4:	4b8a      	ldr	r3, [pc, #552]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	029b      	lsls	r3, r3, #10
 80068cc:	4013      	ands	r3, r2
 80068ce:	d0f0      	beq.n	80068b2 <HAL_RCC_OscConfig+0xee>
 80068d0:	e015      	b.n	80068fe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d2:	f7fd fed7 	bl	8004684 <HAL_GetTick>
 80068d6:	0003      	movs	r3, r0
 80068d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068dc:	f7fd fed2 	bl	8004684 <HAL_GetTick>
 80068e0:	0002      	movs	r2, r0
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b64      	cmp	r3, #100	; 0x64
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e275      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ee:	4b80      	ldr	r3, [pc, #512]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	029b      	lsls	r3, r3, #10
 80068f6:	4013      	ands	r3, r2
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x118>
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2202      	movs	r2, #2
 8006904:	4013      	ands	r3, r2
 8006906:	d100      	bne.n	800690a <HAL_RCC_OscConfig+0x146>
 8006908:	e069      	b.n	80069de <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800690a:	4b79      	ldr	r3, [pc, #484]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	220c      	movs	r2, #12
 8006910:	4013      	ands	r3, r2
 8006912:	d00b      	beq.n	800692c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006914:	4b76      	ldr	r3, [pc, #472]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	220c      	movs	r2, #12
 800691a:	4013      	ands	r3, r2
 800691c:	2b08      	cmp	r3, #8
 800691e:	d11c      	bne.n	800695a <HAL_RCC_OscConfig+0x196>
 8006920:	4b73      	ldr	r3, [pc, #460]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	2380      	movs	r3, #128	; 0x80
 8006926:	025b      	lsls	r3, r3, #9
 8006928:	4013      	ands	r3, r2
 800692a:	d116      	bne.n	800695a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800692c:	4b70      	ldr	r3, [pc, #448]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2202      	movs	r2, #2
 8006932:	4013      	ands	r3, r2
 8006934:	d005      	beq.n	8006942 <HAL_RCC_OscConfig+0x17e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d001      	beq.n	8006942 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e24b      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006942:	4b6b      	ldr	r3, [pc, #428]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	22f8      	movs	r2, #248	; 0xf8
 8006948:	4393      	bics	r3, r2
 800694a:	0019      	movs	r1, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	00da      	lsls	r2, r3, #3
 8006952:	4b67      	ldr	r3, [pc, #412]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006954:	430a      	orrs	r2, r1
 8006956:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006958:	e041      	b.n	80069de <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d024      	beq.n	80069ac <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006962:	4b63      	ldr	r3, [pc, #396]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b62      	ldr	r3, [pc, #392]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006968:	2101      	movs	r1, #1
 800696a:	430a      	orrs	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696e:	f7fd fe89 	bl	8004684 <HAL_GetTick>
 8006972:	0003      	movs	r3, r0
 8006974:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006978:	f7fd fe84 	bl	8004684 <HAL_GetTick>
 800697c:	0002      	movs	r2, r0
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e227      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698a:	4b59      	ldr	r3, [pc, #356]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2202      	movs	r2, #2
 8006990:	4013      	ands	r3, r2
 8006992:	d0f1      	beq.n	8006978 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006994:	4b56      	ldr	r3, [pc, #344]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	22f8      	movs	r2, #248	; 0xf8
 800699a:	4393      	bics	r3, r2
 800699c:	0019      	movs	r1, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	00da      	lsls	r2, r3, #3
 80069a4:	4b52      	ldr	r3, [pc, #328]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80069a6:	430a      	orrs	r2, r1
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e018      	b.n	80069de <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ac:	4b50      	ldr	r3, [pc, #320]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b4f      	ldr	r3, [pc, #316]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80069b2:	2101      	movs	r1, #1
 80069b4:	438a      	bics	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fd fe64 	bl	8004684 <HAL_GetTick>
 80069bc:	0003      	movs	r3, r0
 80069be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c2:	f7fd fe5f 	bl	8004684 <HAL_GetTick>
 80069c6:	0002      	movs	r2, r0
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e202      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d4:	4b46      	ldr	r3, [pc, #280]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2202      	movs	r2, #2
 80069da:	4013      	ands	r3, r2
 80069dc:	d1f1      	bne.n	80069c2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	4013      	ands	r3, r2
 80069e6:	d036      	beq.n	8006a56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d019      	beq.n	8006a24 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f0:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80069f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069f4:	4b3e      	ldr	r3, [pc, #248]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 80069f6:	2101      	movs	r1, #1
 80069f8:	430a      	orrs	r2, r1
 80069fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fc:	f7fd fe42 	bl	8004684 <HAL_GetTick>
 8006a00:	0003      	movs	r3, r0
 8006a02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a06:	f7fd fe3d 	bl	8004684 <HAL_GetTick>
 8006a0a:	0002      	movs	r2, r0
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e1e0      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a18:	4b35      	ldr	r3, [pc, #212]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d0f1      	beq.n	8006a06 <HAL_RCC_OscConfig+0x242>
 8006a22:	e018      	b.n	8006a56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a24:	4b32      	ldr	r3, [pc, #200]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a28:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	438a      	bics	r2, r1
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a30:	f7fd fe28 	bl	8004684 <HAL_GetTick>
 8006a34:	0003      	movs	r3, r0
 8006a36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a3a:	f7fd fe23 	bl	8004684 <HAL_GetTick>
 8006a3e:	0002      	movs	r2, r0
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e1c6      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a4c:	4b28      	ldr	r3, [pc, #160]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	2202      	movs	r2, #2
 8006a52:	4013      	ands	r3, r2
 8006a54:	d1f1      	bne.n	8006a3a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d100      	bne.n	8006a62 <HAL_RCC_OscConfig+0x29e>
 8006a60:	e0b4      	b.n	8006bcc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a62:	201f      	movs	r0, #31
 8006a64:	183b      	adds	r3, r7, r0
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a6a:	4b21      	ldr	r3, [pc, #132]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006a6c:	69da      	ldr	r2, [r3, #28]
 8006a6e:	2380      	movs	r3, #128	; 0x80
 8006a70:	055b      	lsls	r3, r3, #21
 8006a72:	4013      	ands	r3, r2
 8006a74:	d110      	bne.n	8006a98 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a76:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006a78:	69da      	ldr	r2, [r3, #28]
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006a7c:	2180      	movs	r1, #128	; 0x80
 8006a7e:	0549      	lsls	r1, r1, #21
 8006a80:	430a      	orrs	r2, r1
 8006a82:	61da      	str	r2, [r3, #28]
 8006a84:	4b1a      	ldr	r3, [pc, #104]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	055b      	lsls	r3, r3, #21
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a92:	183b      	adds	r3, r7, r0
 8006a94:	2201      	movs	r2, #1
 8006a96:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <HAL_RCC_OscConfig+0x338>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	2380      	movs	r3, #128	; 0x80
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	d11a      	bne.n	8006ada <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aa4:	4b15      	ldr	r3, [pc, #84]	; (8006afc <HAL_RCC_OscConfig+0x338>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b14      	ldr	r3, [pc, #80]	; (8006afc <HAL_RCC_OscConfig+0x338>)
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	0049      	lsls	r1, r1, #1
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ab2:	f7fd fde7 	bl	8004684 <HAL_GetTick>
 8006ab6:	0003      	movs	r3, r0
 8006ab8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006abc:	f7fd fde2 	bl	8004684 <HAL_GetTick>
 8006ac0:	0002      	movs	r2, r0
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	; 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e185      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <HAL_RCC_OscConfig+0x338>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	2380      	movs	r3, #128	; 0x80
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10e      	bne.n	8006b00 <HAL_RCC_OscConfig+0x33c>
 8006ae2:	4b03      	ldr	r3, [pc, #12]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	4b02      	ldr	r3, [pc, #8]	; (8006af0 <HAL_RCC_OscConfig+0x32c>)
 8006ae8:	2101      	movs	r1, #1
 8006aea:	430a      	orrs	r2, r1
 8006aec:	621a      	str	r2, [r3, #32]
 8006aee:	e035      	b.n	8006b5c <HAL_RCC_OscConfig+0x398>
 8006af0:	40021000 	.word	0x40021000
 8006af4:	fffeffff 	.word	0xfffeffff
 8006af8:	fffbffff 	.word	0xfffbffff
 8006afc:	40007000 	.word	0x40007000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10c      	bne.n	8006b22 <HAL_RCC_OscConfig+0x35e>
 8006b08:	4bb6      	ldr	r3, [pc, #728]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	4bb5      	ldr	r3, [pc, #724]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b0e:	2101      	movs	r1, #1
 8006b10:	438a      	bics	r2, r1
 8006b12:	621a      	str	r2, [r3, #32]
 8006b14:	4bb3      	ldr	r3, [pc, #716]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b16:	6a1a      	ldr	r2, [r3, #32]
 8006b18:	4bb2      	ldr	r3, [pc, #712]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	438a      	bics	r2, r1
 8006b1e:	621a      	str	r2, [r3, #32]
 8006b20:	e01c      	b.n	8006b5c <HAL_RCC_OscConfig+0x398>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b05      	cmp	r3, #5
 8006b28:	d10c      	bne.n	8006b44 <HAL_RCC_OscConfig+0x380>
 8006b2a:	4bae      	ldr	r3, [pc, #696]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	4bad      	ldr	r3, [pc, #692]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b30:	2104      	movs	r1, #4
 8006b32:	430a      	orrs	r2, r1
 8006b34:	621a      	str	r2, [r3, #32]
 8006b36:	4bab      	ldr	r3, [pc, #684]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b38:	6a1a      	ldr	r2, [r3, #32]
 8006b3a:	4baa      	ldr	r3, [pc, #680]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	621a      	str	r2, [r3, #32]
 8006b42:	e00b      	b.n	8006b5c <HAL_RCC_OscConfig+0x398>
 8006b44:	4ba7      	ldr	r3, [pc, #668]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	4ba6      	ldr	r3, [pc, #664]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	438a      	bics	r2, r1
 8006b4e:	621a      	str	r2, [r3, #32]
 8006b50:	4ba4      	ldr	r3, [pc, #656]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b52:	6a1a      	ldr	r2, [r3, #32]
 8006b54:	4ba3      	ldr	r3, [pc, #652]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b56:	2104      	movs	r1, #4
 8006b58:	438a      	bics	r2, r1
 8006b5a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d014      	beq.n	8006b8e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b64:	f7fd fd8e 	bl	8004684 <HAL_GetTick>
 8006b68:	0003      	movs	r3, r0
 8006b6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6c:	e009      	b.n	8006b82 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b6e:	f7fd fd89 	bl	8004684 <HAL_GetTick>
 8006b72:	0002      	movs	r2, r0
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	4a9b      	ldr	r2, [pc, #620]	; (8006de8 <HAL_RCC_OscConfig+0x624>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e12b      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b82:	4b98      	ldr	r3, [pc, #608]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	2202      	movs	r2, #2
 8006b88:	4013      	ands	r3, r2
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x3aa>
 8006b8c:	e013      	b.n	8006bb6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b8e:	f7fd fd79 	bl	8004684 <HAL_GetTick>
 8006b92:	0003      	movs	r3, r0
 8006b94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b96:	e009      	b.n	8006bac <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b98:	f7fd fd74 	bl	8004684 <HAL_GetTick>
 8006b9c:	0002      	movs	r2, r0
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	4a91      	ldr	r2, [pc, #580]	; (8006de8 <HAL_RCC_OscConfig+0x624>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e116      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bac:	4b8d      	ldr	r3, [pc, #564]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bb6:	231f      	movs	r3, #31
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d105      	bne.n	8006bcc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc0:	4b88      	ldr	r3, [pc, #544]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	4b87      	ldr	r3, [pc, #540]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006bc6:	4989      	ldr	r1, [pc, #548]	; (8006dec <HAL_RCC_OscConfig+0x628>)
 8006bc8:	400a      	ands	r2, r1
 8006bca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2210      	movs	r2, #16
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	d063      	beq.n	8006c9e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d12a      	bne.n	8006c34 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006bde:	4b81      	ldr	r3, [pc, #516]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be2:	4b80      	ldr	r3, [pc, #512]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006be4:	2104      	movs	r1, #4
 8006be6:	430a      	orrs	r2, r1
 8006be8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006bea:	4b7e      	ldr	r3, [pc, #504]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bee:	4b7d      	ldr	r3, [pc, #500]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bf6:	f7fd fd45 	bl	8004684 <HAL_GetTick>
 8006bfa:	0003      	movs	r3, r0
 8006bfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006c00:	f7fd fd40 	bl	8004684 <HAL_GetTick>
 8006c04:	0002      	movs	r2, r0
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e0e3      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006c12:	4b74      	ldr	r3, [pc, #464]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c16:	2202      	movs	r2, #2
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d0f1      	beq.n	8006c00 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006c1c:	4b71      	ldr	r3, [pc, #452]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c20:	22f8      	movs	r2, #248	; 0xf8
 8006c22:	4393      	bics	r3, r2
 8006c24:	0019      	movs	r1, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	00da      	lsls	r2, r3, #3
 8006c2c:	4b6d      	ldr	r3, [pc, #436]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	635a      	str	r2, [r3, #52]	; 0x34
 8006c32:	e034      	b.n	8006c9e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	3305      	adds	r3, #5
 8006c3a:	d111      	bne.n	8006c60 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006c3c:	4b69      	ldr	r3, [pc, #420]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c40:	4b68      	ldr	r3, [pc, #416]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c42:	2104      	movs	r1, #4
 8006c44:	438a      	bics	r2, r1
 8006c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006c48:	4b66      	ldr	r3, [pc, #408]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4c:	22f8      	movs	r2, #248	; 0xf8
 8006c4e:	4393      	bics	r3, r2
 8006c50:	0019      	movs	r1, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	00da      	lsls	r2, r3, #3
 8006c58:	4b62      	ldr	r3, [pc, #392]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8006c5e:	e01e      	b.n	8006c9e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006c60:	4b60      	ldr	r3, [pc, #384]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c64:	4b5f      	ldr	r3, [pc, #380]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c66:	2104      	movs	r1, #4
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006c6c:	4b5d      	ldr	r3, [pc, #372]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c70:	4b5c      	ldr	r3, [pc, #368]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c72:	2101      	movs	r1, #1
 8006c74:	438a      	bics	r2, r1
 8006c76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c78:	f7fd fd04 	bl	8004684 <HAL_GetTick>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006c82:	f7fd fcff 	bl	8004684 <HAL_GetTick>
 8006c86:	0002      	movs	r2, r0
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e0a2      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006c94:	4b53      	ldr	r3, [pc, #332]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c98:	2202      	movs	r2, #2
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d1f1      	bne.n	8006c82 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d100      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x4e4>
 8006ca6:	e097      	b.n	8006dd8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ca8:	4b4e      	ldr	r3, [pc, #312]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	220c      	movs	r2, #12
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d100      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x4f2>
 8006cb4:	e06b      	b.n	8006d8e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d14c      	bne.n	8006d58 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cbe:	4b49      	ldr	r3, [pc, #292]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b48      	ldr	r3, [pc, #288]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006cc4:	494a      	ldr	r1, [pc, #296]	; (8006df0 <HAL_RCC_OscConfig+0x62c>)
 8006cc6:	400a      	ands	r2, r1
 8006cc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cca:	f7fd fcdb 	bl	8004684 <HAL_GetTick>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd4:	f7fd fcd6 	bl	8004684 <HAL_GetTick>
 8006cd8:	0002      	movs	r2, r0
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e079      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ce6:	4b3f      	ldr	r3, [pc, #252]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	2380      	movs	r3, #128	; 0x80
 8006cec:	049b      	lsls	r3, r3, #18
 8006cee:	4013      	ands	r3, r2
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cf2:	4b3c      	ldr	r3, [pc, #240]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	220f      	movs	r2, #15
 8006cf8:	4393      	bics	r3, r2
 8006cfa:	0019      	movs	r1, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d00:	4b38      	ldr	r3, [pc, #224]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d02:	430a      	orrs	r2, r1
 8006d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d06:	4b37      	ldr	r3, [pc, #220]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4a3a      	ldr	r2, [pc, #232]	; (8006df4 <HAL_RCC_OscConfig+0x630>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	0019      	movs	r1, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d20:	4b30      	ldr	r3, [pc, #192]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d26:	2180      	movs	r1, #128	; 0x80
 8006d28:	0449      	lsls	r1, r1, #17
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d2e:	f7fd fca9 	bl	8004684 <HAL_GetTick>
 8006d32:	0003      	movs	r3, r0
 8006d34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d38:	f7fd fca4 	bl	8004684 <HAL_GetTick>
 8006d3c:	0002      	movs	r2, r0
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e047      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d4a:	4b26      	ldr	r3, [pc, #152]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	2380      	movs	r3, #128	; 0x80
 8006d50:	049b      	lsls	r3, r3, #18
 8006d52:	4013      	ands	r3, r2
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x574>
 8006d56:	e03f      	b.n	8006dd8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d58:	4b22      	ldr	r3, [pc, #136]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d5e:	4924      	ldr	r1, [pc, #144]	; (8006df0 <HAL_RCC_OscConfig+0x62c>)
 8006d60:	400a      	ands	r2, r1
 8006d62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d64:	f7fd fc8e 	bl	8004684 <HAL_GetTick>
 8006d68:	0003      	movs	r3, r0
 8006d6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d6e:	f7fd fc89 	bl	8004684 <HAL_GetTick>
 8006d72:	0002      	movs	r2, r0
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e02c      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d80:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	2380      	movs	r3, #128	; 0x80
 8006d86:	049b      	lsls	r3, r3, #18
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d1f0      	bne.n	8006d6e <HAL_RCC_OscConfig+0x5aa>
 8006d8c:	e024      	b.n	8006dd8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e01f      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006da0:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <HAL_RCC_OscConfig+0x620>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	025b      	lsls	r3, r3, #9
 8006dac:	401a      	ands	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d10e      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	220f      	movs	r2, #15
 8006dba:	401a      	ands	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d107      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	23f0      	movs	r3, #240	; 0xf0
 8006dc8:	039b      	lsls	r3, r3, #14
 8006dca:	401a      	ands	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	0018      	movs	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	b008      	add	sp, #32
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	40021000 	.word	0x40021000
 8006de8:	00001388 	.word	0x00001388
 8006dec:	efffffff 	.word	0xefffffff
 8006df0:	feffffff 	.word	0xfeffffff
 8006df4:	ffc2ffff 	.word	0xffc2ffff

08006df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0b3      	b.n	8006f74 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e0c:	4b5b      	ldr	r3, [pc, #364]	; (8006f7c <HAL_RCC_ClockConfig+0x184>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	4013      	ands	r3, r2
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d911      	bls.n	8006e3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1a:	4b58      	ldr	r3, [pc, #352]	; (8006f7c <HAL_RCC_ClockConfig+0x184>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4393      	bics	r3, r2
 8006e22:	0019      	movs	r1, r3
 8006e24:	4b55      	ldr	r3, [pc, #340]	; (8006f7c <HAL_RCC_ClockConfig+0x184>)
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e2c:	4b53      	ldr	r3, [pc, #332]	; (8006f7c <HAL_RCC_ClockConfig+0x184>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2201      	movs	r2, #1
 8006e32:	4013      	ands	r3, r2
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d001      	beq.n	8006e3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e09a      	b.n	8006f74 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2202      	movs	r2, #2
 8006e44:	4013      	ands	r3, r2
 8006e46:	d015      	beq.n	8006e74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d006      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006e52:	4b4b      	ldr	r3, [pc, #300]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	4b4a      	ldr	r3, [pc, #296]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006e58:	21e0      	movs	r1, #224	; 0xe0
 8006e5a:	00c9      	lsls	r1, r1, #3
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e60:	4b47      	ldr	r3, [pc, #284]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	22f0      	movs	r2, #240	; 0xf0
 8006e66:	4393      	bics	r3, r2
 8006e68:	0019      	movs	r1, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	4b44      	ldr	r3, [pc, #272]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006e70:	430a      	orrs	r2, r1
 8006e72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d040      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d107      	bne.n	8006e96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e86:	4b3e      	ldr	r3, [pc, #248]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	2380      	movs	r3, #128	; 0x80
 8006e8c:	029b      	lsls	r3, r3, #10
 8006e8e:	4013      	ands	r3, r2
 8006e90:	d114      	bne.n	8006ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e06e      	b.n	8006f74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d107      	bne.n	8006eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e9e:	4b38      	ldr	r3, [pc, #224]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	2380      	movs	r3, #128	; 0x80
 8006ea4:	049b      	lsls	r3, r3, #18
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	d108      	bne.n	8006ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e062      	b.n	8006f74 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eae:	4b34      	ldr	r3, [pc, #208]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d101      	bne.n	8006ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e05b      	b.n	8006f74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ebc:	4b30      	ldr	r3, [pc, #192]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2203      	movs	r2, #3
 8006ec2:	4393      	bics	r3, r2
 8006ec4:	0019      	movs	r1, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	4b2d      	ldr	r3, [pc, #180]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ed0:	f7fd fbd8 	bl	8004684 <HAL_GetTick>
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed8:	e009      	b.n	8006eee <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eda:	f7fd fbd3 	bl	8004684 <HAL_GetTick>
 8006ede:	0002      	movs	r2, r0
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	4a27      	ldr	r2, [pc, #156]	; (8006f84 <HAL_RCC_ClockConfig+0x18c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e042      	b.n	8006f74 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eee:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	220c      	movs	r2, #12
 8006ef4:	401a      	ands	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d1ec      	bne.n	8006eda <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f00:	4b1e      	ldr	r3, [pc, #120]	; (8006f7c <HAL_RCC_ClockConfig+0x184>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2201      	movs	r2, #1
 8006f06:	4013      	ands	r3, r2
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d211      	bcs.n	8006f32 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0e:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <HAL_RCC_ClockConfig+0x184>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2201      	movs	r2, #1
 8006f14:	4393      	bics	r3, r2
 8006f16:	0019      	movs	r1, r3
 8006f18:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <HAL_RCC_ClockConfig+0x184>)
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f20:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <HAL_RCC_ClockConfig+0x184>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2201      	movs	r2, #1
 8006f26:	4013      	ands	r3, r2
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d001      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e020      	b.n	8006f74 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2204      	movs	r2, #4
 8006f38:	4013      	ands	r3, r2
 8006f3a:	d009      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006f3c:	4b10      	ldr	r3, [pc, #64]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4a11      	ldr	r2, [pc, #68]	; (8006f88 <HAL_RCC_ClockConfig+0x190>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	0019      	movs	r1, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	4b0d      	ldr	r3, [pc, #52]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006f50:	f000 f820 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006f54:	0001      	movs	r1, r0
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <HAL_RCC_ClockConfig+0x188>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	091b      	lsrs	r3, r3, #4
 8006f5c:	220f      	movs	r2, #15
 8006f5e:	4013      	ands	r3, r2
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_RCC_ClockConfig+0x194>)
 8006f62:	5cd3      	ldrb	r3, [r2, r3]
 8006f64:	000a      	movs	r2, r1
 8006f66:	40da      	lsrs	r2, r3
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <HAL_RCC_ClockConfig+0x198>)
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	f7fd fb43 	bl	80045f8 <HAL_InitTick>
  
  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	0018      	movs	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b004      	add	sp, #16
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	40022000 	.word	0x40022000
 8006f80:	40021000 	.word	0x40021000
 8006f84:	00001388 	.word	0x00001388
 8006f88:	fffff8ff 	.word	0xfffff8ff
 8006f8c:	080079b0 	.word	0x080079b0
 8006f90:	20000004 	.word	0x20000004

08006f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	b590      	push	{r4, r7, lr}
 8006f96:	b08f      	sub	sp, #60	; 0x3c
 8006f98:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006f9a:	2314      	movs	r3, #20
 8006f9c:	18fb      	adds	r3, r7, r3
 8006f9e:	4a2b      	ldr	r2, [pc, #172]	; (800704c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fa0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006fa2:	c313      	stmia	r3!, {r0, r1, r4}
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006fa8:	1d3b      	adds	r3, r7, #4
 8006faa:	4a29      	ldr	r2, [pc, #164]	; (8007050 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006fae:	c313      	stmia	r3!, {r0, r1, r4}
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006fc8:	4b22      	ldr	r3, [pc, #136]	; (8007054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	220c      	movs	r2, #12
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d002      	beq.n	8006fde <HAL_RCC_GetSysClockFreq+0x4a>
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d003      	beq.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x50>
 8006fdc:	e02d      	b.n	800703a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006fde:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006fe0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006fe2:	e02d      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	0c9b      	lsrs	r3, r3, #18
 8006fe8:	220f      	movs	r2, #15
 8006fea:	4013      	ands	r3, r2
 8006fec:	2214      	movs	r2, #20
 8006fee:	18ba      	adds	r2, r7, r2
 8006ff0:	5cd3      	ldrb	r3, [r2, r3]
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006ff4:	4b17      	ldr	r3, [pc, #92]	; (8007054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	220f      	movs	r2, #15
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	1d3a      	adds	r2, r7, #4
 8006ffe:	5cd3      	ldrb	r3, [r2, r3]
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007004:	2380      	movs	r3, #128	; 0x80
 8007006:	025b      	lsls	r3, r3, #9
 8007008:	4013      	ands	r3, r2
 800700a:	d009      	beq.n	8007020 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800700c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800700e:	4812      	ldr	r0, [pc, #72]	; (8007058 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007010:	f7f9 f87a 	bl	8000108 <__udivsi3>
 8007014:	0003      	movs	r3, r0
 8007016:	001a      	movs	r2, r3
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	4353      	muls	r3, r2
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
 800701e:	e009      	b.n	8007034 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007022:	000a      	movs	r2, r1
 8007024:	0152      	lsls	r2, r2, #5
 8007026:	1a52      	subs	r2, r2, r1
 8007028:	0193      	lsls	r3, r2, #6
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	185b      	adds	r3, r3, r1
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007038:	e002      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800703a:	4b07      	ldr	r3, [pc, #28]	; (8007058 <HAL_RCC_GetSysClockFreq+0xc4>)
 800703c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800703e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007042:	0018      	movs	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	b00f      	add	sp, #60	; 0x3c
 8007048:	bd90      	pop	{r4, r7, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	08007910 	.word	0x08007910
 8007050:	08007920 	.word	0x08007920
 8007054:	40021000 	.word	0x40021000
 8007058:	007a1200 	.word	0x007a1200

0800705c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	2380      	movs	r3, #128	; 0x80
 8007072:	025b      	lsls	r3, r3, #9
 8007074:	4013      	ands	r3, r2
 8007076:	d100      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007078:	e08e      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800707a:	2017      	movs	r0, #23
 800707c:	183b      	adds	r3, r7, r0
 800707e:	2200      	movs	r2, #0
 8007080:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007082:	4b5f      	ldr	r3, [pc, #380]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007084:	69da      	ldr	r2, [r3, #28]
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	055b      	lsls	r3, r3, #21
 800708a:	4013      	ands	r3, r2
 800708c:	d110      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800708e:	4b5c      	ldr	r3, [pc, #368]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	4b5b      	ldr	r3, [pc, #364]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007094:	2180      	movs	r1, #128	; 0x80
 8007096:	0549      	lsls	r1, r1, #21
 8007098:	430a      	orrs	r2, r1
 800709a:	61da      	str	r2, [r3, #28]
 800709c:	4b58      	ldr	r3, [pc, #352]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	055b      	lsls	r3, r3, #21
 80070a4:	4013      	ands	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]
 80070a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070aa:	183b      	adds	r3, r7, r0
 80070ac:	2201      	movs	r2, #1
 80070ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070b0:	4b54      	ldr	r3, [pc, #336]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4013      	ands	r3, r2
 80070ba:	d11a      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070bc:	4b51      	ldr	r3, [pc, #324]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4b50      	ldr	r3, [pc, #320]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80070c2:	2180      	movs	r1, #128	; 0x80
 80070c4:	0049      	lsls	r1, r1, #1
 80070c6:	430a      	orrs	r2, r1
 80070c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070ca:	f7fd fadb 	bl	8004684 <HAL_GetTick>
 80070ce:	0003      	movs	r3, r0
 80070d0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d2:	e008      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070d4:	f7fd fad6 	bl	8004684 <HAL_GetTick>
 80070d8:	0002      	movs	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b64      	cmp	r3, #100	; 0x64
 80070e0:	d901      	bls.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e087      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e6:	4b47      	ldr	r3, [pc, #284]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	2380      	movs	r3, #128	; 0x80
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4013      	ands	r3, r2
 80070f0:	d0f0      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070f2:	4b43      	ldr	r3, [pc, #268]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80070f4:	6a1a      	ldr	r2, [r3, #32]
 80070f6:	23c0      	movs	r3, #192	; 0xc0
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4013      	ands	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d034      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	23c0      	movs	r3, #192	; 0xc0
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4013      	ands	r3, r2
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	429a      	cmp	r2, r3
 8007112:	d02c      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007114:	4b3a      	ldr	r3, [pc, #232]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	4a3b      	ldr	r2, [pc, #236]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800711a:	4013      	ands	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800711e:	4b38      	ldr	r3, [pc, #224]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	4b37      	ldr	r3, [pc, #220]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007124:	2180      	movs	r1, #128	; 0x80
 8007126:	0249      	lsls	r1, r1, #9
 8007128:	430a      	orrs	r2, r1
 800712a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800712c:	4b34      	ldr	r3, [pc, #208]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800712e:	6a1a      	ldr	r2, [r3, #32]
 8007130:	4b33      	ldr	r3, [pc, #204]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007132:	4936      	ldr	r1, [pc, #216]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007134:	400a      	ands	r2, r1
 8007136:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007138:	4b31      	ldr	r3, [pc, #196]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	4013      	ands	r3, r2
 8007144:	d013      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fd fa9d 	bl	8004684 <HAL_GetTick>
 800714a:	0003      	movs	r3, r0
 800714c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714e:	e009      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007150:	f7fd fa98 	bl	8004684 <HAL_GetTick>
 8007154:	0002      	movs	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	4a2d      	ldr	r2, [pc, #180]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d901      	bls.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e048      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007164:	4b26      	ldr	r3, [pc, #152]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	2202      	movs	r2, #2
 800716a:	4013      	ands	r3, r2
 800716c:	d0f0      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800716e:	4b24      	ldr	r3, [pc, #144]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	4a25      	ldr	r2, [pc, #148]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007174:	4013      	ands	r3, r2
 8007176:	0019      	movs	r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4b20      	ldr	r3, [pc, #128]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800717e:	430a      	orrs	r2, r1
 8007180:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007182:	2317      	movs	r3, #23
 8007184:	18fb      	adds	r3, r7, r3
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d105      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800718c:	4b1c      	ldr	r3, [pc, #112]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007192:	4920      	ldr	r1, [pc, #128]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007194:	400a      	ands	r2, r1
 8007196:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2201      	movs	r2, #1
 800719e:	4013      	ands	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071a2:	4b17      	ldr	r3, [pc, #92]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	2203      	movs	r2, #3
 80071a8:	4393      	bics	r3, r2
 80071aa:	0019      	movs	r1, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	4b13      	ldr	r3, [pc, #76]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80071b2:	430a      	orrs	r2, r1
 80071b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2220      	movs	r2, #32
 80071bc:	4013      	ands	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071c0:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	2210      	movs	r2, #16
 80071c6:	4393      	bics	r3, r2
 80071c8:	0019      	movs	r1, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80071d0:	430a      	orrs	r2, r1
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	2380      	movs	r3, #128	; 0x80
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4013      	ands	r3, r2
 80071de:	d009      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	2240      	movs	r2, #64	; 0x40
 80071e6:	4393      	bics	r3, r2
 80071e8:	0019      	movs	r1, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691a      	ldr	r2, [r3, #16]
 80071ee:	4b04      	ldr	r3, [pc, #16]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80071f0:	430a      	orrs	r2, r1
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	0018      	movs	r0, r3
 80071f8:	46bd      	mov	sp, r7
 80071fa:	b006      	add	sp, #24
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	40021000 	.word	0x40021000
 8007204:	40007000 	.word	0x40007000
 8007208:	fffffcff 	.word	0xfffffcff
 800720c:	fffeffff 	.word	0xfffeffff
 8007210:	00001388 	.word	0x00001388
 8007214:	efffffff 	.word	0xefffffff

08007218 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e081      	b.n	800732e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7f5b      	ldrb	r3, [r3, #29]
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	0018      	movs	r0, r3
 800723e:	f7fa fddd 	bl	8001dfc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	22ca      	movs	r2, #202	; 0xca
 800724e:	625a      	str	r2, [r3, #36]	; 0x24
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2253      	movs	r2, #83	; 0x53
 8007256:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	0018      	movs	r0, r3
 800725c:	f000 faa9 	bl	80077b2 <RTC_EnterInitMode>
 8007260:	1e03      	subs	r3, r0, #0
 8007262:	d008      	beq.n	8007276 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	22ff      	movs	r2, #255	; 0xff
 800726a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2204      	movs	r2, #4
 8007270:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e05b      	b.n	800732e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	492d      	ldr	r1, [pc, #180]	; (8007338 <HAL_RTC_Init+0x120>)
 8007282:	400a      	ands	r2, r1
 8007284:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6899      	ldr	r1, [r3, #8]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	68d2      	ldr	r2, [r2, #12]
 80072ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6919      	ldr	r1, [r3, #16]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	041a      	lsls	r2, r3, #16
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2180      	movs	r1, #128	; 0x80
 80072ce:	438a      	bics	r2, r1
 80072d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	2220      	movs	r2, #32
 80072da:	4013      	ands	r3, r2
 80072dc:	d10e      	bne.n	80072fc <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	0018      	movs	r0, r3
 80072e2:	f000 fa3d 	bl	8007760 <HAL_RTC_WaitForSynchro>
 80072e6:	1e03      	subs	r3, r0, #0
 80072e8:	d008      	beq.n	80072fc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	22ff      	movs	r2, #255	; 0xff
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2204      	movs	r2, #4
 80072f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e018      	b.n	800732e <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	490d      	ldr	r1, [pc, #52]	; (800733c <HAL_RTC_Init+0x124>)
 8007308:	400a      	ands	r2, r1
 800730a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	22ff      	movs	r2, #255	; 0xff
 8007324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800732c:	2300      	movs	r3, #0
  }
}
 800732e:	0018      	movs	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	b002      	add	sp, #8
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	ff8fffbf 	.word	0xff8fffbf
 800733c:	fffbffff 	.word	0xfffbffff

08007340 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	7f1b      	ldrb	r3, [r3, #28]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d101      	bne.n	800735c <HAL_RTC_SetTime+0x1c>
 8007358:	2302      	movs	r3, #2
 800735a:	e0a5      	b.n	80074a8 <HAL_RTC_SetTime+0x168>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2202      	movs	r2, #2
 8007366:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d125      	bne.n	80073ba <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2240      	movs	r2, #64	; 0x40
 8007376:	4013      	ands	r3, r2
 8007378:	d102      	bne.n	8007380 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	0018      	movs	r0, r3
 8007386:	f000 fa40 	bl	800780a <RTC_ByteToBcd2>
 800738a:	0003      	movs	r3, r0
 800738c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	0018      	movs	r0, r3
 8007394:	f000 fa39 	bl	800780a <RTC_ByteToBcd2>
 8007398:	0003      	movs	r3, r0
 800739a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800739c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	789b      	ldrb	r3, [r3, #2]
 80073a2:	0018      	movs	r0, r3
 80073a4:	f000 fa31 	bl	800780a <RTC_ByteToBcd2>
 80073a8:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80073aa:	0022      	movs	r2, r4
 80073ac:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	78db      	ldrb	r3, [r3, #3]
 80073b2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e017      	b.n	80073ea <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2240      	movs	r2, #64	; 0x40
 80073c2:	4013      	ands	r3, r2
 80073c4:	d102      	bne.n	80073cc <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80073d8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80073de:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	78db      	ldrb	r3, [r3, #3]
 80073e4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	22ca      	movs	r2, #202	; 0xca
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2253      	movs	r2, #83	; 0x53
 80073f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 f9d8 	bl	80077b2 <RTC_EnterInitMode>
 8007402:	1e03      	subs	r3, r0, #0
 8007404:	d00b      	beq.n	800741e <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	22ff      	movs	r2, #255	; 0xff
 800740c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2204      	movs	r2, #4
 8007412:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e044      	b.n	80074a8 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4922      	ldr	r1, [pc, #136]	; (80074b0 <HAL_RTC_SetTime+0x170>)
 8007426:	400a      	ands	r2, r1
 8007428:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	491f      	ldr	r1, [pc, #124]	; (80074b4 <HAL_RTC_SetTime+0x174>)
 8007436:	400a      	ands	r2, r1
 8007438:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6899      	ldr	r1, [r3, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	431a      	orrs	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2180      	movs	r1, #128	; 0x80
 800745e:	438a      	bics	r2, r1
 8007460:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2220      	movs	r2, #32
 800746a:	4013      	ands	r3, r2
 800746c:	d111      	bne.n	8007492 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	0018      	movs	r0, r3
 8007472:	f000 f975 	bl	8007760 <HAL_RTC_WaitForSynchro>
 8007476:	1e03      	subs	r3, r0, #0
 8007478:	d00b      	beq.n	8007492 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	22ff      	movs	r2, #255	; 0xff
 8007480:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2204      	movs	r2, #4
 8007486:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e00a      	b.n	80074a8 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	22ff      	movs	r2, #255	; 0xff
 8007498:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80074a6:	2300      	movs	r3, #0
  }
}
 80074a8:	0018      	movs	r0, r3
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b007      	add	sp, #28
 80074ae:	bd90      	pop	{r4, r7, pc}
 80074b0:	007f7f7f 	.word	0x007f7f7f
 80074b4:	fffbffff 	.word	0xfffbffff

080074b8 <HAL_RTC_GetTime>:
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read
  * to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	045b      	lsls	r3, r3, #17
 80074da:	0c5a      	lsrs	r2, r3, #17
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a22      	ldr	r2, [pc, #136]	; (8007570 <HAL_RTC_GetTime+0xb8>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	223f      	movs	r2, #63	; 0x3f
 80074f4:	4013      	ands	r3, r2
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	b2db      	uxtb	r3, r3
 8007502:	227f      	movs	r2, #127	; 0x7f
 8007504:	4013      	ands	r3, r2
 8007506:	b2da      	uxtb	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	227f      	movs	r2, #127	; 0x7f
 8007512:	4013      	ands	r3, r2
 8007514:	b2da      	uxtb	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	0c1b      	lsrs	r3, r3, #16
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2240      	movs	r2, #64	; 0x40
 8007522:	4013      	ands	r3, r2
 8007524:	b2da      	uxtb	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d11a      	bne.n	8007566 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	0018      	movs	r0, r3
 8007536:	f000 f989 	bl	800784c <RTC_Bcd2ToByte>
 800753a:	0003      	movs	r3, r0
 800753c:	001a      	movs	r2, r3
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	0018      	movs	r0, r3
 8007548:	f000 f980 	bl	800784c <RTC_Bcd2ToByte>
 800754c:	0003      	movs	r3, r0
 800754e:	001a      	movs	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	789b      	ldrb	r3, [r3, #2]
 8007558:	0018      	movs	r0, r3
 800755a:	f000 f977 	bl	800784c <RTC_Bcd2ToByte>
 800755e:	0003      	movs	r3, r0
 8007560:	001a      	movs	r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	0018      	movs	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	b006      	add	sp, #24
 800756e:	bd80      	pop	{r7, pc}
 8007570:	007f7f7f 	.word	0x007f7f7f

08007574 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007574:	b590      	push	{r4, r7, lr}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	7f1b      	ldrb	r3, [r3, #28]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_RTC_SetDate+0x1c>
 800758c:	2302      	movs	r3, #2
 800758e:	e091      	b.n	80076b4 <HAL_RTC_SetDate+0x140>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2202      	movs	r2, #2
 800759a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10e      	bne.n	80075c0 <HAL_RTC_SetDate+0x4c>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	001a      	movs	r2, r3
 80075a8:	2310      	movs	r3, #16
 80075aa:	4013      	ands	r3, r2
 80075ac:	d008      	beq.n	80075c0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2210      	movs	r2, #16
 80075b4:	4393      	bics	r3, r2
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	330a      	adds	r3, #10
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d11c      	bne.n	8007600 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	0018      	movs	r0, r3
 80075cc:	f000 f91d 	bl	800780a <RTC_ByteToBcd2>
 80075d0:	0003      	movs	r3, r0
 80075d2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	0018      	movs	r0, r3
 80075da:	f000 f916 	bl	800780a <RTC_ByteToBcd2>
 80075de:	0003      	movs	r3, r0
 80075e0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80075e2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	789b      	ldrb	r3, [r3, #2]
 80075e8:	0018      	movs	r0, r3
 80075ea:	f000 f90e 	bl	800780a <RTC_ByteToBcd2>
 80075ee:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80075f0:	0022      	movs	r2, r4
 80075f2:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	e00e      	b.n	800761e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	78db      	ldrb	r3, [r3, #3]
 8007604:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	785b      	ldrb	r3, [r3, #1]
 800760a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800760c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007612:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	22ca      	movs	r2, #202	; 0xca
 8007624:	625a      	str	r2, [r3, #36]	; 0x24
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2253      	movs	r2, #83	; 0x53
 800762c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	0018      	movs	r0, r3
 8007632:	f000 f8be 	bl	80077b2 <RTC_EnterInitMode>
 8007636:	1e03      	subs	r3, r0, #0
 8007638:	d00b      	beq.n	8007652 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	22ff      	movs	r2, #255	; 0xff
 8007640:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2204      	movs	r2, #4
 8007646:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e030      	b.n	80076b4 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4918      	ldr	r1, [pc, #96]	; (80076bc <HAL_RTC_SetDate+0x148>)
 800765a:	400a      	ands	r2, r1
 800765c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2180      	movs	r1, #128	; 0x80
 800766a:	438a      	bics	r2, r1
 800766c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	2220      	movs	r2, #32
 8007676:	4013      	ands	r3, r2
 8007678:	d111      	bne.n	800769e <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	0018      	movs	r0, r3
 800767e:	f000 f86f 	bl	8007760 <HAL_RTC_WaitForSynchro>
 8007682:	1e03      	subs	r3, r0, #0
 8007684:	d00b      	beq.n	800769e <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	22ff      	movs	r2, #255	; 0xff
 800768c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2204      	movs	r2, #4
 8007692:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e00a      	b.n	80076b4 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	22ff      	movs	r2, #255	; 0xff
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80076b2:	2300      	movs	r3, #0
  }
}
 80076b4:	0018      	movs	r0, r3
 80076b6:	46bd      	mov	sp, r7
 80076b8:	b007      	add	sp, #28
 80076ba:	bd90      	pop	{r4, r7, pc}
 80076bc:	00ffff3f 	.word	0x00ffff3f

080076c0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	4a21      	ldr	r2, [pc, #132]	; (800775c <HAL_RTC_GetDate+0x9c>)
 80076d8:	4013      	ands	r3, r2
 80076da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	0c1b      	lsrs	r3, r3, #16
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	0a1b      	lsrs	r3, r3, #8
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	221f      	movs	r2, #31
 80076ee:	4013      	ands	r3, r2
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	223f      	movs	r2, #63	; 0x3f
 80076fc:	4013      	ands	r3, r2
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	0b5b      	lsrs	r3, r3, #13
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2207      	movs	r2, #7
 800770c:	4013      	ands	r3, r2
 800770e:	b2da      	uxtb	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d11a      	bne.n	8007750 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	78db      	ldrb	r3, [r3, #3]
 800771e:	0018      	movs	r0, r3
 8007720:	f000 f894 	bl	800784c <RTC_Bcd2ToByte>
 8007724:	0003      	movs	r3, r0
 8007726:	001a      	movs	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	0018      	movs	r0, r3
 8007732:	f000 f88b 	bl	800784c <RTC_Bcd2ToByte>
 8007736:	0003      	movs	r3, r0
 8007738:	001a      	movs	r2, r3
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	789b      	ldrb	r3, [r3, #2]
 8007742:	0018      	movs	r0, r3
 8007744:	f000 f882 	bl	800784c <RTC_Bcd2ToByte>
 8007748:	0003      	movs	r3, r0
 800774a:	001a      	movs	r2, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	0018      	movs	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	b006      	add	sp, #24
 8007758:	bd80      	pop	{r7, pc}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	00ffff3f 	.word	0x00ffff3f

08007760 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	21a0      	movs	r1, #160	; 0xa0
 8007778:	438a      	bics	r2, r1
 800777a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800777c:	f7fc ff82 	bl	8004684 <HAL_GetTick>
 8007780:	0003      	movs	r3, r0
 8007782:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007784:	e00a      	b.n	800779c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007786:	f7fc ff7d 	bl	8004684 <HAL_GetTick>
 800778a:	0002      	movs	r2, r0
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	23fa      	movs	r3, #250	; 0xfa
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	429a      	cmp	r2, r3
 8007796:	d901      	bls.n	800779c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e006      	b.n	80077aa <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	2220      	movs	r2, #32
 80077a4:	4013      	ands	r3, r2
 80077a6:	d0ee      	beq.n	8007786 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	0018      	movs	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b004      	add	sp, #16
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2240      	movs	r2, #64	; 0x40
 80077c6:	4013      	ands	r3, r2
 80077c8:	d11a      	bne.n	8007800 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2201      	movs	r2, #1
 80077d0:	4252      	negs	r2, r2
 80077d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80077d4:	f7fc ff56 	bl	8004684 <HAL_GetTick>
 80077d8:	0003      	movs	r3, r0
 80077da:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80077dc:	e00a      	b.n	80077f4 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077de:	f7fc ff51 	bl	8004684 <HAL_GetTick>
 80077e2:	0002      	movs	r2, r0
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	23fa      	movs	r3, #250	; 0xfa
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d901      	bls.n	80077f4 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e006      	b.n	8007802 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	2240      	movs	r2, #64	; 0x40
 80077fc:	4013      	ands	r3, r2
 80077fe:	d0ee      	beq.n	80077de <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	0018      	movs	r0, r3
 8007804:	46bd      	mov	sp, r7
 8007806:	b004      	add	sp, #16
 8007808:	bd80      	pop	{r7, pc}

0800780a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	0002      	movs	r2, r0
 8007812:	1dfb      	adds	r3, r7, #7
 8007814:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800781a:	e007      	b.n	800782c <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007822:	1dfb      	adds	r3, r7, #7
 8007824:	1dfa      	adds	r2, r7, #7
 8007826:	7812      	ldrb	r2, [r2, #0]
 8007828:	3a0a      	subs	r2, #10
 800782a:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 800782c:	1dfb      	adds	r3, r7, #7
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b09      	cmp	r3, #9
 8007832:	d8f3      	bhi.n	800781c <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	b2da      	uxtb	r2, r3
 800783c:	1dfb      	adds	r3, r7, #7
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4313      	orrs	r3, r2
 8007842:	b2db      	uxtb	r3, r3
}
 8007844:	0018      	movs	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	b004      	add	sp, #16
 800784a:	bd80      	pop	{r7, pc}

0800784c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	0002      	movs	r2, r0
 8007854:	1dfb      	adds	r3, r7, #7
 8007856:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800785c:	1dfb      	adds	r3, r7, #7
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	091b      	lsrs	r3, r3, #4
 8007862:	b2db      	uxtb	r3, r3
 8007864:	001a      	movs	r2, r3
 8007866:	0013      	movs	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	189b      	adds	r3, r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8007870:	1dfb      	adds	r3, r7, #7
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	220f      	movs	r2, #15
 8007876:	4013      	ands	r3, r2
 8007878:	b2da      	uxtb	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	18d3      	adds	r3, r2, r3
 8007880:	b2db      	uxtb	r3, r3
}
 8007882:	0018      	movs	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	b004      	add	sp, #16
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <__libc_init_array>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	2600      	movs	r6, #0
 8007890:	4d0c      	ldr	r5, [pc, #48]	; (80078c4 <__libc_init_array+0x38>)
 8007892:	4c0d      	ldr	r4, [pc, #52]	; (80078c8 <__libc_init_array+0x3c>)
 8007894:	1b64      	subs	r4, r4, r5
 8007896:	10a4      	asrs	r4, r4, #2
 8007898:	42a6      	cmp	r6, r4
 800789a:	d109      	bne.n	80078b0 <__libc_init_array+0x24>
 800789c:	2600      	movs	r6, #0
 800789e:	f000 f82b 	bl	80078f8 <_init>
 80078a2:	4d0a      	ldr	r5, [pc, #40]	; (80078cc <__libc_init_array+0x40>)
 80078a4:	4c0a      	ldr	r4, [pc, #40]	; (80078d0 <__libc_init_array+0x44>)
 80078a6:	1b64      	subs	r4, r4, r5
 80078a8:	10a4      	asrs	r4, r4, #2
 80078aa:	42a6      	cmp	r6, r4
 80078ac:	d105      	bne.n	80078ba <__libc_init_array+0x2e>
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	00b3      	lsls	r3, r6, #2
 80078b2:	58eb      	ldr	r3, [r5, r3]
 80078b4:	4798      	blx	r3
 80078b6:	3601      	adds	r6, #1
 80078b8:	e7ee      	b.n	8007898 <__libc_init_array+0xc>
 80078ba:	00b3      	lsls	r3, r6, #2
 80078bc:	58eb      	ldr	r3, [r5, r3]
 80078be:	4798      	blx	r3
 80078c0:	3601      	adds	r6, #1
 80078c2:	e7f2      	b.n	80078aa <__libc_init_array+0x1e>
 80078c4:	08007a34 	.word	0x08007a34
 80078c8:	08007a34 	.word	0x08007a34
 80078cc:	08007a34 	.word	0x08007a34
 80078d0:	08007a38 	.word	0x08007a38

080078d4 <memcpy>:
 80078d4:	2300      	movs	r3, #0
 80078d6:	b510      	push	{r4, lr}
 80078d8:	429a      	cmp	r2, r3
 80078da:	d100      	bne.n	80078de <memcpy+0xa>
 80078dc:	bd10      	pop	{r4, pc}
 80078de:	5ccc      	ldrb	r4, [r1, r3]
 80078e0:	54c4      	strb	r4, [r0, r3]
 80078e2:	3301      	adds	r3, #1
 80078e4:	e7f8      	b.n	80078d8 <memcpy+0x4>

080078e6 <memset>:
 80078e6:	0003      	movs	r3, r0
 80078e8:	1882      	adds	r2, r0, r2
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d100      	bne.n	80078f0 <memset+0xa>
 80078ee:	4770      	bx	lr
 80078f0:	7019      	strb	r1, [r3, #0]
 80078f2:	3301      	adds	r3, #1
 80078f4:	e7f9      	b.n	80078ea <memset+0x4>
	...

080078f8 <_init>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr

08007904 <_fini>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr
